
Password-activated door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017c  00800060  000010f6  0000118a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  008001dc  008001dc  00001306  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00001db0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014a7  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c3  00000000  00000000  000033b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e45  00000000  00000000  00003b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000484  00000000  00000000  000049c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049c  00000000  00000000  00004e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011da  00000000  00000000  000052e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000064ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3d       	cpi	r26, 0xDC	; 220
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac ed       	ldi	r26, 0xDC	; 220
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 34       	cpi	r26, 0x41	; 65
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f7 07 	call	0xfee	; 0xfee <main>
      8a:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_clkPrescaler>:
//****************************************************************************
//This function selects the conversion time of the ADC
//NB: for no prescaler enter "1"
void adc_clkPrescaler(unsigned char prescaler)
{
	ADCSRA &= (~(1<<ADPS0)) & (~(1<<ADPS1)) & (~(1<<ADPS2)); // clear ADPS2:ADPS0 for initialization
      92:	96 b1       	in	r25, 0x06	; 6
      94:	98 7f       	andi	r25, 0xF8	; 248
      96:	96 b9       	out	0x06, r25	; 6
	
	switch(prescaler)
      98:	80 31       	cpi	r24, 0x10	; 16
      9a:	c1 f0       	breq	.+48     	; 0xcc <adc_clkPrescaler+0x3a>
      9c:	81 31       	cpi	r24, 0x11	; 17
      9e:	38 f4       	brcc	.+14     	; 0xae <adc_clkPrescaler+0x1c>
      a0:	84 30       	cpi	r24, 0x04	; 4
      a2:	71 f0       	breq	.+28     	; 0xc0 <adc_clkPrescaler+0x2e>
      a4:	88 30       	cpi	r24, 0x08	; 8
      a6:	71 f0       	breq	.+28     	; 0xc4 <adc_clkPrescaler+0x32>
      a8:	82 30       	cpi	r24, 0x02	; 2
      aa:	f1 f4       	brne	.+60     	; 0xe8 <adc_clkPrescaler+0x56>
      ac:	07 c0       	rjmp	.+14     	; 0xbc <adc_clkPrescaler+0x2a>
      ae:	80 34       	cpi	r24, 0x40	; 64
      b0:	99 f0       	breq	.+38     	; 0xd8 <adc_clkPrescaler+0x46>
      b2:	80 38       	cpi	r24, 0x80	; 128
      b4:	a9 f0       	breq	.+42     	; 0xe0 <adc_clkPrescaler+0x4e>
      b6:	80 32       	cpi	r24, 0x20	; 32
      b8:	b9 f4       	brne	.+46     	; 0xe8 <adc_clkPrescaler+0x56>
      ba:	0a c0       	rjmp	.+20     	; 0xd0 <adc_clkPrescaler+0x3e>
	{
		case 2:
			ADCSRA |= (1<<ADPS0);
      bc:	30 9a       	sbi	0x06, 0	; 6
			break;
      be:	08 95       	ret
		case 4:
			ADCSRA |= (1<<ADPS1);
      c0:	31 9a       	sbi	0x06, 1	; 6
			break;
      c2:	08 95       	ret
		case 8:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1);
      c4:	86 b1       	in	r24, 0x06	; 6
      c6:	83 60       	ori	r24, 0x03	; 3
      c8:	86 b9       	out	0x06, r24	; 6
			break;
      ca:	08 95       	ret
		case 16:
			ADCSRA |= (1<<ADPS2);
      cc:	32 9a       	sbi	0x06, 2	; 6
			break;
      ce:	08 95       	ret
		case 32:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS2);
      d0:	86 b1       	in	r24, 0x06	; 6
      d2:	85 60       	ori	r24, 0x05	; 5
      d4:	86 b9       	out	0x06, r24	; 6
			break;
      d6:	08 95       	ret
		case 64:
			ADCSRA |= (1<<ADPS1) | (1<<ADPS2);
      d8:	86 b1       	in	r24, 0x06	; 6
      da:	86 60       	ori	r24, 0x06	; 6
      dc:	86 b9       	out	0x06, r24	; 6
			break;
      de:	08 95       	ret
		case 128:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
      e0:	86 b1       	in	r24, 0x06	; 6
      e2:	87 60       	ori	r24, 0x07	; 7
      e4:	86 b9       	out	0x06, r24	; 6
			break;
      e6:	08 95       	ret
		default:
			ADCSRA |= 0x00;			//don't change any thing if no prescalar
      e8:	86 b1       	in	r24, 0x06	; 6
      ea:	86 b9       	out	0x06, r24	; 6
      ec:	08 95       	ret

000000ee <adc_voltageReference>:
}
//****************************************************************************
//This function selects the voltage reference
void adc_voltageReference(unsigned char Vref)
{
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
      ee:	97 b1       	in	r25, 0x07	; 7
      f0:	9f 73       	andi	r25, 0x3F	; 63
      f2:	97 b9       	out	0x07, r25	; 7
	
	switch(Vref)
      f4:	81 30       	cpi	r24, 0x01	; 1
      f6:	41 f0       	breq	.+16     	; 0x108 <adc_voltageReference+0x1a>
      f8:	81 30       	cpi	r24, 0x01	; 1
      fa:	18 f0       	brcs	.+6      	; 0x102 <adc_voltageReference+0x14>
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	51 f4       	brne	.+20     	; 0x114 <adc_voltageReference+0x26>
     100:	05 c0       	rjmp	.+10     	; 0x10c <adc_voltageReference+0x1e>
	{
		case AREF:
			ADMUX |= 0x00;
     102:	87 b1       	in	r24, 0x07	; 7
     104:	87 b9       	out	0x07, r24	; 7
			break;
     106:	08 95       	ret
		case AVCC:
			ADMUX |= (1<<REFS0);
     108:	3e 9a       	sbi	0x07, 6	; 7
			break;
     10a:	08 95       	ret
		case INTERNAL:
			ADMUX |= (1<<REFS0) | (1<<REFS1);
     10c:	87 b1       	in	r24, 0x07	; 7
     10e:	80 6c       	ori	r24, 0xC0	; 192
     110:	87 b9       	out	0x07, r24	; 7
			break;
     112:	08 95       	ret
		default:
			ADMUX |= 0x00;
     114:	87 b1       	in	r24, 0x07	; 7
     116:	87 b9       	out	0x07, r24	; 7
     118:	08 95       	ret

0000011a <adc_init>:
#include "ADC.h"

//****************************************************************************
//This function enables ADC module
void adc_init(unsigned char prescaler, unsigned char vref, unsigned char location)
{
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	d6 2f       	mov	r29, r22
     120:	c4 2f       	mov	r28, r20
	ADCSRA |= (1<<ADEN); //enable ADC
     122:	37 9a       	sbi	0x06, 7	; 6
	adc_clkPrescaler(prescaler);
     124:	0e 94 49 00 	call	0x92	; 0x92 <adc_clkPrescaler>
	adc_voltageReference(vref);
     128:	8d 2f       	mov	r24, r29
     12a:	0e 94 77 00 	call	0xee	; 0xee <adc_voltageReference>
	location ? (ADMUX |= (1<<ADLAR)) : (ADMUX &= ~(1<<ADLAR)); // If true location is left-justified and vice versa
     12e:	cc 23       	and	r28, r28
     130:	11 f0       	breq	.+4      	; 0x136 <adc_init+0x1c>
     132:	3d 9a       	sbi	0x07, 5	; 7
     134:	01 c0       	rjmp	.+2      	; 0x138 <adc_init+0x1e>
     136:	3d 98       	cbi	0x07, 5	; 7
	return;
}
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <adc_inputChannel>:
}
//****************************************************************************
//This function tells the ADC module to start conversion
void adc_inputChannel(unsigned char input_channel)
{
	ADMUX &= 0xC0; // clear MUX4:MUX0 and ADLAR bit for initialization
     13e:	97 b1       	in	r25, 0x07	; 7
     140:	90 7c       	andi	r25, 0xC0	; 192
     142:	97 b9       	out	0x07, r25	; 7
	
	switch(input_channel)
     144:	83 30       	cpi	r24, 0x03	; 3
     146:	b9 f0       	breq	.+46     	; 0x176 <adc_inputChannel+0x38>
     148:	84 30       	cpi	r24, 0x04	; 4
     14a:	28 f4       	brcc	.+10     	; 0x156 <adc_inputChannel+0x18>
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	79 f0       	breq	.+30     	; 0x16e <adc_inputChannel+0x30>
     150:	82 30       	cpi	r24, 0x02	; 2
     152:	78 f4       	brcc	.+30     	; 0x172 <adc_inputChannel+0x34>
     154:	09 c0       	rjmp	.+18     	; 0x168 <adc_inputChannel+0x2a>
     156:	85 30       	cpi	r24, 0x05	; 5
     158:	a1 f0       	breq	.+40     	; 0x182 <adc_inputChannel+0x44>
     15a:	85 30       	cpi	r24, 0x05	; 5
     15c:	80 f0       	brcs	.+32     	; 0x17e <adc_inputChannel+0x40>
     15e:	86 30       	cpi	r24, 0x06	; 6
     160:	a1 f0       	breq	.+40     	; 0x18a <adc_inputChannel+0x4c>
     162:	87 30       	cpi	r24, 0x07	; 7
     164:	d1 f4       	brne	.+52     	; 0x19a <adc_inputChannel+0x5c>
     166:	15 c0       	rjmp	.+42     	; 0x192 <adc_inputChannel+0x54>
	{
		case ADC0:
			ADMUX |= 0x00;
     168:	87 b1       	in	r24, 0x07	; 7
     16a:	87 b9       	out	0x07, r24	; 7
			break;
     16c:	08 95       	ret
		case ADC1:
			ADMUX |= (1<<MUX0);
     16e:	38 9a       	sbi	0x07, 0	; 7
			break;
     170:	08 95       	ret
		case ADC2:
			ADMUX |= (1<<MUX1);
     172:	39 9a       	sbi	0x07, 1	; 7
			break;
     174:	08 95       	ret
		case ADC3:
			ADMUX |= (1<<MUX0) | (1<<MUX1);
     176:	87 b1       	in	r24, 0x07	; 7
     178:	83 60       	ori	r24, 0x03	; 3
     17a:	87 b9       	out	0x07, r24	; 7
			break;
     17c:	08 95       	ret
		case ADC4:
			ADMUX |= (1<<MUX2);
     17e:	3a 9a       	sbi	0x07, 2	; 7
			break;
     180:	08 95       	ret
		case ADC5:
			ADMUX |= (1<<MUX0) | (1<<MUX2);
     182:	87 b1       	in	r24, 0x07	; 7
     184:	85 60       	ori	r24, 0x05	; 5
     186:	87 b9       	out	0x07, r24	; 7
			break;
     188:	08 95       	ret
		case ADC6:
			ADMUX |= (1<<MUX1) | (1<<MUX2);
     18a:	87 b1       	in	r24, 0x07	; 7
     18c:	86 60       	ori	r24, 0x06	; 6
     18e:	87 b9       	out	0x07, r24	; 7
			break;
     190:	08 95       	ret
		case ADC7:
			//ADMUX |= 0x07;
			ADMUX |= (1<<MUX0) | (1<<MUX1) | (1<<MUX2);
     192:	87 b1       	in	r24, 0x07	; 7
     194:	87 60       	ori	r24, 0x07	; 7
     196:	87 b9       	out	0x07, r24	; 7
			break;
     198:	08 95       	ret
		default:
			ADMUX |= (0x1F & input_channel);
     19a:	97 b1       	in	r25, 0x07	; 7
     19c:	8f 71       	andi	r24, 0x1F	; 31
     19e:	89 2b       	or	r24, r25
     1a0:	87 b9       	out	0x07, r24	; 7
     1a2:	08 95       	ret

000001a4 <adc_read>:
unsigned int adc_read(unsigned char input_channel)
{
	int analogReading = 0;
	unsigned char LSB;
	unsigned char MSB;
	adc_inputChannel(input_channel);
     1a4:	0e 94 9f 00 	call	0x13e	; 0x13e <adc_inputChannel>
	ADCSRA |= (1<<ADSC);    //start conversion
     1a8:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1<<ADIF)) == 0); //Wait until conversion is done
     1aa:	34 9b       	sbis	0x06, 4	; 6
     1ac:	fe cf       	rjmp	.-4      	; 0x1aa <adc_read+0x6>
	LSB = ADCL;
     1ae:	84 b1       	in	r24, 0x04	; 4
	MSB = ADCH;
     1b0:	95 b1       	in	r25, 0x05	; 5
	analogReading |= MSB;
	analogReading <<= 8;
     1b2:	39 2f       	mov	r19, r25
     1b4:	20 e0       	ldi	r18, 0x00	; 0
	analogReading |= LSB;
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	82 2b       	or	r24, r18
     1ba:	93 2b       	or	r25, r19
	return analogReading;	
}
     1bc:	08 95       	ret

000001be <DIO_pinmode>:

//This function sets the pin_number to either OUTPUT or INPUT

void DIO_pinmode(unsigned char port_char, unsigned char pin_number, unsigned char state)
{
	switch (port_char)
     1be:	84 34       	cpi	r24, 0x44	; 68
     1c0:	09 f4       	brne	.+2      	; 0x1c4 <DIO_pinmode+0x6>
     1c2:	b8 c0       	rjmp	.+368    	; 0x334 <DIO_pinmode+0x176>
     1c4:	85 34       	cpi	r24, 0x45	; 69
     1c6:	50 f4       	brcc	.+20     	; 0x1dc <DIO_pinmode+0x1e>
     1c8:	82 34       	cpi	r24, 0x42	; 66
     1ca:	09 f4       	brne	.+2      	; 0x1ce <DIO_pinmode+0x10>
     1cc:	4b c0       	rjmp	.+150    	; 0x264 <DIO_pinmode+0xa6>
     1ce:	83 34       	cpi	r24, 0x43	; 67
     1d0:	08 f0       	brcs	.+2      	; 0x1d4 <DIO_pinmode+0x16>
     1d2:	7c c0       	rjmp	.+248    	; 0x2cc <DIO_pinmode+0x10e>
     1d4:	81 34       	cpi	r24, 0x41	; 65
     1d6:	09 f0       	breq	.+2      	; 0x1da <DIO_pinmode+0x1c>
     1d8:	df c0       	rjmp	.+446    	; 0x398 <DIO_pinmode+0x1da>
     1da:	10 c0       	rjmp	.+32     	; 0x1fc <DIO_pinmode+0x3e>
     1dc:	82 36       	cpi	r24, 0x62	; 98
     1de:	09 f4       	brne	.+2      	; 0x1e2 <DIO_pinmode+0x24>
     1e0:	41 c0       	rjmp	.+130    	; 0x264 <DIO_pinmode+0xa6>
     1e2:	83 36       	cpi	r24, 0x63	; 99
     1e4:	20 f4       	brcc	.+8      	; 0x1ee <DIO_pinmode+0x30>
     1e6:	81 36       	cpi	r24, 0x61	; 97
     1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_pinmode+0x2e>
     1ea:	d6 c0       	rjmp	.+428    	; 0x398 <DIO_pinmode+0x1da>
     1ec:	07 c0       	rjmp	.+14     	; 0x1fc <DIO_pinmode+0x3e>
     1ee:	83 36       	cpi	r24, 0x63	; 99
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <DIO_pinmode+0x36>
     1f2:	6c c0       	rjmp	.+216    	; 0x2cc <DIO_pinmode+0x10e>
     1f4:	84 36       	cpi	r24, 0x64	; 100
     1f6:	09 f0       	breq	.+2      	; 0x1fa <DIO_pinmode+0x3c>
     1f8:	cf c0       	rjmp	.+414    	; 0x398 <DIO_pinmode+0x1da>
     1fa:	9c c0       	rjmp	.+312    	; 0x334 <DIO_pinmode+0x176>
	{
		case 'A':
		case 'a':
		if(state == INPUT)
     1fc:	44 23       	and	r20, r20
     1fe:	71 f4       	brne	.+28     	; 0x21c <DIO_pinmode+0x5e>
			DDRA &= ~(1 << pin_number);
     200:	2a b3       	in	r18, 0x1a	; 26
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	ac 01       	movw	r20, r24
     208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_pinmode+0x50>
     20a:	44 0f       	add	r20, r20
     20c:	55 1f       	adc	r21, r21
     20e:	6a 95       	dec	r22
     210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_pinmode+0x4c>
     212:	ba 01       	movw	r22, r20
     214:	60 95       	com	r22
     216:	62 23       	and	r22, r18
     218:	6a bb       	out	0x1a, r22	; 26
     21a:	08 95       	ret
		else if (state == INPUT_PULLUP)
     21c:	42 30       	cpi	r20, 0x02	; 2
     21e:	91 f4       	brne	.+36     	; 0x244 <DIO_pinmode+0x86>
		{
			DDRA &= ~(1 << pin_number);
     220:	2a b3       	in	r18, 0x1a	; 26
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	ac 01       	movw	r20, r24
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_pinmode+0x70>
     22a:	44 0f       	add	r20, r20
     22c:	55 1f       	adc	r21, r21
     22e:	6a 95       	dec	r22
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_pinmode+0x6c>
     232:	ba 01       	movw	r22, r20
     234:	84 2f       	mov	r24, r20
     236:	80 95       	com	r24
     238:	82 23       	and	r24, r18
     23a:	8a bb       	out	0x1a, r24	; 26
			PORTA |= (1 << pin_number);
     23c:	8b b3       	in	r24, 0x1b	; 27
     23e:	68 2b       	or	r22, r24
     240:	6b bb       	out	0x1b, r22	; 27
     242:	08 95       	ret
		}			
		else if (state == OUTPUT)
     244:	41 30       	cpi	r20, 0x01	; 1
     246:	09 f0       	breq	.+2      	; 0x24a <DIO_pinmode+0x8c>
     248:	a7 c0       	rjmp	.+334    	; 0x398 <DIO_pinmode+0x1da>
			DDRA |= (1 << pin_number);
     24a:	2a b3       	in	r18, 0x1a	; 26
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	ac 01       	movw	r20, r24
     252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_pinmode+0x9a>
     254:	44 0f       	add	r20, r20
     256:	55 1f       	adc	r21, r21
     258:	6a 95       	dec	r22
     25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_pinmode+0x96>
     25c:	ba 01       	movw	r22, r20
     25e:	62 2b       	or	r22, r18
     260:	6a bb       	out	0x1a, r22	; 26
     262:	08 95       	ret
		break;

		case 'B':
		case 'b':
		if(state == INPUT)
     264:	44 23       	and	r20, r20
     266:	71 f4       	brne	.+28     	; 0x284 <DIO_pinmode+0xc6>
			DDRB &= ~(1 << pin_number);
     268:	27 b3       	in	r18, 0x17	; 23
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	ac 01       	movw	r20, r24
     270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_pinmode+0xb8>
     272:	44 0f       	add	r20, r20
     274:	55 1f       	adc	r21, r21
     276:	6a 95       	dec	r22
     278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_pinmode+0xb4>
     27a:	ba 01       	movw	r22, r20
     27c:	60 95       	com	r22
     27e:	62 23       	and	r22, r18
     280:	67 bb       	out	0x17, r22	; 23
     282:	08 95       	ret
		else if (state == INPUT_PULLUP)
     284:	42 30       	cpi	r20, 0x02	; 2
     286:	91 f4       	brne	.+36     	; 0x2ac <DIO_pinmode+0xee>
		{
			DDRB &= ~(1 << pin_number);
     288:	27 b3       	in	r18, 0x17	; 23
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	ac 01       	movw	r20, r24
     290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_pinmode+0xd8>
     292:	44 0f       	add	r20, r20
     294:	55 1f       	adc	r21, r21
     296:	6a 95       	dec	r22
     298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_pinmode+0xd4>
     29a:	ba 01       	movw	r22, r20
     29c:	84 2f       	mov	r24, r20
     29e:	80 95       	com	r24
     2a0:	82 23       	and	r24, r18
     2a2:	87 bb       	out	0x17, r24	; 23
			PORTB |= (1 << pin_number);		
     2a4:	88 b3       	in	r24, 0x18	; 24
     2a6:	68 2b       	or	r22, r24
     2a8:	68 bb       	out	0x18, r22	; 24
     2aa:	08 95       	ret
		}				
		else if (state == OUTPUT)
     2ac:	41 30       	cpi	r20, 0x01	; 1
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <DIO_pinmode+0xf4>
     2b0:	73 c0       	rjmp	.+230    	; 0x398 <DIO_pinmode+0x1da>
			DDRB |= (1 << pin_number);		
     2b2:	27 b3       	in	r18, 0x17	; 23
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	ac 01       	movw	r20, r24
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_pinmode+0x102>
     2bc:	44 0f       	add	r20, r20
     2be:	55 1f       	adc	r21, r21
     2c0:	6a 95       	dec	r22
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_pinmode+0xfe>
     2c4:	ba 01       	movw	r22, r20
     2c6:	62 2b       	or	r22, r18
     2c8:	67 bb       	out	0x17, r22	; 23
     2ca:	08 95       	ret
		break;
		
		case 'C':
		case 'c':
		if(state == INPUT)
     2cc:	44 23       	and	r20, r20
     2ce:	71 f4       	brne	.+28     	; 0x2ec <DIO_pinmode+0x12e>
			DDRC &= ~(1 << pin_number);
     2d0:	24 b3       	in	r18, 0x14	; 20
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	ac 01       	movw	r20, r24
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_pinmode+0x120>
     2da:	44 0f       	add	r20, r20
     2dc:	55 1f       	adc	r21, r21
     2de:	6a 95       	dec	r22
     2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_pinmode+0x11c>
     2e2:	ba 01       	movw	r22, r20
     2e4:	60 95       	com	r22
     2e6:	62 23       	and	r22, r18
     2e8:	64 bb       	out	0x14, r22	; 20
     2ea:	08 95       	ret
		else if (state == INPUT_PULLUP)
     2ec:	42 30       	cpi	r20, 0x02	; 2
     2ee:	91 f4       	brne	.+36     	; 0x314 <DIO_pinmode+0x156>
		{
			DDRC &= ~(1 << pin_number);
     2f0:	24 b3       	in	r18, 0x14	; 20
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	ac 01       	movw	r20, r24
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_pinmode+0x140>
     2fa:	44 0f       	add	r20, r20
     2fc:	55 1f       	adc	r21, r21
     2fe:	6a 95       	dec	r22
     300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_pinmode+0x13c>
     302:	ba 01       	movw	r22, r20
     304:	84 2f       	mov	r24, r20
     306:	80 95       	com	r24
     308:	82 23       	and	r24, r18
     30a:	84 bb       	out	0x14, r24	; 20
			PORTC |= (1 << pin_number);
     30c:	85 b3       	in	r24, 0x15	; 21
     30e:	68 2b       	or	r22, r24
     310:	65 bb       	out	0x15, r22	; 21
     312:	08 95       	ret
		}			
		else if (state == OUTPUT)
     314:	41 30       	cpi	r20, 0x01	; 1
     316:	09 f0       	breq	.+2      	; 0x31a <DIO_pinmode+0x15c>
     318:	3f c0       	rjmp	.+126    	; 0x398 <DIO_pinmode+0x1da>
			DDRC |= (1 << pin_number);
     31a:	24 b3       	in	r18, 0x14	; 20
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	ac 01       	movw	r20, r24
     322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_pinmode+0x16a>
     324:	44 0f       	add	r20, r20
     326:	55 1f       	adc	r21, r21
     328:	6a 95       	dec	r22
     32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_pinmode+0x166>
     32c:	ba 01       	movw	r22, r20
     32e:	62 2b       	or	r22, r18
     330:	64 bb       	out	0x14, r22	; 20
     332:	08 95       	ret
		break;
		
		case 'D':
		case 'd':
		if(state == INPUT)
     334:	44 23       	and	r20, r20
     336:	71 f4       	brne	.+28     	; 0x354 <DIO_pinmode+0x196>
			DDRD &= ~(1 << pin_number);
     338:	21 b3       	in	r18, 0x11	; 17
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	ac 01       	movw	r20, r24
     340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_pinmode+0x188>
     342:	44 0f       	add	r20, r20
     344:	55 1f       	adc	r21, r21
     346:	6a 95       	dec	r22
     348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_pinmode+0x184>
     34a:	ba 01       	movw	r22, r20
     34c:	60 95       	com	r22
     34e:	62 23       	and	r22, r18
     350:	61 bb       	out	0x11, r22	; 17
     352:	08 95       	ret
		else if (state == INPUT_PULLUP)
     354:	42 30       	cpi	r20, 0x02	; 2
     356:	91 f4       	brne	.+36     	; 0x37c <DIO_pinmode+0x1be>
		{
			DDRD &= ~(1 << pin_number);
     358:	21 b3       	in	r18, 0x11	; 17
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	ac 01       	movw	r20, r24
     360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_pinmode+0x1a8>
     362:	44 0f       	add	r20, r20
     364:	55 1f       	adc	r21, r21
     366:	6a 95       	dec	r22
     368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_pinmode+0x1a4>
     36a:	ba 01       	movw	r22, r20
     36c:	84 2f       	mov	r24, r20
     36e:	80 95       	com	r24
     370:	82 23       	and	r24, r18
     372:	81 bb       	out	0x11, r24	; 17
			PORTD |= (1 << pin_number);			
     374:	82 b3       	in	r24, 0x12	; 18
     376:	68 2b       	or	r22, r24
     378:	62 bb       	out	0x12, r22	; 18
     37a:	08 95       	ret
		}			
		else if (state == OUTPUT)
     37c:	41 30       	cpi	r20, 0x01	; 1
     37e:	61 f4       	brne	.+24     	; 0x398 <DIO_pinmode+0x1da>
			DDRD |= (1 << pin_number);
     380:	21 b3       	in	r18, 0x11	; 17
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	ac 01       	movw	r20, r24
     388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_pinmode+0x1d0>
     38a:	44 0f       	add	r20, r20
     38c:	55 1f       	adc	r21, r21
     38e:	6a 95       	dec	r22
     390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_pinmode+0x1cc>
     392:	ba 01       	movw	r22, r20
     394:	62 2b       	or	r22, r18
     396:	61 bb       	out	0x11, r22	; 17
     398:	08 95       	ret

0000039a <DIO_write>:

//This function writes on pin number either HIGH or LOW

void DIO_write(unsigned char port_char, unsigned char pin_number, unsigned char logic_level)
{
		switch (port_char)
     39a:	84 34       	cpi	r24, 0x44	; 68
     39c:	09 f4       	brne	.+2      	; 0x3a0 <DIO_write+0x6>
     39e:	79 c0       	rjmp	.+242    	; 0x492 <DIO_write+0xf8>
     3a0:	85 34       	cpi	r24, 0x45	; 69
     3a2:	48 f4       	brcc	.+18     	; 0x3b6 <DIO_write+0x1c>
     3a4:	82 34       	cpi	r24, 0x42	; 66
     3a6:	b1 f1       	breq	.+108    	; 0x414 <DIO_write+0x7a>
     3a8:	83 34       	cpi	r24, 0x43	; 67
     3aa:	08 f0       	brcs	.+2      	; 0x3ae <DIO_write+0x14>
     3ac:	53 c0       	rjmp	.+166    	; 0x454 <DIO_write+0xba>
     3ae:	81 34       	cpi	r24, 0x41	; 65
     3b0:	09 f0       	breq	.+2      	; 0x3b4 <DIO_write+0x1a>
     3b2:	8d c0       	rjmp	.+282    	; 0x4ce <DIO_write+0x134>
     3b4:	0f c0       	rjmp	.+30     	; 0x3d4 <DIO_write+0x3a>
     3b6:	82 36       	cpi	r24, 0x62	; 98
     3b8:	69 f1       	breq	.+90     	; 0x414 <DIO_write+0x7a>
     3ba:	83 36       	cpi	r24, 0x63	; 99
     3bc:	20 f4       	brcc	.+8      	; 0x3c6 <DIO_write+0x2c>
     3be:	81 36       	cpi	r24, 0x61	; 97
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <DIO_write+0x2a>
     3c2:	85 c0       	rjmp	.+266    	; 0x4ce <DIO_write+0x134>
     3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <DIO_write+0x3a>
     3c6:	83 36       	cpi	r24, 0x63	; 99
     3c8:	09 f4       	brne	.+2      	; 0x3cc <DIO_write+0x32>
     3ca:	44 c0       	rjmp	.+136    	; 0x454 <DIO_write+0xba>
     3cc:	84 36       	cpi	r24, 0x64	; 100
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <DIO_write+0x38>
     3d0:	7e c0       	rjmp	.+252    	; 0x4ce <DIO_write+0x134>
     3d2:	5f c0       	rjmp	.+190    	; 0x492 <DIO_write+0xf8>
		{
			case 'A':
			case 'a':
			if(logic_level == LOW)
     3d4:	44 23       	and	r20, r20
     3d6:	71 f4       	brne	.+28     	; 0x3f4 <DIO_write+0x5a>
				PORTA &= ~(1 << pin_number);
     3d8:	2b b3       	in	r18, 0x1b	; 27
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	ac 01       	movw	r20, r24
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_write+0x4c>
     3e2:	44 0f       	add	r20, r20
     3e4:	55 1f       	adc	r21, r21
     3e6:	6a 95       	dec	r22
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_write+0x48>
     3ea:	ba 01       	movw	r22, r20
     3ec:	60 95       	com	r22
     3ee:	62 23       	and	r22, r18
     3f0:	6b bb       	out	0x1b, r22	; 27
     3f2:	08 95       	ret
			else if (logic_level == HIGH)
     3f4:	41 30       	cpi	r20, 0x01	; 1
     3f6:	09 f0       	breq	.+2      	; 0x3fa <DIO_write+0x60>
     3f8:	6a c0       	rjmp	.+212    	; 0x4ce <DIO_write+0x134>
				PORTA |= (1 << pin_number);
     3fa:	2b b3       	in	r18, 0x1b	; 27
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	ac 01       	movw	r20, r24
     402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_write+0x6e>
     404:	44 0f       	add	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6a 95       	dec	r22
     40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_write+0x6a>
     40c:	ba 01       	movw	r22, r20
     40e:	62 2b       	or	r22, r18
     410:	6b bb       	out	0x1b, r22	; 27
     412:	08 95       	ret
			break;

			case 'B':
			case 'b':
			if(logic_level == LOW)
     414:	44 23       	and	r20, r20
     416:	71 f4       	brne	.+28     	; 0x434 <DIO_write+0x9a>
				PORTB &= ~(1 << pin_number);
     418:	28 b3       	in	r18, 0x18	; 24
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	ac 01       	movw	r20, r24
     420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_write+0x8c>
     422:	44 0f       	add	r20, r20
     424:	55 1f       	adc	r21, r21
     426:	6a 95       	dec	r22
     428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_write+0x88>
     42a:	ba 01       	movw	r22, r20
     42c:	60 95       	com	r22
     42e:	62 23       	and	r22, r18
     430:	68 bb       	out	0x18, r22	; 24
     432:	08 95       	ret
			else if (logic_level == HIGH)
     434:	41 30       	cpi	r20, 0x01	; 1
     436:	09 f0       	breq	.+2      	; 0x43a <DIO_write+0xa0>
     438:	4a c0       	rjmp	.+148    	; 0x4ce <DIO_write+0x134>
				PORTB |= (1 << pin_number);
     43a:	28 b3       	in	r18, 0x18	; 24
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	ac 01       	movw	r20, r24
     442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_write+0xae>
     444:	44 0f       	add	r20, r20
     446:	55 1f       	adc	r21, r21
     448:	6a 95       	dec	r22
     44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_write+0xaa>
     44c:	ba 01       	movw	r22, r20
     44e:	62 2b       	or	r22, r18
     450:	68 bb       	out	0x18, r22	; 24
     452:	08 95       	ret
			break;

			case 'C':
			case 'c':
			if(logic_level == LOW)
     454:	44 23       	and	r20, r20
     456:	71 f4       	brne	.+28     	; 0x474 <DIO_write+0xda>
				PORTC &= ~(1 << pin_number);
     458:	25 b3       	in	r18, 0x15	; 21
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	ac 01       	movw	r20, r24
     460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_write+0xcc>
     462:	44 0f       	add	r20, r20
     464:	55 1f       	adc	r21, r21
     466:	6a 95       	dec	r22
     468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_write+0xc8>
     46a:	ba 01       	movw	r22, r20
     46c:	60 95       	com	r22
     46e:	62 23       	and	r22, r18
     470:	65 bb       	out	0x15, r22	; 21
     472:	08 95       	ret
			else if (logic_level == HIGH)
     474:	41 30       	cpi	r20, 0x01	; 1
     476:	59 f5       	brne	.+86     	; 0x4ce <DIO_write+0x134>
				PORTC |= (1 << pin_number);
     478:	25 b3       	in	r18, 0x15	; 21
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	ac 01       	movw	r20, r24
     480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_write+0xec>
     482:	44 0f       	add	r20, r20
     484:	55 1f       	adc	r21, r21
     486:	6a 95       	dec	r22
     488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_write+0xe8>
     48a:	ba 01       	movw	r22, r20
     48c:	62 2b       	or	r22, r18
     48e:	65 bb       	out	0x15, r22	; 21
     490:	08 95       	ret
			break;
			
			case 'D':
			case 'd':
			if(logic_level == LOW)
     492:	44 23       	and	r20, r20
     494:	71 f4       	brne	.+28     	; 0x4b2 <DIO_write+0x118>
				PORTD &= ~(1 << pin_number);
     496:	22 b3       	in	r18, 0x12	; 18
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	ac 01       	movw	r20, r24
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_write+0x10a>
     4a0:	44 0f       	add	r20, r20
     4a2:	55 1f       	adc	r21, r21
     4a4:	6a 95       	dec	r22
     4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_write+0x106>
     4a8:	ba 01       	movw	r22, r20
     4aa:	60 95       	com	r22
     4ac:	62 23       	and	r22, r18
     4ae:	62 bb       	out	0x12, r22	; 18
     4b0:	08 95       	ret
			else if (logic_level == HIGH)
     4b2:	41 30       	cpi	r20, 0x01	; 1
     4b4:	61 f4       	brne	.+24     	; 0x4ce <DIO_write+0x134>
				PORTD |= (1 << pin_number);
     4b6:	22 b3       	in	r18, 0x12	; 18
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	ac 01       	movw	r20, r24
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_write+0x12a>
     4c0:	44 0f       	add	r20, r20
     4c2:	55 1f       	adc	r21, r21
     4c4:	6a 95       	dec	r22
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_write+0x126>
     4c8:	ba 01       	movw	r22, r20
     4ca:	62 2b       	or	r22, r18
     4cc:	62 bb       	out	0x12, r22	; 18
     4ce:	08 95       	ret

000004d0 <eeprom_write>:
#include <avr/io.h>
#include "EEPROM.h"

void eeprom_write(unsigned int address, unsigned char data)
{
	while((EECR & (1 << EEWE)) == 1);			//Wait for EEWE = 0, Which means that EEPROM is ready for read or write
     4d0:	2c b3       	in	r18, 0x1c	; 28
	EEAR = address;							//Put the address in which you want to put the byte
     4d2:	9f bb       	out	0x1f, r25	; 31
     4d4:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;							//Put the desired byte
     4d6:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1 << EEMWE);					//Set EEMWE to 1
     4d8:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1 << EEWE);					//Set EEWE to 1 within 4 clock cycles (EEMWE will be cleared after 4 clock cycles)
     4da:	e1 9a       	sbi	0x1c, 1	; 28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4dc:	87 ea       	ldi	r24, 0xA7	; 167
     4de:	91 e6       	ldi	r25, 0x61	; 97
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <eeprom_write+0x10>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <eeprom_write+0x16>
     4e6:	00 00       	nop
	_delay_ms(100);
}
     4e8:	08 95       	ret

000004ea <eeprom_read>:

unsigned char eeprom_read(unsigned char address)
{
	while((EECR & (1 << EEWE)) == 1);			//Wait for EEWE = 0, Which means that EEPROM is ready for read or write
     4ea:	9c b3       	in	r25, 0x1c	; 28
	EEAR = address;							//Put the address of byte you want to read
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	9f bb       	out	0x1f, r25	; 31
     4f0:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1 << EERE);					//Set EERE to 1
     4f2:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;							//Return the desired byte
     4f4:	8d b3       	in	r24, 0x1d	; 29
     4f6:	08 95       	ret

000004f8 <set_externalInterrupt>:
#include <avr/io.h>
#include "external_interrupts.h"

void set_externalInterrupt(unsigned char interrupt_num, unsigned char state)
{
	switch(interrupt_num)
     4f8:	86 30       	cpi	r24, 0x06	; 6
     4fa:	31 f0       	breq	.+12     	; 0x508 <set_externalInterrupt+0x10>
     4fc:	87 30       	cpi	r24, 0x07	; 7
     4fe:	e9 f0       	breq	.+58     	; 0x53a <set_externalInterrupt+0x42>
     500:	85 30       	cpi	r24, 0x05	; 5
     502:	09 f0       	breq	.+2      	; 0x506 <set_externalInterrupt+0xe>
     504:	41 c0       	rjmp	.+130    	; 0x588 <set_externalInterrupt+0x90>
     506:	32 c0       	rjmp	.+100    	; 0x56c <set_externalInterrupt+0x74>
	{
		case INT0:
			if (state == LOW_LEVEL)
     508:	66 23       	and	r22, r22
     50a:	11 f4       	brne	.+4      	; 0x510 <set_externalInterrupt+0x18>
				MCUCR = 0x00;
     50c:	15 be       	out	0x35, r1	; 53
     50e:	11 c0       	rjmp	.+34     	; 0x532 <set_externalInterrupt+0x3a>
			else if (state == CHANGE)
     510:	61 30       	cpi	r22, 0x01	; 1
     512:	21 f4       	brne	.+8      	; 0x51c <set_externalInterrupt+0x24>
				MCUCR |= (1 << ISC00);
     514:	85 b7       	in	r24, 0x35	; 53
     516:	81 60       	ori	r24, 0x01	; 1
     518:	85 bf       	out	0x35, r24	; 53
     51a:	0b c0       	rjmp	.+22     	; 0x532 <set_externalInterrupt+0x3a>
			else if (state == FALLING_EDGE)
     51c:	63 30       	cpi	r22, 0x03	; 3
     51e:	21 f4       	brne	.+8      	; 0x528 <set_externalInterrupt+0x30>
				MCUCR |= (1 << ISC01);
     520:	85 b7       	in	r24, 0x35	; 53
     522:	82 60       	ori	r24, 0x02	; 2
     524:	85 bf       	out	0x35, r24	; 53
     526:	05 c0       	rjmp	.+10     	; 0x532 <set_externalInterrupt+0x3a>
			else if (state == RISING_EDGE)	
     528:	62 30       	cpi	r22, 0x02	; 2
     52a:	19 f4       	brne	.+6      	; 0x532 <set_externalInterrupt+0x3a>
				MCUCR |= ((1 << ISC00) | (1 << ISC01));	
     52c:	85 b7       	in	r24, 0x35	; 53
     52e:	83 60       	ori	r24, 0x03	; 3
     530:	85 bf       	out	0x35, r24	; 53
			GICR |= (1 << INT0);
     532:	8b b7       	in	r24, 0x3b	; 59
     534:	80 64       	ori	r24, 0x40	; 64
     536:	8b bf       	out	0x3b, r24	; 59
		break;
     538:	08 95       	ret
		
		case INT1:
			if (state == LOW_LEVEL)
     53a:	66 23       	and	r22, r22
     53c:	11 f4       	brne	.+4      	; 0x542 <set_externalInterrupt+0x4a>
				MCUCR = 0x00;
     53e:	15 be       	out	0x35, r1	; 53
     540:	11 c0       	rjmp	.+34     	; 0x564 <set_externalInterrupt+0x6c>
			else if (state == CHANGE)
     542:	61 30       	cpi	r22, 0x01	; 1
     544:	21 f4       	brne	.+8      	; 0x54e <set_externalInterrupt+0x56>
				MCUCR |= (1 << ISC10);
     546:	85 b7       	in	r24, 0x35	; 53
     548:	84 60       	ori	r24, 0x04	; 4
     54a:	85 bf       	out	0x35, r24	; 53
     54c:	0b c0       	rjmp	.+22     	; 0x564 <set_externalInterrupt+0x6c>
			else if (state == FALLING_EDGE)
     54e:	63 30       	cpi	r22, 0x03	; 3
     550:	21 f4       	brne	.+8      	; 0x55a <set_externalInterrupt+0x62>
				MCUCR |= (1 << ISC11);
     552:	85 b7       	in	r24, 0x35	; 53
     554:	88 60       	ori	r24, 0x08	; 8
     556:	85 bf       	out	0x35, r24	; 53
     558:	05 c0       	rjmp	.+10     	; 0x564 <set_externalInterrupt+0x6c>
			else if (state == RISING_EDGE)
     55a:	62 30       	cpi	r22, 0x02	; 2
     55c:	19 f4       	brne	.+6      	; 0x564 <set_externalInterrupt+0x6c>
				MCUCR |= (1 << ISC10) | (1 << ISC11);
     55e:	85 b7       	in	r24, 0x35	; 53
     560:	8c 60       	ori	r24, 0x0C	; 12
     562:	85 bf       	out	0x35, r24	; 53
			GICR |= (1 << INT1);
     564:	8b b7       	in	r24, 0x3b	; 59
     566:	80 68       	ori	r24, 0x80	; 128
     568:	8b bf       	out	0x3b, r24	; 59
		break;
     56a:	08 95       	ret
		
		case INT2:
			if (state == FALLING_EDGE)
     56c:	63 30       	cpi	r22, 0x03	; 3
     56e:	21 f4       	brne	.+8      	; 0x578 <set_externalInterrupt+0x80>
				MCUCR &= ~(1 << ISC2);
     570:	85 b7       	in	r24, 0x35	; 53
     572:	8f 7b       	andi	r24, 0xBF	; 191
     574:	85 bf       	out	0x35, r24	; 53
     576:	05 c0       	rjmp	.+10     	; 0x582 <set_externalInterrupt+0x8a>
			else if (state == RISING_EDGE)
     578:	62 30       	cpi	r22, 0x02	; 2
     57a:	19 f4       	brne	.+6      	; 0x582 <set_externalInterrupt+0x8a>
				MCUCR |= (1 << ISC2);
     57c:	85 b7       	in	r24, 0x35	; 53
     57e:	80 64       	ori	r24, 0x40	; 64
     580:	85 bf       	out	0x35, r24	; 53
			GICR |= (1 << INT2);
     582:	8b b7       	in	r24, 0x3b	; 59
     584:	80 62       	ori	r24, 0x20	; 32
     586:	8b bf       	out	0x3b, r24	; 59
     588:	08 95       	ret

0000058a <get_key>:

extern unsigned char get_key (void)
{
  unsigned char colloc, rowloc;
  
  KEY_DDR = 0xF0;                                                               //Columns bits are output and Rows' bits are input
     58a:	80 ef       	ldi	r24, 0xF0	; 240
     58c:	84 bb       	out	0x14, r24	; 20
  KEY_PRT = 0xFF;  
     58e:	8f ef       	ldi	r24, 0xFF	; 255
     590:	85 bb       	out	0x15, r24	; 21
  KEY_PIN = 0x0F;
     592:	8f e0       	ldi	r24, 0x0F	; 15
     594:	83 bb       	out	0x13, r24	; 19
  
      do
          {
              KEY_PRT &= 0x0F;                                                  //ground all rows at once
     596:	85 b3       	in	r24, 0x15	; 21
     598:	8f 70       	andi	r24, 0x0F	; 15
     59a:	85 bb       	out	0x15, r24	; 21
              colloc = (KEY_PIN & 0x0F);                                        //read the columns
     59c:	83 b3       	in	r24, 0x13	; 19
     59e:	8f 70       	andi	r24, 0x0F	; 15
          } while(colloc != 0x0F);                                              //check untill all keys are released
     5a0:	8f 30       	cpi	r24, 0x0F	; 15
     5a2:	c9 f7       	brne	.-14     	; 0x596 <get_key+0xc>
     5a4:	87 e8       	ldi	r24, 0x87	; 135
     5a6:	93 e1       	ldi	r25, 0x13	; 19
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <get_key+0x1e>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <get_key+0x24>
     5ae:	00 00       	nop
      do
        { 
            do
              {
                  _delay_ms(20);                                        //Delay to allow the user to enter the required Key
                  colloc = (KEY_PIN & 0x0F);                                    //read the columns
     5b0:	83 b3       	in	r24, 0x13	; 19
     5b2:	8f 70       	andi	r24, 0x0F	; 15
              } while(colloc != 0x0F);                                          //wait for key press
     5b4:	8f 30       	cpi	r24, 0x0F	; 15
     5b6:	b1 f7       	brne	.-20     	; 0x5a4 <get_key+0x1a>
     5b8:	87 e8       	ldi	r24, 0x87	; 135
     5ba:	93 e1       	ldi	r25, 0x13	; 19
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <get_key+0x32>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <get_key+0x38>
     5c2:	00 00       	nop
          
            _delay_ms(20);                                              //Delay for debounce
            colloc = (KEY_PIN & 0x0F);                                          //read the columns
     5c4:	83 b3       	in	r24, 0x13	; 19
     5c6:	8f 70       	andi	r24, 0x0F	; 15
        } while(colloc != 0x0F);                                                //wait for key press
     5c8:	8f 30       	cpi	r24, 0x0F	; 15
     5ca:	61 f7       	brne	.-40     	; 0x5a4 <get_key+0x1a>
      
      while(1)
      {
        KEY_PRT = 0xEF;                                                         //ground row 0
     5cc:	9f ee       	ldi	r25, 0xEF	; 239
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 0;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xDF;                                                         //ground row 1
     5ce:	2f ed       	ldi	r18, 0xDF	; 223
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 1;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xBF;                                                         //ground row 2
     5d0:	3f eb       	ldi	r19, 0xBF	; 191
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 2;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0x7F;                                                         //ground row 3
     5d2:	4f e7       	ldi	r20, 0x7F	; 127
            colloc = (KEY_PIN & 0x0F);                                          //read the columns
        } while(colloc != 0x0F);                                                //wait for key press
      
      while(1)
      {
        KEY_PRT = 0xEF;                                                         //ground row 0
     5d4:	95 bb       	out	0x15, r25	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
     5d6:	83 b3       	in	r24, 0x13	; 19
     5d8:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
     5da:	8f 30       	cpi	r24, 0x0F	; 15
     5dc:	89 f4       	brne	.+34     	; 0x600 <get_key+0x76>
        {
          rowloc = 0;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xDF;                                                         //ground row 1
     5de:	25 bb       	out	0x15, r18	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
     5e0:	83 b3       	in	r24, 0x13	; 19
     5e2:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
     5e4:	8f 30       	cpi	r24, 0x0F	; 15
     5e6:	71 f4       	brne	.+28     	; 0x604 <get_key+0x7a>
        {
          rowloc = 1;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xBF;                                                         //ground row 2
     5e8:	35 bb       	out	0x15, r19	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
     5ea:	83 b3       	in	r24, 0x13	; 19
     5ec:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
     5ee:	8f 30       	cpi	r24, 0x0F	; 15
     5f0:	59 f4       	brne	.+22     	; 0x608 <get_key+0x7e>
        {
          rowloc = 2;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0x7F;                                                         //ground row 3
     5f2:	45 bb       	out	0x15, r20	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
     5f4:	83 b3       	in	r24, 0x13	; 19
     5f6:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
     5f8:	8f 30       	cpi	r24, 0x0F	; 15
     5fa:	61 f3       	breq	.-40     	; 0x5d4 <get_key+0x4a>
        {
          rowloc = 3;                                                           //save row location 
     5fc:	e3 e0       	ldi	r30, 0x03	; 3
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <get_key+0x80>
      {
        KEY_PRT = 0xEF;                                                         //ground row 0
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 0;                                                           //save row location 
     600:	e0 e0       	ldi	r30, 0x00	; 0
     602:	03 c0       	rjmp	.+6      	; 0x60a <get_key+0x80>
        }
        KEY_PRT = 0xDF;                                                         //ground row 1
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 1;                                                           //save row location 
     604:	e1 e0       	ldi	r30, 0x01	; 1
     606:	01 c0       	rjmp	.+2      	; 0x60a <get_key+0x80>
        }
        KEY_PRT = 0xBF;                                                         //ground row 2
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 2;                                                           //save row location 
     608:	e2 e0       	ldi	r30, 0x02	; 2
        }
      }
      
      
     //check column and save result in key
      if(colloc == 0x0E)
     60a:	8e 30       	cpi	r24, 0x0E	; 14
     60c:	49 f4       	brne	.+18     	; 0x620 <get_key+0x96>
        return (keypad[rowloc][0]);
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	ee 0f       	add	r30, r30
     612:	ff 1f       	adc	r31, r31
     614:	ee 0f       	add	r30, r30
     616:	ff 1f       	adc	r31, r31
     618:	e0 5a       	subi	r30, 0xA0	; 160
     61a:	ff 4f       	sbci	r31, 0xFF	; 255
     61c:	80 81       	ld	r24, Z
     61e:	08 95       	ret
      else if(colloc == 0x0D)
     620:	8d 30       	cpi	r24, 0x0D	; 13
     622:	49 f4       	brne	.+18     	; 0x636 <get_key+0xac>
        return (keypad[rowloc][1]);
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	ee 0f       	add	r30, r30
     62c:	ff 1f       	adc	r31, r31
     62e:	e0 5a       	subi	r30, 0xA0	; 160
     630:	ff 4f       	sbci	r31, 0xFF	; 255
     632:	81 81       	ldd	r24, Z+1	; 0x01
     634:	08 95       	ret
      else if(colloc == 0x0B)
     636:	8b 30       	cpi	r24, 0x0B	; 11
     638:	49 f4       	brne	.+18     	; 0x64c <get_key+0xc2>
        return (keypad[rowloc][2]);
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	e0 5a       	subi	r30, 0xA0	; 160
     646:	ff 4f       	sbci	r31, 0xFF	; 255
     648:	82 81       	ldd	r24, Z+2	; 0x02
     64a:	08 95       	ret
      else 
        return (keypad[rowloc][3]);  
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	ee 0f       	add	r30, r30
     650:	ff 1f       	adc	r31, r31
     652:	ee 0f       	add	r30, r30
     654:	ff 1f       	adc	r31, r31
     656:	e0 5a       	subi	r30, 0xA0	; 160
     658:	ff 4f       	sbci	r31, 0xFF	; 255
     65a:	83 81       	ldd	r24, Z+3	; 0x03
}  
     65c:	08 95       	ret

0000065e <delay_us>:
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     65e:	00 97       	sbiw	r24, 0x00	; 0
     660:	19 f0       	breq	.+6      	; 0x668 <delay_us+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     662:	00 00       	nop
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	e9 f7       	brne	.-6      	; 0x662 <delay_us+0x4>
     668:	08 95       	ret

0000066a <delay_ms>:
	}
}
//*******************************************************************************
void delay_ms(int d)
{
	while(d--)
     66a:	00 97       	sbiw	r24, 0x00	; 0
     66c:	41 f0       	breq	.+16     	; 0x67e <delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     66e:	e9 ef       	ldi	r30, 0xF9	; 249
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	31 97       	sbiw	r30, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <delay_ms+0x8>
     676:	00 c0       	rjmp	.+0      	; 0x678 <delay_ms+0xe>
     678:	00 00       	nop
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	c1 f7       	brne	.-16     	; 0x66e <delay_ms+0x4>
     67e:	08 95       	ret

00000680 <lcdCommand>:
	lcdCommand(LCD_ENTRY_INC_);									//shift && cursor right
	delay_us(100);                                                     //wait
}
//******************************************************************************
void lcdCommand(unsigned char cmnd)
{
     680:	cf 93       	push	r28
     682:	c8 2f       	mov	r28, r24
	LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);                             //taking high nibble of cmnd
     684:	8b b3       	in	r24, 0x1b	; 27
     686:	9c 2f       	mov	r25, r28
     688:	90 7f       	andi	r25, 0xF0	; 240
     68a:	8f 70       	andi	r24, 0x0F	; 15
     68c:	89 2b       	or	r24, r25
     68e:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT &= ~(1<<LCD_RS);	       		                        //RS = 0 for command (IR Register)
     690:	d8 98       	cbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);			                        //RW = 0 for Write
     692:	d9 98       	cbi	0x1b, 1	; 27
 	LCD_PRT |= (1<<LCD_EN);			                                //EN = 1 for H-to-L			                                //wait to make EN wider (min 450 ns)
     694:	da 9a       	sbi	0x1b, 2	; 27
	delay_us(1);
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L	
     69e:	da 98       	cbi	0x1b, 2	; 27
        
	delay_us(20);                                                     //Wait some time
     6a0:	84 e1       	ldi	r24, 0x14	; 20
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
        
	LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);                               //taking low nibble of cmnd
     6a8:	8b b3       	in	r24, 0x1b	; 27
     6aa:	c2 95       	swap	r28
     6ac:	c0 7f       	andi	r28, 0xF0	; 240
     6ae:	8f 70       	andi	r24, 0x0F	; 15
     6b0:	c8 2b       	or	r28, r24
     6b2:	cb bb       	out	0x1b, r28	; 27
	LCD_PRT |= (1<<LCD_EN);			                                //EN = 1 for H-to-L
     6b4:	da 9a       	sbi	0x1b, 2	; 27
	delay_us(1);			                                //wait to make enable wider (min 450 ns)
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
     6be:	da 98       	cbi	0x1b, 2	; 27
}
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <lcd_init>:
}
//******************************************************************************
void lcd_init(void)
{       
    //lcd_reset();
	LCD_DDR = 0xFF;
     6c4:	8f ef       	ldi	r24, 0xFF	; 255
     6c6:	8a bb       	out	0x1a, r24	; 26
	delay_us(2000);
     6c8:	80 ed       	ldi	r24, 0xD0	; 208
     6ca:	97 e0       	ldi	r25, 0x07	; 7
     6cc:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
    /* Function set */
    lcdCommand(0x33);							   //$28 for 4-bit mode
     6d0:	83 e3       	ldi	r24, 0x33	; 51
     6d2:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);                                                     //wait
     6d6:	84 e6       	ldi	r24, 0x64	; 100
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
        
    /* Display ON/OFF Control */
	lcdCommand(0x32);                               //display on, cursor on, blinking
     6de:	82 e3       	ldi	r24, 0x32	; 50
     6e0:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);														//wait
     6e4:	84 e6       	ldi	r24, 0x64	; 100
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
        
   
	lcdCommand(LCD_FUNCTION_4BIT_2LINES);
     6ec:	88 e2       	ldi	r24, 0x28	; 40
     6ee:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);					                        //clear LCD
     6f2:	84 e6       	ldi	r24, 0x64	; 100
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	
	lcdCommand(LCD_DISP_ON);
     6fa:	8c e0       	ldi	r24, 0x0C	; 12
     6fc:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);
     700:	84 e6       	ldi	r24, 0x64	; 100
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	
	lcdCommand(CLEAR_DISPLAY);
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(2000);														//wait
     70e:	80 ed       	ldi	r24, 0xD0	; 208
     710:	97 e0       	ldi	r25, 0x07	; 7
     712:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
        
    /* Entry mode set */
	lcdCommand(LCD_ENTRY_INC_);									//shift && cursor right
     716:	86 e0       	ldi	r24, 0x06	; 6
     718:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);                                                     //wait
     71c:	84 e6       	ldi	r24, 0x64	; 100
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
}
     724:	08 95       	ret

00000726 <lcd_reset>:
	}
}
//******************************************************************************
void lcd_reset(void)
{
	LCD_DDR = 0xFF;					                        //LCD port is output
     726:	8f ef       	ldi	r24, 0xFF	; 255
     728:	8a bb       	out	0x1a, r24	; 26
	LCD_PRT &= ~(1<<LCD_EN);			                    //LCD_EN = 0
     72a:	da 98       	cbi	0x1b, 2	; 27
	delay_us(20000);				                        //wait for stable power (more than 15 ms)
     72c:	80 e2       	ldi	r24, 0x20	; 32
     72e:	9e e4       	ldi	r25, 0x4E	; 78
     730:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	lcdCommand(0x03);				                        //$30 for reset
     734:	83 e0       	ldi	r24, 0x03	; 3
     736:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(10000);				                        //wait for more than (4.1 ms)
     73a:	80 e1       	ldi	r24, 0x10	; 16
     73c:	97 e2       	ldi	r25, 0x27	; 39
     73e:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
    lcdCommand(0x03);										//$30 for reset
     742:	83 e0       	ldi	r24, 0x03	; 3
     744:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(1000);											//wait (for more than (100 us)
     748:	88 ee       	ldi	r24, 0xE8	; 232
     74a:	93 e0       	ldi	r25, 0x03	; 3
     74c:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
    lcdCommand(0x03);										//$30 for reset
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(1000);                                         //wait (for more than 100 us)
     756:	88 ee       	ldi	r24, 0xE8	; 232
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
    lcdCommand(0x02);										//$20 for reset
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(1000);                                         //wait (for more than 100 us)
     764:	88 ee       	ldi	r24, 0xE8	; 232
     766:	93 e0       	ldi	r25, 0x03	; 3
     768:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
}
     76c:	08 95       	ret

0000076e <lcdData>:
	delay_us(1);			                                //wait to make enable wider (min 450 ns)
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
}
//******************************************************************************
void lcdData (unsigned char data)
{
     76e:	cf 93       	push	r28
     770:	c8 2f       	mov	r28, r24
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);	                        //taking high nibble of data
     772:	8b b3       	in	r24, 0x1b	; 27
     774:	9c 2f       	mov	r25, r28
     776:	90 7f       	andi	r25, 0xF0	; 240
     778:	8f 70       	andi	r24, 0x0F	; 15
     77a:	89 2b       	or	r24, r25
     77c:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT |= (1<<LCD_RS);												//RS = 1 for data (DR Register)
     77e:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);											//RW = 0 for Write
     780:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PRT |= (1<<LCD_EN);												//EN = 1 for H-to-L
     782:	da 9a       	sbi	0x1b, 2	; 27
																		 
	delay_us(1);														//wait to make enable wider (min 450 ns)
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	
	LCD_PRT &= ~(1<<LCD_EN);											//EN = 0 for H-to-L    
     78c:	da 98       	cbi	0x1b, 2	; 27
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);                           //taking low nibble of data
     78e:	8b b3       	in	r24, 0x1b	; 27
     790:	c2 95       	swap	r28
     792:	c0 7f       	andi	r28, 0xF0	; 240
     794:	8f 70       	andi	r24, 0x0F	; 15
     796:	c8 2b       	or	r28, r24
     798:	cb bb       	out	0x1b, r28	; 27
	LCD_PRT |= (1<<LCD_EN);						                        //EN = 1 for H-to-L
     79a:	da 9a       	sbi	0x1b, 2	; 27
	delay_us(1);							                            //wait to make enable wider
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	LCD_PRT &= ~(1<<LCD_EN);					                        //EN = 0 for H-to-L
     7a4:	da 98       	cbi	0x1b, 2	; 27
}
     7a6:	cf 91       	pop	r28
     7a8:	08 95       	ret

000007aa <lcd_gotoxy>:
//******************************************************************************
void lcd_gotoxy(unsigned char x, unsigned char y)
{
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	00 d0       	rcall	.+0      	; 0x7b0 <lcd_gotoxy+0x6>
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <lcd_gotoxy+0x8>
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
     7b6:	90 e8       	ldi	r25, 0x80	; 128
     7b8:	99 83       	std	Y+1, r25	; 0x01
     7ba:	90 ec       	ldi	r25, 0xC0	; 192
     7bc:	9a 83       	std	Y+2, r25	; 0x02
     7be:	94 e9       	ldi	r25, 0x94	; 148
     7c0:	9b 83       	std	Y+3, r25	; 0x03
     7c2:	94 ed       	ldi	r25, 0xD4	; 212
     7c4:	9c 83       	std	Y+4, r25	; 0x04
	lcdCommand(firstcharAdr[y-1] + x - 1);
     7c6:	81 50       	subi	r24, 0x01	; 1
     7c8:	fe 01       	movw	r30, r28
     7ca:	e6 0f       	add	r30, r22
     7cc:	f1 1d       	adc	r31, r1
     7ce:	90 81       	ld	r25, Z
     7d0:	89 0f       	add	r24, r25
     7d2:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);
     7d6:	84 e6       	ldi	r24, 0x64	; 100
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
}
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <lcd_cursor_on>:
//*******************************************************************************
void lcd_cursor_on(void)
{
	lcdCommand(LCD_DISP_ON_CURSOR_BLINK);
     7ec:	8f e0       	ldi	r24, 0x0F	; 15
     7ee:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);
     7f2:	84 e6       	ldi	r24, 0x64	; 100
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
}
     7fa:	08 95       	ret

000007fc <lcd_cursor_off>:
//*******************************************************************************
void lcd_cursor_off(void)
{
	lcdCommand(LCD_DISP_ON);
     7fc:	8c e0       	ldi	r24, 0x0C	; 12
     7fe:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);
     802:	84 e6       	ldi	r24, 0x64	; 100
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
}
     80a:	08 95       	ret

0000080c <lcd_move_cursor_left>:
//*******************************************************************************
void lcd_move_cursor_left(void)
{
	lcdCommand(LCD_MOVE_CURSOR_LEFT);
     80c:	80 e1       	ldi	r24, 0x10	; 16
     80e:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);
     812:	84 e6       	ldi	r24, 0x64	; 100
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
}
     81a:	08 95       	ret

0000081c <lcd_move_cursor_right>:

//*******************************************************************************
void lcd_move_cursor_right(void)
{
	lcdCommand(LCD_MOVE_CURSOR_RIGHT);
     81c:	84 e1       	ldi	r24, 0x14	; 20
     81e:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);
     822:	84 e6       	ldi	r24, 0x64	; 100
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
}
     82a:	08 95       	ret

0000082c <lcd_print>:

//*******************************************************************************
void lcd_print(char *str)
{
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	8c 01       	movw	r16, r24
	unsigned char i = 0;
	
	while(str[i] != 0)
     834:	fc 01       	movw	r30, r24
     836:	80 81       	ld	r24, Z
     838:	88 23       	and	r24, r24
     83a:	51 f0       	breq	.+20     	; 0x850 <lcd_print+0x24>
}

//*******************************************************************************
void lcd_print(char *str)
{
	unsigned char i = 0;
     83c:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(str[i] != 0)
	{
		lcdData(str[i]);
     83e:	0e 94 b7 03 	call	0x76e	; 0x76e <lcdData>
		i++;
     842:	cf 5f       	subi	r28, 0xFF	; 255
//*******************************************************************************
void lcd_print(char *str)
{
	unsigned char i = 0;
	
	while(str[i] != 0)
     844:	f8 01       	movw	r30, r16
     846:	ec 0f       	add	r30, r28
     848:	f1 1d       	adc	r31, r1
     84a:	80 81       	ld	r24, Z
     84c:	88 23       	and	r24, r24
     84e:	b9 f7       	brne	.-18     	; 0x83e <lcd_print+0x12>
	{
		lcdData(str[i]);
		i++;
	}
}
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	08 95       	ret

00000858 <lcd_clear>:
//*******************************************************************************
void lcd_clear(void)
{
	lcdCommand(CLEAR_DISPLAY);
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(2000);
     85e:	80 ed       	ldi	r24, 0xD0	; 208
     860:	97 e0       	ldi	r25, 0x07	; 7
     862:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	lcd_gotoxy(1,1);
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
}
     86e:	08 95       	ret

00000870 <lcd_generate>:
// LCD_build(1,pattern);
//
//LCD Ports are same as discussed in previous sections
 
void lcd_generate(unsigned char location, unsigned char *ptr)
{
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	06 2f       	mov	r16, r22
     87a:	17 2f       	mov	r17, r23
	unsigned char i;
	if(location<8)
     87c:	88 30       	cpi	r24, 0x08	; 8
     87e:	70 f4       	brcc	.+28     	; 0x89c <lcd_generate+0x2c>
	{
		lcdCommand(0x40+(location*8));
     880:	88 0f       	add	r24, r24
     882:	88 0f       	add	r24, r24
     884:	88 0f       	add	r24, r24
     886:	80 5c       	subi	r24, 0xC0	; 192
     888:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
     88c:	c0 2f       	mov	r28, r16
     88e:	d1 2f       	mov	r29, r17
     890:	18 e0       	ldi	r17, 0x08	; 8
		for(i=0;i<8;i++)
		{
			lcdData(ptr[i]);	
     892:	89 91       	ld	r24, Y+
     894:	0e 94 b7 03 	call	0x76e	; 0x76e <lcdData>
     898:	11 50       	subi	r17, 0x01	; 1
{
	unsigned char i;
	if(location<8)
	{
		lcdCommand(0x40+(location*8));
		for(i=0;i<8;i++)
     89a:	d9 f7       	brne	.-10     	; 0x892 <lcd_generate+0x22>
		{
			lcdData(ptr[i]);	
		}	
	}
}
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	08 95       	ret

000008a6 <init>:
//This function initiates the LCD, ADC Modules and ports needed

void init (void)
{
	unsigned char i = 0;							//Just a counter
	lcd_init();										//Initialize LCD
     8a6:	0e 94 62 03 	call	0x6c4	; 0x6c4 <lcd_init>
	adc_init(128,AVCC,RIGHT);						//Initialize ADC
     8aa:	80 e8       	ldi	r24, 0x80	; 128
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	0e 94 8d 00 	call	0x11a	; 0x11a <adc_init>
	DIO_pinmode('B', MOTOR_IN1, OUTPUT);			//PB0 is an output pin
     8b4:	82 e4       	ldi	r24, 0x42	; 66
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	41 e0       	ldi	r20, 0x01	; 1
     8ba:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_pinmode>
	DIO_pinmode('B', MOTOR_IN2, OUTPUT);			//PB1 is an output pin
     8be:	82 e4       	ldi	r24, 0x42	; 66
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	41 e0       	ldi	r20, 0x01	; 1
     8c4:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_pinmode>
	DIO_pinmode('B', MOTOR_EN, OUTPUT);				//PB3 is an output pin
     8c8:	82 e4       	ldi	r24, 0x42	; 66
     8ca:	63 e0       	ldi	r22, 0x03	; 3
     8cc:	41 e0       	ldi	r20, 0x01	; 1
     8ce:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_pinmode>
	DIO_pinmode('B', BUZZER, OUTPUT);				//PB4 is an output pin
     8d2:	82 e4       	ldi	r24, 0x42	; 66
     8d4:	64 e0       	ldi	r22, 0x04	; 4
     8d6:	41 e0       	ldi	r20, 0x01	; 1
     8d8:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_pinmode>
	DIO_pinmode('B', SW, INPUT_PULLUP);				//PD0 is an input pin (pull-up)
     8dc:	82 e4       	ldi	r24, 0x42	; 66
     8de:	62 e0       	ldi	r22, 0x02	; 2
     8e0:	42 e0       	ldi	r20, 0x02	; 2
     8e2:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_pinmode>
	set_externalInterrupt(INT2, FALLING_EDGE);		//Enable INT0, FALLING_EDGE
     8e6:	85 e0       	ldi	r24, 0x05	; 5
     8e8:	63 e0       	ldi	r22, 0x03	; 3
     8ea:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <set_externalInterrupt>
	sei();
     8ee:	78 94       	sei
	eeprom_write(NUM_OF_TRIALS_ADDR,0);
     8f0:	89 e1       	ldi	r24, 0x19	; 25
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
	for(i = 1; i < 5; i++)
		eeprom_write(i+1, i+48);
	for(i = 0; i < 10; i++)
		eeprom_write(i+27, i+48);
#endif
}
     8fa:	08 95       	ret

000008fc <welcome_message>:

//This function prints a welcome message to the user

void welcome_message (void)
{
	lcd_clear();
     8fc:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
	lcd_print(" Password-lock door");
     900:	80 e7       	ldi	r24, 0x70	; 112
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
	lcd_gotoxy(1,2);
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	62 e0       	ldi	r22, 0x02	; 2
     90c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	lcd_print("      Welcome!");
     910:	84 e8       	ldi	r24, 0x84	; 132
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
}
     918:	08 95       	ret

0000091a <choose_list>:

//This function lists the possible choices for user

void choose_list (void)
{
	lcd_clear();
     91a:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
	lcd_print("(1)Log-in");
     91e:	83 e9       	ldi	r24, 0x93	; 147
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
	lcd_gotoxy(1,2);
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	62 e0       	ldi	r22, 0x02	; 2
     92a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	lcd_print("(2)Change Password");
     92e:	8d e9       	ldi	r24, 0x9D	; 157
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
}
     936:	08 95       	ret

00000938 <compare>:

unsigned char compare(unsigned char* pass1, unsigned char* pass2, unsigned char len1, unsigned char len2)
{
	unsigned char i = 0;		//Just a counter variable

	if(len1 != len2)
     938:	42 17       	cp	r20, r18
     93a:	b1 f4       	brne	.+44     	; 0x968 <compare+0x30>
		return 0;
	}
	
	else
	{
		for(i = 0; i < len1; i++)
     93c:	44 23       	and	r20, r20
     93e:	b1 f0       	breq	.+44     	; 0x96c <compare+0x34>
		{
			if(pass1[i] != pass2[i])
     940:	fc 01       	movw	r30, r24
     942:	30 81       	ld	r19, Z
     944:	fb 01       	movw	r30, r22
     946:	20 81       	ld	r18, Z
     948:	32 17       	cp	r19, r18
     94a:	91 f4       	brne	.+36     	; 0x970 <compare+0x38>
/*************************************************************************************************************/

//This function compares password_1 and password_2 and returns '1' if they are matched and '0' 
//if matching didn't occur.

unsigned char compare(unsigned char* pass1, unsigned char* pass2, unsigned char len1, unsigned char len2)
     94c:	dc 01       	movw	r26, r24
     94e:	11 96       	adiw	r26, 0x01	; 1
     950:	31 96       	adiw	r30, 0x01	; 1
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	04 c0       	rjmp	.+8      	; 0x95e <compare+0x26>
	
	else
	{
		for(i = 0; i < len1; i++)
		{
			if(pass1[i] != pass2[i])
     956:	2d 91       	ld	r18, X+
     958:	91 91       	ld	r25, Z+
     95a:	29 17       	cp	r18, r25
     95c:	59 f4       	brne	.+22     	; 0x974 <compare+0x3c>
		return 0;
	}
	
	else
	{
		for(i = 0; i < len1; i++)
     95e:	8f 5f       	subi	r24, 0xFF	; 255
     960:	84 17       	cp	r24, r20
     962:	c9 f7       	brne	.-14     	; 0x956 <compare+0x1e>
				_delay_ms(2000);
#endif				
				continue;			//No need for it, just to make the code readable
			}
		}
		return 1;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	08 95       	ret
		lcd_clear();
		lcd_gotoxy(1,1);
		lcd_print("! = ");
		_delay_ms(1000);
#endif
		return 0;
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	08 95       	ret
				_delay_ms(2000);
#endif				
				continue;			//No need for it, just to make the code readable
			}
		}
		return 1;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	08 95       	ret
				lcd_gotoxy(1,2);
				lcd_print("pass2 = ");
				lcd_print(itoa((int)pass2[i],(char*)str,10));
				_delay_ms(500);
#endif
				return 0;
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	08 95       	ret
     974:	80 e0       	ldi	r24, 0x00	; 0
				continue;			//No need for it, just to make the code readable
			}
		}
		return 1;
	}
}
     976:	08 95       	ret

00000978 <get_password>:

/*************************************************************************************************************/
//This function takes the password from the user

unsigned char get_password(unsigned char* pass)
{
     978:	ef 92       	push	r14
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	8c 01       	movw	r16, r24
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
     986:	0e 94 f6 03 	call	0x7ec	; 0x7ec <lcd_cursor_on>
	
	for(cnt = 0; cnt <= 10 ; )
     98a:	c0 e0       	ldi	r28, 0x00	; 0
     98c:	d0 e0       	ldi	r29, 0x00	; 0
			lcd_move_cursor_left();
			cnt --;	
		}
		else if(key == '*' && cnt <= 0)
		{
			cnt = 0;
     98e:	ee 24       	eor	r14, r14
     990:	ff 24       	eor	r15, r15
	
	lcd_cursor_on();
	
	for(cnt = 0; cnt <= 10 ; )
	{
		key = get_key();
     992:	0e 94 c5 02 	call	0x58a	; 0x58a <get_key>
		
		if(key == '#')
     996:	83 32       	cpi	r24, 0x23	; 35
     998:	e1 f0       	breq	.+56     	; 0x9d2 <get_password+0x5a>
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
     99a:	8a 32       	cpi	r24, 0x2A	; 42
     99c:	61 f4       	brne	.+24     	; 0x9b6 <get_password+0x3e>
     99e:	1c 16       	cp	r1, r28
     9a0:	1d 06       	cpc	r1, r29
     9a2:	0c f5       	brge	.+66     	; 0x9e6 <get_password+0x6e>
		{
			lcd_move_cursor_left();
     9a4:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_move_cursor_left>
			lcdData(' ');
     9a8:	80 e2       	ldi	r24, 0x20	; 32
     9aa:	0e 94 b7 03 	call	0x76e	; 0x76e <lcdData>
			lcd_move_cursor_left();
     9ae:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_move_cursor_left>
			cnt --;	
     9b2:	21 97       	sbiw	r28, 0x01	; 1
     9b4:	0b c0       	rjmp	.+22     	; 0x9cc <get_password+0x54>
		}
		else if(key == '*' && cnt <= 0)
		{
			cnt = 0;
		}
		else if(cnt != 10)
     9b6:	ca 30       	cpi	r28, 0x0A	; 10
     9b8:	d1 05       	cpc	r29, r1
     9ba:	59 f3       	breq	.-42     	; 0x992 <get_password+0x1a>
		{
			pass[cnt++] = key;
     9bc:	f8 01       	movw	r30, r16
     9be:	ec 0f       	add	r30, r28
     9c0:	fd 1f       	adc	r31, r29
     9c2:	80 83       	st	Z, r24
     9c4:	21 96       	adiw	r28, 0x01	; 1
			lcdData('*');
     9c6:	8a e2       	ldi	r24, 0x2A	; 42
     9c8:	0e 94 b7 03 	call	0x76e	; 0x76e <lcdData>
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
	
	for(cnt = 0; cnt <= 10 ; )
     9cc:	cb 30       	cpi	r28, 0x0B	; 11
     9ce:	d1 05       	cpc	r29, r1
     9d0:	04 f3       	brlt	.-64     	; 0x992 <get_password+0x1a>
			//while(get_key() != '*');
			//pass[cnt++] = '*';
		//}
	//} while (pass[cnt-1] != '*');
	
	lcd_cursor_off();
     9d2:	0e 94 fe 03 	call	0x7fc	; 0x7fc <lcd_cursor_off>
	
	return cnt;
}
     9d6:	8c 2f       	mov	r24, r28
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	ff 90       	pop	r15
     9e2:	ef 90       	pop	r14
     9e4:	08 95       	ret
			lcd_move_cursor_left();
			cnt --;	
		}
		else if(key == '*' && cnt <= 0)
		{
			cnt = 0;
     9e6:	e7 01       	movw	r28, r14
     9e8:	d4 cf       	rjmp	.-88     	; 0x992 <get_password+0x1a>

000009ea <sign_up>:

//This function asks the user to enter his desired password two times. If the passwords are 
//matched, the password will be saved. Else, It won't and the user should try again.

void sign_up (void)
{
     9ea:	cf 92       	push	r12
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	66 97       	sbiw	r28, 0x16	; 22
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
	unsigned char desired_password_1[11] = {0};		//The first entered password is saved here
     a0a:	8b e0       	ldi	r24, 0x0B	; 11
     a0c:	8e 01       	movw	r16, r28
     a0e:	0f 5f       	subi	r16, 0xFF	; 255
     a10:	1f 4f       	sbci	r17, 0xFF	; 255
     a12:	d8 01       	movw	r26, r16
     a14:	e8 2f       	mov	r30, r24
     a16:	1d 92       	st	X+, r1
     a18:	ea 95       	dec	r30
     a1a:	e9 f7       	brne	.-6      	; 0xa16 <sign_up+0x2c>
	unsigned char desired_password_2[11] = {0};		//The second entered password is saved here
     a1c:	0f 2e       	mov	r0, r31
     a1e:	fc e0       	ldi	r31, 0x0C	; 12
     a20:	ef 2e       	mov	r14, r31
     a22:	ff 24       	eor	r15, r15
     a24:	f0 2d       	mov	r31, r0
     a26:	ec 0e       	add	r14, r28
     a28:	fd 1e       	adc	r15, r29
     a2a:	d7 01       	movw	r26, r14
     a2c:	1d 92       	st	X+, r1
     a2e:	8a 95       	dec	r24
     a30:	e9 f7       	brne	.-6      	; 0xa2c <sign_up+0x42>
	unsigned char length_1 = 0;						//Length of first entered password
	unsigned char length_2 = 0;						//Length of second entered password

	lcd_clear();
     a32:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
	lcd_gotoxy(1,1);
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	lcd_print("Your new Password: ");
     a3e:	80 eb       	ldi	r24, 0xB0	; 176
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
	lcd_gotoxy(1,2);
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	62 e0       	ldi	r22, 0x02	; 2
     a4a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	length_1 = get_password(desired_password_1);
     a4e:	c8 01       	movw	r24, r16
     a50:	0e 94 bc 04 	call	0x978	; 0x978 <get_password>
     a54:	c8 2e       	mov	r12, r24
	
	lcd_clear();
     a56:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
	lcd_gotoxy(1,1);
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	lcd_print("Re-enter Password: ");
     a62:	84 ec       	ldi	r24, 0xC4	; 196
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
	lcd_gotoxy(1,2);
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	62 e0       	ldi	r22, 0x02	; 2
     a6e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	length_2 = get_password(desired_password_2);
     a72:	c7 01       	movw	r24, r14
     a74:	0e 94 bc 04 	call	0x978	; 0x978 <get_password>
     a78:	28 2f       	mov	r18, r24
	
	
	if(compare(desired_password_1,desired_password_2,length_1,length_2))
     a7a:	c8 01       	movw	r24, r16
     a7c:	b7 01       	movw	r22, r14
     a7e:	4c 2d       	mov	r20, r12
     a80:	0e 94 9c 04 	call	0x938	; 0x938 <compare>
     a84:	88 23       	and	r24, r24
     a86:	c9 f1       	breq	.+114    	; 0xafa <sign_up+0x110>
	{
		unsigned char i = 0;		//Just a counter variable
		cli();
     a88:	f8 94       	cli
		
		//Save the length of the password in EEPROM (Location = 0x0001)
		eeprom_write(0x0001,length_1);
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	6c 2d       	mov	r22, r12
     a90:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
		
		for(i = 0; i < length_1; i++)
     a94:	cc 20       	and	r12, r12
     a96:	c1 f0       	breq	.+48     	; 0xac8 <sign_up+0xde>
     a98:	78 01       	movw	r14, r16
/*************************************************************************************************************/

//This function asks the user to enter his desired password two times. If the passwords are 
//matched, the password will be saved. Else, It won't and the user should try again.

void sign_up (void)
     a9a:	ca 94       	dec	r12
     a9c:	02 e0       	ldi	r16, 0x02	; 2
     a9e:	10 e0       	ldi	r17, 0x00	; 0
     aa0:	0c 0f       	add	r16, r28
     aa2:	1d 1f       	adc	r17, r29
     aa4:	0c 0d       	add	r16, r12
     aa6:	11 1d       	adc	r17, r1
     aa8:	cc 24       	eor	r12, r12
     aaa:	dd 24       	eor	r13, r13
     aac:	68 94       	set
     aae:	c1 f8       	bld	r12, 1
		eeprom_write(0x0001,length_1);
		
		for(i = 0; i < length_1; i++)
		{
			//Save the password in EEPROM (In location from 12 to 22)
			eeprom_write(i+2,desired_password_1[i]);
     ab0:	f7 01       	movw	r30, r14
     ab2:	61 91       	ld	r22, Z+
     ab4:	7f 01       	movw	r14, r30
     ab6:	c6 01       	movw	r24, r12
     ab8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
     abc:	08 94       	sec
     abe:	c1 1c       	adc	r12, r1
     ac0:	d1 1c       	adc	r13, r1
		cli();
		
		//Save the length of the password in EEPROM (Location = 0x0001)
		eeprom_write(0x0001,length_1);
		
		for(i = 0; i < length_1; i++)
     ac2:	e0 16       	cp	r14, r16
     ac4:	f1 06       	cpc	r15, r17
     ac6:	a1 f7       	brne	.-24     	; 0xab0 <sign_up+0xc6>
		{
			//Save the password in EEPROM (In location from 12 to 22)
			eeprom_write(i+2,desired_password_1[i]);
		}
		sei();
     ac8:	78 94       	sei
		
		//Successful operation
		lcd_clear();
     aca:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
		lcd_print("  Your password is");
     ace:	88 ed       	ldi	r24, 0xD8	; 216
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
		lcd_gotoxy(1,2);
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	62 e0       	ldi	r22, 0x02	; 2
     ada:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
		lcd_print("      is saved");
     ade:	8b ee       	ldi	r24, 0xEB	; 235
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
     ae6:	8f e3       	ldi	r24, 0x3F	; 63
     ae8:	9d e0       	ldi	r25, 0x0D	; 13
     aea:	a3 e0       	ldi	r26, 0x03	; 3
     aec:	81 50       	subi	r24, 0x01	; 1
     aee:	90 40       	sbci	r25, 0x00	; 0
     af0:	a0 40       	sbci	r26, 0x00	; 0
     af2:	e1 f7       	brne	.-8      	; 0xaec <sign_up+0x102>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <sign_up+0x10c>
     af6:	00 00       	nop
     af8:	1d c0       	rjmp	.+58     	; 0xb34 <sign_up+0x14a>
	}
	
	else
	{
		//Failed operation, try again
		lcd_clear();
     afa:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
		lcd_gotoxy(1,1);
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
		lcd_print("Failed operation");
     b06:	8a ef       	ldi	r24, 0xFA	; 250
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
		lcd_gotoxy(1,2);
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	62 e0       	ldi	r22, 0x02	; 2
     b12:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
		lcd_print("Plz, Try again");
     b16:	8b e0       	ldi	r24, 0x0B	; 11
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
     b1e:	8f e3       	ldi	r24, 0x3F	; 63
     b20:	9d e0       	ldi	r25, 0x0D	; 13
     b22:	a3 e0       	ldi	r26, 0x03	; 3
     b24:	81 50       	subi	r24, 0x01	; 1
     b26:	90 40       	sbci	r25, 0x00	; 0
     b28:	a0 40       	sbci	r26, 0x00	; 0
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <sign_up+0x13a>
     b2c:	00 c0       	rjmp	.+0      	; 0xb2e <sign_up+0x144>
     b2e:	00 00       	nop
		_delay_ms(1000);
		sign_up();
     b30:	0e 94 f5 04 	call	0x9ea	; 0x9ea <sign_up>
	}
}
     b34:	66 96       	adiw	r28, 0x16	; 22
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	cf 90       	pop	r12
     b50:	08 95       	ret

00000b52 <check_password>:

//This function compare the entered password with the one saved in the EEPROM. If matching occurs,
//it would return '1'. Else, It would return '0'

unsigned char check_password(unsigned char len, unsigned char* password)
{	
     b52:	ef 92       	push	r14
     b54:	ff 92       	push	r15
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	e8 2e       	mov	r14, r24
     b5e:	d6 2f       	mov	r29, r22
     b60:	c7 2f       	mov	r28, r23
	unsigned char i = 0;				//Just a counter variable
	
	if(eeprom_read(0x0001) != len)		//Length is stored in EEPROM location 0x0001
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	0e 94 75 02 	call	0x4ea	; 0x4ea <eeprom_read>
     b68:	8e 15       	cp	r24, r14
     b6a:	29 f5       	brne	.+74     	; 0xbb6 <check_password+0x64>
	{
		return 0;
	}
	else
	{
		for(i = 0; i < len; i++)
     b6c:	88 23       	and	r24, r24
     b6e:	29 f1       	breq	.+74     	; 0xbba <check_password+0x68>
     b70:	ed 2e       	mov	r14, r29
     b72:	fc 2e       	mov	r15, r28
/*************************************************************************************************************/

//This function compare the entered password with the one saved in the EEPROM. If matching occurs,
//it would return '1'. Else, It would return '0'

unsigned char check_password(unsigned char len, unsigned char* password)
     b74:	18 2f       	mov	r17, r24
     b76:	1e 5f       	subi	r17, 0xFE	; 254
     b78:	c2 e0       	ldi	r28, 0x02	; 2
	}
	else
	{
		for(i = 0; i < len; i++)
		{
			if(password[i] != eeprom_read(i+2))		//Password is stored in EEPROM from location 2 to 12
     b7a:	d7 01       	movw	r26, r14
     b7c:	dd 91       	ld	r29, X+
     b7e:	7d 01       	movw	r14, r26
     b80:	8c 2f       	mov	r24, r28
     b82:	0e 94 75 02 	call	0x4ea	; 0x4ea <eeprom_read>
     b86:	d8 17       	cp	r29, r24
     b88:	89 f0       	breq	.+34     	; 0xbac <check_password+0x5a>
			{
				lcd_clear();
     b8a:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
				lcd_print("break");
     b8e:	8a e1       	ldi	r24, 0x1A	; 26
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
     b96:	8f e3       	ldi	r24, 0x3F	; 63
     b98:	9d e0       	ldi	r25, 0x0D	; 13
     b9a:	a3 e0       	ldi	r26, 0x03	; 3
     b9c:	81 50       	subi	r24, 0x01	; 1
     b9e:	90 40       	sbci	r25, 0x00	; 0
     ba0:	a0 40       	sbci	r26, 0x00	; 0
     ba2:	e1 f7       	brne	.-8      	; 0xb9c <check_password+0x4a>
     ba4:	00 c0       	rjmp	.+0      	; 0xba6 <check_password+0x54>
     ba6:	00 00       	nop
				_delay_ms(1000);
				return 0;
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 c0       	rjmp	.+16     	; 0xbbc <check_password+0x6a>
     bac:	cf 5f       	subi	r28, 0xFF	; 255
	{
		return 0;
	}
	else
	{
		for(i = 0; i < len; i++)
     bae:	c1 17       	cp	r28, r17
     bb0:	21 f7       	brne	.-56     	; 0xb7a <check_password+0x28>
				lcd_print("break");
				_delay_ms(1000);
				return 0;
			}
		}
		return 1;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <check_password+0x6a>
{	
	unsigned char i = 0;				//Just a counter variable
	
	if(eeprom_read(0x0001) != len)		//Length is stored in EEPROM location 0x0001
	{
		return 0;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <check_password+0x6a>
				lcd_print("break");
				_delay_ms(1000);
				return 0;
			}
		}
		return 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	ff 90       	pop	r15
     bc4:	ef 90       	pop	r14
     bc6:	08 95       	ret

00000bc8 <change_password>:

//This function changes the password of user. It firstly asks to enter his old password and if it is right, It
//will ask you to enter your new password two times. 

void change_password(void)
{
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	2a 97       	sbiw	r28, 0x0a	; 10
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	f8 94       	cli
     bda:	de bf       	out	0x3e, r29	; 62
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	cd bf       	out	0x3d, r28	; 61
	unsigned char old_password[10] = {0};		//Old password is stored here
     be0:	8e 01       	movw	r16, r28
     be2:	0f 5f       	subi	r16, 0xFF	; 255
     be4:	1f 4f       	sbci	r17, 0xFF	; 255
     be6:	8a e0       	ldi	r24, 0x0A	; 10
     be8:	f8 01       	movw	r30, r16
     bea:	11 92       	st	Z+, r1
     bec:	8a 95       	dec	r24
     bee:	e9 f7       	brne	.-6      	; 0xbea <change_password+0x22>
	unsigned char length = 0;					//length of old password is stored here
	
	lcd_clear();
     bf0:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
	lcd_print("Enter old password:");
     bf4:	80 e2       	ldi	r24, 0x20	; 32
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
	lcd_gotoxy(1,2);
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	length = get_password(old_password);
     c04:	c8 01       	movw	r24, r16
     c06:	0e 94 bc 04 	call	0x978	; 0x978 <get_password>
	if (check_password(length, old_password))
     c0a:	b8 01       	movw	r22, r16
     c0c:	0e 94 a9 05 	call	0xb52	; 0xb52 <check_password>
     c10:	88 23       	and	r24, r24
     c12:	19 f0       	breq	.+6      	; 0xc1a <change_password+0x52>
	{
		sign_up();
     c14:	0e 94 f5 04 	call	0x9ea	; 0x9ea <sign_up>
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <change_password+0x56>
	}
	else
	{
		
		change_password();
     c1a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <change_password>
	}
}
     c1e:	2a 96       	adiw	r28, 0x0a	; 10
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	08 95       	ret

00000c34 <open_the_door>:

//This function rotates the motor in counter_clock wise direction which means that the door is closed

void open_the_door (void)
{
	DIO_write('B', MOTOR_EN, HIGH);		//EN = 1
     c34:	82 e4       	ldi	r24, 0x42	; 66
     c36:	63 e0       	ldi	r22, 0x03	; 3
     c38:	41 e0       	ldi	r20, 0x01	; 1
     c3a:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	DIO_write('B', MOTOR_IN1, HIGH);	//IN1 = 1
     c3e:	82 e4       	ldi	r24, 0x42	; 66
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	41 e0       	ldi	r20, 0x01	; 1
     c44:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	DIO_write('B', MOTOR_IN2, LOW);		//IN2 = 0
     c48:	82 e4       	ldi	r24, 0x42	; 66
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	lcd_clear();
     c52:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
	lcd_print(" The door is opened");
     c56:	84 e3       	ldi	r24, 0x34	; 52
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
     c5e:	8f e7       	ldi	r24, 0x7F	; 127
     c60:	9a e1       	ldi	r25, 0x1A	; 26
     c62:	a6 e0       	ldi	r26, 0x06	; 6
     c64:	81 50       	subi	r24, 0x01	; 1
     c66:	90 40       	sbci	r25, 0x00	; 0
     c68:	a0 40       	sbci	r26, 0x00	; 0
     c6a:	e1 f7       	brne	.-8      	; 0xc64 <open_the_door+0x30>
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <open_the_door+0x3a>
     c6e:	00 00       	nop
	_delay_ms(2000);
	DIO_write('B', MOTOR_EN, LOW);		//EN = 0
     c70:	82 e4       	ldi	r24, 0x42	; 66
     c72:	63 e0       	ldi	r22, 0x03	; 3
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	eeprom_write(NUM_OF_TRIALS_ADDR,0);
     c7a:	89 e1       	ldi	r24, 0x19	; 25
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
}
     c84:	08 95       	ret

00000c86 <close_the_door>:
//This function rotates the motor in counter_clock wise direction which means that the door is closed

void close_the_door (void)
{	
	
	DIO_write('B', MOTOR_EN, HIGH);		//EN = 1
     c86:	82 e4       	ldi	r24, 0x42	; 66
     c88:	63 e0       	ldi	r22, 0x03	; 3
     c8a:	41 e0       	ldi	r20, 0x01	; 1
     c8c:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	DIO_write('B', MOTOR_IN1, LOW);	//IN1 = 0
     c90:	82 e4       	ldi	r24, 0x42	; 66
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	DIO_write('B', MOTOR_IN2, HIGH);		//IN2 = 1
     c9a:	82 e4       	ldi	r24, 0x42	; 66
     c9c:	61 e0       	ldi	r22, 0x01	; 1
     c9e:	41 e0       	ldi	r20, 0x01	; 1
     ca0:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	DIO_write('B', BUZZER, HIGH);		//Make some noise :D
     ca4:	82 e4       	ldi	r24, 0x42	; 66
     ca6:	64 e0       	ldi	r22, 0x04	; 4
     ca8:	41 e0       	ldi	r20, 0x01	; 1
     caa:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	PORTB |= (1 << BUZZER);
     cae:	c4 9a       	sbi	0x18, 4	; 24
     cb0:	8f e7       	ldi	r24, 0x7F	; 127
     cb2:	9a e1       	ldi	r25, 0x1A	; 26
     cb4:	a6 e0       	ldi	r26, 0x06	; 6
     cb6:	81 50       	subi	r24, 0x01	; 1
     cb8:	90 40       	sbci	r25, 0x00	; 0
     cba:	a0 40       	sbci	r26, 0x00	; 0
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <close_the_door+0x30>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <close_the_door+0x3a>
     cc0:	00 00       	nop
	_delay_ms(2000);
	DIO_write('B', BUZZER, LOW);
     cc2:	82 e4       	ldi	r24, 0x42	; 66
     cc4:	64 e0       	ldi	r22, 0x04	; 4
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	DIO_write('B', MOTOR_EN, LOW);		//EN = 0
     ccc:	82 e4       	ldi	r24, 0x42	; 66
     cce:	63 e0       	ldi	r22, 0x03	; 3
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	
}
     cd6:	08 95       	ret

00000cd8 <__vector_3>:
//If the voltage on PB2 changes from HIGH to LOW (falling_edge) the door will be closed.
//In reality the interrupt can come from any source .... can be a sensor connected to the door or just 
//a simple switch when pressed, the door will be closed.

ISR(INT2_vect)
{
     cd8:	1f 92       	push	r1
     cda:	0f 92       	push	r0
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	0f 92       	push	r0
     ce0:	11 24       	eor	r1, r1
     ce2:	2f 93       	push	r18
     ce4:	3f 93       	push	r19
     ce6:	4f 93       	push	r20
     ce8:	5f 93       	push	r21
     cea:	6f 93       	push	r22
     cec:	7f 93       	push	r23
     cee:	8f 93       	push	r24
     cf0:	9f 93       	push	r25
     cf2:	af 93       	push	r26
     cf4:	bf 93       	push	r27
     cf6:	ef 93       	push	r30
     cf8:	ff 93       	push	r31
	cli();
     cfa:	f8 94       	cli
	close_the_door();
     cfc:	0e 94 43 06 	call	0xc86	; 0xc86 <close_the_door>
	sei();
     d00:	78 94       	sei
}
     d02:	ff 91       	pop	r31
     d04:	ef 91       	pop	r30
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	0f 90       	pop	r0
     d20:	1f 90       	pop	r1
     d22:	18 95       	reti

00000d24 <get_puk_code>:
/*************************************************************************************************************/

//This function checks if the user enters the puk code correctly or not

unsigned char get_puk_code(void)
{
     d24:	bf 92       	push	r11
     d26:	cf 92       	push	r12
     d28:	df 92       	push	r13
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	2a 97       	sbiw	r28, 0x0a	; 10
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
	unsigned char i = 0;				//Just a counter variable
	unsigned char puk_code[10] = {0};
     d46:	7e 01       	movw	r14, r28
     d48:	08 94       	sec
     d4a:	e1 1c       	adc	r14, r1
     d4c:	f1 1c       	adc	r15, r1
     d4e:	8a e0       	ldi	r24, 0x0A	; 10
     d50:	d7 01       	movw	r26, r14
     d52:	1d 92       	st	X+, r1
     d54:	8a 95       	dec	r24
     d56:	e9 f7       	brne	.-6      	; 0xd52 <get_puk_code+0x2e>
	unsigned char length = 0;
	
	lcd_clear();
     d58:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
	lcd_print(" The door is closed ");
     d5c:	88 e4       	ldi	r24, 0x48	; 72
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
	lcd_gotoxy(1,2);
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	62 e0       	ldi	r22, 0x02	; 2
     d68:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	lcd_print("    permanently");
     d6c:	8d e5       	ldi	r24, 0x5D	; 93
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
     d74:	8f e3       	ldi	r24, 0x3F	; 63
     d76:	9d e0       	ldi	r25, 0x0D	; 13
     d78:	a3 e0       	ldi	r26, 0x03	; 3
     d7a:	81 50       	subi	r24, 0x01	; 1
     d7c:	90 40       	sbci	r25, 0x00	; 0
     d7e:	a0 40       	sbci	r26, 0x00	; 0
     d80:	e1 f7       	brne	.-8      	; 0xd7a <get_puk_code+0x56>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <get_puk_code+0x60>
     d84:	00 00       	nop
	_delay_ms(1000);
	
	lcd_clear();
     d86:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
	lcd_print("Enter PUK code: ");
     d8a:	8d e6       	ldi	r24, 0x6D	; 109
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
	lcd_gotoxy(1,2);
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	62 e0       	ldi	r22, 0x02	; 2
     d96:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	length = get_password(puk_code);
     d9a:	c7 01       	movw	r24, r14
     d9c:	0e 94 bc 04 	call	0x978	; 0x978 <get_password>
     da0:	18 2f       	mov	r17, r24
     da2:	67 01       	movw	r12, r14

/*************************************************************************************************************/

//This function checks if the user enters the puk code correctly or not

unsigned char get_puk_code(void)
     da4:	ce 01       	movw	r24, r28
     da6:	0b 96       	adiw	r24, 0x0b	; 11
     da8:	f7 01       	movw	r30, r14
	lcd_clear();
	lcd_print("Enter PUK code: ");
	lcd_gotoxy(1,2);
	length = get_password(puk_code);
	for(i = 0; i < 10; i++)
		puk_code[i] -= 48;
     daa:	20 81       	ld	r18, Z
     dac:	20 53       	subi	r18, 0x30	; 48
     dae:	21 93       	st	Z+, r18
	
	lcd_clear();
	lcd_print("Enter PUK code: ");
	lcd_gotoxy(1,2);
	length = get_password(puk_code);
	for(i = 0; i < 10; i++)
     db0:	e8 17       	cp	r30, r24
     db2:	f9 07       	cpc	r31, r25
     db4:	d1 f7       	brne	.-12     	; 0xdaa <get_puk_code+0x86>
		puk_code[i] -= 48;
		
	if(length != 10)		//PUK code is 10 numbers + the ending '*' which acts as an enter.
     db6:	1a 30       	cpi	r17, 0x0A	; 10
     db8:	b9 f0       	breq	.+46     	; 0xde8 <get_puk_code+0xc4>
	{
		lcd_clear();
     dba:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
		lcd_print(itoa((int)length,str,10));
     dbe:	81 2f       	mov	r24, r17
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	6d ed       	ldi	r22, 0xDD	; 221
     dc4:	71 e0       	ldi	r23, 0x01	; 1
     dc6:	4a e0       	ldi	r20, 0x0A	; 10
     dc8:	50 e0       	ldi	r21, 0x00	; 0
     dca:	0e 94 34 08 	call	0x1068	; 0x1068 <itoa>
     dce:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
     dd2:	8f e3       	ldi	r24, 0x3F	; 63
     dd4:	9d e0       	ldi	r25, 0x0D	; 13
     dd6:	a3 e0       	ldi	r26, 0x03	; 3
     dd8:	81 50       	subi	r24, 0x01	; 1
     dda:	90 40       	sbci	r25, 0x00	; 0
     ddc:	a0 40       	sbci	r26, 0x00	; 0
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <get_puk_code+0xb4>
     de0:	00 c0       	rjmp	.+0      	; 0xde2 <get_puk_code+0xbe>
     de2:	00 00       	nop
		_delay_ms(1000);
		return 0;
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	2a c0       	rjmp	.+84     	; 0xe3c <get_puk_code+0x118>
	lcd_gotoxy(1,2);
	length = get_password(puk_code);
	for(i = 0; i < 10; i++)
		puk_code[i] -= 48;
		
	if(length != 10)		//PUK code is 10 numbers + the ending '*' which acts as an enter.
     de8:	ee 24       	eor	r14, r14
     dea:	ff 24       	eor	r15, r15
	}
	else
	{
		for(i = 0; i < 10; i++)
		{
			if(puk_code[i] != eeprom_read(i+27))		//Password is stored in EEPROM from location 27 to 37
     dec:	d6 01       	movw	r26, r12
     dee:	1d 91       	ld	r17, X+
     df0:	6d 01       	movw	r12, r26
     df2:	8e 2d       	mov	r24, r14
     df4:	85 5e       	subi	r24, 0xE5	; 229
     df6:	0e 94 75 02 	call	0x4ea	; 0x4ea <eeprom_read>
     dfa:	18 17       	cp	r17, r24
     dfc:	b9 f0       	breq	.+46     	; 0xe2c <get_puk_code+0x108>
			{
						lcd_clear();
     dfe:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
						lcd_print(itoa(i,str,10));
     e02:	8e 2d       	mov	r24, r14
     e04:	9f 2d       	mov	r25, r15
     e06:	6d ed       	ldi	r22, 0xDD	; 221
     e08:	71 e0       	ldi	r23, 0x01	; 1
     e0a:	4a e0       	ldi	r20, 0x0A	; 10
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	0e 94 34 08 	call	0x1068	; 0x1068 <itoa>
     e12:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
     e16:	8f e3       	ldi	r24, 0x3F	; 63
     e18:	9d e0       	ldi	r25, 0x0D	; 13
     e1a:	a3 e0       	ldi	r26, 0x03	; 3
     e1c:	81 50       	subi	r24, 0x01	; 1
     e1e:	90 40       	sbci	r25, 0x00	; 0
     e20:	a0 40       	sbci	r26, 0x00	; 0
     e22:	e1 f7       	brne	.-8      	; 0xe1c <get_puk_code+0xf8>
     e24:	00 c0       	rjmp	.+0      	; 0xe26 <get_puk_code+0x102>
     e26:	00 00       	nop
						_delay_ms(1000);
				return 0;
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	08 c0       	rjmp	.+16     	; 0xe3c <get_puk_code+0x118>
     e2c:	08 94       	sec
     e2e:	e1 1c       	adc	r14, r1
     e30:	f1 1c       	adc	r15, r1
		_delay_ms(1000);
		return 0;
	}
	else
	{
		for(i = 0; i < 10; i++)
     e32:	9a e0       	ldi	r25, 0x0A	; 10
     e34:	e9 16       	cp	r14, r25
     e36:	f1 04       	cpc	r15, r1
     e38:	c9 f6       	brne	.-78     	; 0xdec <get_puk_code+0xc8>
						lcd_print(itoa(i,str,10));
						_delay_ms(1000);
				return 0;
			}
		}
		return 1;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
	}	
}
     e3c:	2a 96       	adiw	r28, 0x0a	; 10
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	df 90       	pop	r13
     e56:	cf 90       	pop	r12
     e58:	bf 90       	pop	r11
     e5a:	08 95       	ret

00000e5c <try_again>:
}

/*************************************************************************************************************/

void try_again (void)
{
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
	static unsigned char number_of_trials = 0;
	number_of_trials = eeprom_read(NUM_OF_TRIALS_ADDR);
     e64:	89 e1       	ldi	r24, 0x19	; 25
     e66:	0e 94 75 02 	call	0x4ea	; 0x4ea <eeprom_read>
	eeprom_write(NUM_OF_TRIALS_ADDR,++number_of_trials);			//This variable is stored in EEPROM location number 25
     e6a:	68 2f       	mov	r22, r24
     e6c:	6f 5f       	subi	r22, 0xFF	; 255
     e6e:	60 93 dc 01 	sts	0x01DC, r22
     e72:	89 e1       	ldi	r24, 0x19	; 25
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
	
	if(eeprom_read(NUM_OF_TRIALS_ADDR) == 3 || eeprom_read(NUM_OF_TRIALS_ADDR) == 6)
     e7a:	89 e1       	ldi	r24, 0x19	; 25
     e7c:	0e 94 75 02 	call	0x4ea	; 0x4ea <eeprom_read>
     e80:	83 30       	cpi	r24, 0x03	; 3
     e82:	29 f0       	breq	.+10     	; 0xe8e <try_again+0x32>
     e84:	89 e1       	ldi	r24, 0x19	; 25
     e86:	0e 94 75 02 	call	0x4ea	; 0x4ea <eeprom_read>
     e8a:	86 30       	cpi	r24, 0x06	; 6
     e8c:	71 f5       	brne	.+92     	; 0xeea <try_again+0x8e>
	{
		unsigned char i = 0;
		lcd_clear();
     e8e:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
		lcd_gotoxy(1,1);
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
		lcd_print("Wrong password");
     e9a:	8e e7       	ldi	r24, 0x7E	; 126
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
		lcd_gotoxy(1,2);
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	62 e0       	ldi	r22, 0x02	; 2
     ea6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
		lcd_print("Try again in    Sec");
     eaa:	8d e8       	ldi	r24, 0x8D	; 141
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
     eb2:	cb e3       	ldi	r28, 0x3B	; 59
     eb4:	d0 e0       	ldi	r29, 0x00	; 0
		for(i = 59; i > 0; i--)
		{	
			lcd_gotoxy(14,2);
			itoa((int)i, str, 10);
     eb6:	0d ed       	ldi	r16, 0xDD	; 221
     eb8:	11 e0       	ldi	r17, 0x01	; 1
		lcd_print("Wrong password");
		lcd_gotoxy(1,2);
		lcd_print("Try again in    Sec");
		for(i = 59; i > 0; i--)
		{	
			lcd_gotoxy(14,2);
     eba:	8e e0       	ldi	r24, 0x0E	; 14
     ebc:	62 e0       	ldi	r22, 0x02	; 2
     ebe:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
			itoa((int)i, str, 10);
     ec2:	ce 01       	movw	r24, r28
     ec4:	b8 01       	movw	r22, r16
     ec6:	4a e0       	ldi	r20, 0x0A	; 10
     ec8:	50 e0       	ldi	r21, 0x00	; 0
     eca:	0e 94 34 08 	call	0x1068	; 0x1068 <itoa>
			lcd_print(str);
     ece:	c8 01       	movw	r24, r16
     ed0:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
     ed4:	87 ea       	ldi	r24, 0xA7	; 167
     ed6:	91 e6       	ldi	r25, 0x61	; 97
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <try_again+0x7c>
     edc:	00 c0       	rjmp	.+0      	; 0xede <try_again+0x82>
     ede:	00 00       	nop
     ee0:	21 97       	sbiw	r28, 0x01	; 1
		lcd_clear();
		lcd_gotoxy(1,1);
		lcd_print("Wrong password");
		lcd_gotoxy(1,2);
		lcd_print("Try again in    Sec");
		for(i = 59; i > 0; i--)
     ee2:	59 f7       	brne	.-42     	; 0xeba <try_again+0x5e>
			lcd_gotoxy(14,2);
			itoa((int)i, str, 10);
			lcd_print(str);
			_delay_ms(100);
		}
		log_in();
     ee4:	0e 94 c1 07 	call	0xf82	; 0xf82 <log_in>
	static unsigned char number_of_trials = 0;
	number_of_trials = eeprom_read(NUM_OF_TRIALS_ADDR);
	eeprom_write(NUM_OF_TRIALS_ADDR,++number_of_trials);			//This variable is stored in EEPROM location number 25
	
	if(eeprom_read(NUM_OF_TRIALS_ADDR) == 3 || eeprom_read(NUM_OF_TRIALS_ADDR) == 6)
	{
     ee8:	47 c0       	rjmp	.+142    	; 0xf78 <try_again+0x11c>
			_delay_ms(100);
		}
		log_in();
	}
	
	else if (eeprom_read(NUM_OF_TRIALS_ADDR) >= 9)
     eea:	89 e1       	ldi	r24, 0x19	; 25
     eec:	0e 94 75 02 	call	0x4ea	; 0x4ea <eeprom_read>
     ef0:	89 30       	cpi	r24, 0x09	; 9
     ef2:	28 f1       	brcs	.+74     	; 0xf3e <try_again+0xe2>
	{
		eeprom_write(26,0xFF);
     ef4:	8a e1       	ldi	r24, 0x1A	; 26
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	6f ef       	ldi	r22, 0xFF	; 255
     efa:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
		unsigned char chk = 0;
		do
		{
			chk = get_puk_code();
     efe:	0e 94 92 06 	call	0xd24	; 0xd24 <get_puk_code>
			
		} while (!chk);
     f02:	88 23       	and	r24, r24
     f04:	e1 f3       	breq	.-8      	; 0xefe <try_again+0xa2>
		
		lcd_clear();
     f06:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
		lcd_print("Successful operation");
     f0a:	81 ea       	ldi	r24, 0xA1	; 161
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
		eeprom_write(26,0);
     f12:	8a e1       	ldi	r24, 0x1A	; 26
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
		eeprom_write(NUM_OF_TRIALS_ADDR,0);
     f1c:	89 e1       	ldi	r24, 0x19	; 25
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
     f26:	8f e3       	ldi	r24, 0x3F	; 63
     f28:	9d e0       	ldi	r25, 0x0D	; 13
     f2a:	a3 e0       	ldi	r26, 0x03	; 3
     f2c:	81 50       	subi	r24, 0x01	; 1
     f2e:	90 40       	sbci	r25, 0x00	; 0
     f30:	a0 40       	sbci	r26, 0x00	; 0
     f32:	e1 f7       	brne	.-8      	; 0xf2c <try_again+0xd0>
     f34:	00 c0       	rjmp	.+0      	; 0xf36 <try_again+0xda>
     f36:	00 00       	nop
		_delay_ms(1000);
		sign_up();
     f38:	0e 94 f5 04 	call	0x9ea	; 0x9ea <sign_up>
     f3c:	1d c0       	rjmp	.+58     	; 0xf78 <try_again+0x11c>
	}
	
	else
	{
		lcd_clear();
     f3e:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
		lcd_gotoxy(1,1);
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
		lcd_print("Wrong password");
     f4a:	8e e7       	ldi	r24, 0x7E	; 126
     f4c:	91 e0       	ldi	r25, 0x01	; 1
     f4e:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
		lcd_gotoxy(1,2);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	62 e0       	ldi	r22, 0x02	; 2
     f56:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
		lcd_print("Plz, try again");
     f5a:	86 eb       	ldi	r24, 0xB6	; 182
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
     f62:	8f e3       	ldi	r24, 0x3F	; 63
     f64:	9d e0       	ldi	r25, 0x0D	; 13
     f66:	a3 e0       	ldi	r26, 0x03	; 3
     f68:	81 50       	subi	r24, 0x01	; 1
     f6a:	90 40       	sbci	r25, 0x00	; 0
     f6c:	a0 40       	sbci	r26, 0x00	; 0
     f6e:	e1 f7       	brne	.-8      	; 0xf68 <try_again+0x10c>
     f70:	00 c0       	rjmp	.+0      	; 0xf72 <try_again+0x116>
     f72:	00 00       	nop
		_delay_ms(1000);
		log_in();
     f74:	0e 94 c1 07 	call	0xf82	; 0xf82 <log_in>
	}
}
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	08 95       	ret

00000f82 <log_in>:

//This function tells the user to enter the saved password and then checks if it is right or not
//using check_password function. And then make a decision upon the results

void log_in (void)
{
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	2b 97       	sbiw	r28, 0x0b	; 11
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
	unsigned char entered_password[11] = {0};				//The entered password is saved here
     f9a:	8e 01       	movw	r16, r28
     f9c:	0f 5f       	subi	r16, 0xFF	; 255
     f9e:	1f 4f       	sbci	r17, 0xFF	; 255
     fa0:	8b e0       	ldi	r24, 0x0B	; 11
     fa2:	f8 01       	movw	r30, r16
     fa4:	11 92       	st	Z+, r1
     fa6:	8a 95       	dec	r24
     fa8:	e9 f7       	brne	.-6      	; 0xfa4 <log_in+0x22>
	unsigned char length = 0;								//Length of entered password
	
	lcd_clear();
     faa:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
	lcd_print("Enter your password: ");
     fae:	85 ec       	ldi	r24, 0xC5	; 197
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
	lcd_gotoxy(1,2);
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	62 e0       	ldi	r22, 0x02	; 2
     fba:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	length = get_password(entered_password);
     fbe:	c8 01       	movw	r24, r16
     fc0:	0e 94 bc 04 	call	0x978	; 0x978 <get_password>
	
	if(check_password(length, entered_password))
     fc4:	b8 01       	movw	r22, r16
     fc6:	0e 94 a9 05 	call	0xb52	; 0xb52 <check_password>
     fca:	88 23       	and	r24, r24
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <log_in+0x52>
	{
		open_the_door();
     fce:	0e 94 1a 06 	call	0xc34	; 0xc34 <open_the_door>
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <log_in+0x56>
	}
	else
	{
		try_again();
     fd4:	0e 94 2e 07 	call	0xe5c	; 0xe5c <try_again>
	}
}
     fd8:	2b 96       	adiw	r28, 0x0b	; 11
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	08 95       	ret

00000fee <main>:
/*************************************************************************************************************/

int main(void)
{			
	unsigned char choice = 0;			
	init();
     fee:	0e 94 53 04 	call	0x8a6	; 0x8a6 <init>
				
			} while (!chk);
			
		
			lcd_clear();
			lcd_print("Successful operation");
     ff2:	c1 ea       	ldi	r28, 0xA1	; 161
     ff4:	d1 e0       	ldi	r29, 0x01	; 1
	
	while(1)
	{
		//Check firstly if the door is permanently locked or not (if the user enters the password 9 times wrong,
		//the door will be locked permanently.
		if(eeprom_read(26) == 0xFF)
     ff6:	8a e1       	ldi	r24, 0x1A	; 26
     ff8:	0e 94 75 02 	call	0x4ea	; 0x4ea <eeprom_read>
     ffc:	8f 3f       	cpi	r24, 0xFF	; 255
     ffe:	f1 f4       	brne	.+60     	; 0x103c <main+0x4e>
		{			
			unsigned char chk = 0;
			do
			{
				chk = get_puk_code();
    1000:	0e 94 92 06 	call	0xd24	; 0xd24 <get_puk_code>
				
			} while (!chk);
    1004:	88 23       	and	r24, r24
    1006:	e1 f3       	breq	.-8      	; 0x1000 <main+0x12>
			
		
			lcd_clear();
    1008:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_clear>
			lcd_print("Successful operation");
    100c:	ce 01       	movw	r24, r28
    100e:	0e 94 16 04 	call	0x82c	; 0x82c <lcd_print>
			eeprom_write(26,0);
    1012:	8a e1       	ldi	r24, 0x1A	; 26
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
			eeprom_write(NUM_OF_TRIALS_ADDR,0);
    101c:	89 e1       	ldi	r24, 0x19	; 25
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
    1026:	8f e3       	ldi	r24, 0x3F	; 63
    1028:	9d e0       	ldi	r25, 0x0D	; 13
    102a:	a3 e0       	ldi	r26, 0x03	; 3
    102c:	81 50       	subi	r24, 0x01	; 1
    102e:	90 40       	sbci	r25, 0x00	; 0
    1030:	a0 40       	sbci	r26, 0x00	; 0
    1032:	e1 f7       	brne	.-8      	; 0x102c <main+0x3e>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <main+0x48>
    1036:	00 00       	nop
			_delay_ms(1000);
			sign_up();
    1038:	0e 94 f5 04 	call	0x9ea	; 0x9ea <sign_up>
		}		
		//Print Hello message on screen
		welcome_message();
    103c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <welcome_message>
		
		//Press any key to go to choose list
		get_key();
    1040:	0e 94 c5 02 	call	0x58a	; 0x58a <get_key>
		
		do 
		{
			choose_list();
    1044:	0e 94 8d 04 	call	0x91a	; 0x91a <choose_list>
			choice = get_key();
    1048:	0e 94 c5 02 	call	0x58a	; 0x58a <get_key>
		} while (choice != '1' && choice != '2');
    104c:	98 2f       	mov	r25, r24
    104e:	91 53       	subi	r25, 0x31	; 49
    1050:	92 30       	cpi	r25, 0x02	; 2
    1052:	c0 f7       	brcc	.-16     	; 0x1044 <main+0x56>
		
		if(choice == '1')
    1054:	81 33       	cpi	r24, 0x31	; 49
    1056:	19 f4       	brne	.+6      	; 0x105e <main+0x70>
		{
			log_in();
    1058:	0e 94 c1 07 	call	0xf82	; 0xf82 <log_in>
    105c:	cc cf       	rjmp	.-104    	; 0xff6 <main+0x8>
		}
		else if(choice == '2')
    105e:	82 33       	cpi	r24, 0x32	; 50
    1060:	51 f6       	brne	.-108    	; 0xff6 <main+0x8>
		{
			change_password();
    1062:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <change_password>
    1066:	c7 cf       	rjmp	.-114    	; 0xff6 <main+0x8>

00001068 <itoa>:
    1068:	fb 01       	movw	r30, r22
    106a:	9f 01       	movw	r18, r30
    106c:	e8 94       	clt
    106e:	42 30       	cpi	r20, 0x02	; 2
    1070:	c4 f0       	brlt	.+48     	; 0x10a2 <itoa+0x3a>
    1072:	45 32       	cpi	r20, 0x25	; 37
    1074:	b4 f4       	brge	.+44     	; 0x10a2 <itoa+0x3a>
    1076:	4a 30       	cpi	r20, 0x0A	; 10
    1078:	29 f4       	brne	.+10     	; 0x1084 <itoa+0x1c>
    107a:	97 fb       	bst	r25, 7
    107c:	1e f4       	brtc	.+6      	; 0x1084 <itoa+0x1c>
    107e:	90 95       	com	r25
    1080:	81 95       	neg	r24
    1082:	9f 4f       	sbci	r25, 0xFF	; 255
    1084:	64 2f       	mov	r22, r20
    1086:	77 27       	eor	r23, r23
    1088:	0e 94 65 08 	call	0x10ca	; 0x10ca <__udivmodhi4>
    108c:	80 5d       	subi	r24, 0xD0	; 208
    108e:	8a 33       	cpi	r24, 0x3A	; 58
    1090:	0c f0       	brlt	.+2      	; 0x1094 <itoa+0x2c>
    1092:	89 5d       	subi	r24, 0xD9	; 217
    1094:	81 93       	st	Z+, r24
    1096:	cb 01       	movw	r24, r22
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	a1 f7       	brne	.-24     	; 0x1084 <itoa+0x1c>
    109c:	16 f4       	brtc	.+4      	; 0x10a2 <itoa+0x3a>
    109e:	5d e2       	ldi	r21, 0x2D	; 45
    10a0:	51 93       	st	Z+, r21
    10a2:	10 82       	st	Z, r1
    10a4:	c9 01       	movw	r24, r18
    10a6:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <strrev>

000010aa <strrev>:
    10aa:	dc 01       	movw	r26, r24
    10ac:	fc 01       	movw	r30, r24
    10ae:	67 2f       	mov	r22, r23
    10b0:	71 91       	ld	r23, Z+
    10b2:	77 23       	and	r23, r23
    10b4:	e1 f7       	brne	.-8      	; 0x10ae <strrev+0x4>
    10b6:	32 97       	sbiw	r30, 0x02	; 2
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <strrev+0x18>
    10ba:	7c 91       	ld	r23, X
    10bc:	6d 93       	st	X+, r22
    10be:	70 83       	st	Z, r23
    10c0:	62 91       	ld	r22, -Z
    10c2:	ae 17       	cp	r26, r30
    10c4:	bf 07       	cpc	r27, r31
    10c6:	c8 f3       	brcs	.-14     	; 0x10ba <strrev+0x10>
    10c8:	08 95       	ret

000010ca <__udivmodhi4>:
    10ca:	aa 1b       	sub	r26, r26
    10cc:	bb 1b       	sub	r27, r27
    10ce:	51 e1       	ldi	r21, 0x11	; 17
    10d0:	07 c0       	rjmp	.+14     	; 0x10e0 <__udivmodhi4_ep>

000010d2 <__udivmodhi4_loop>:
    10d2:	aa 1f       	adc	r26, r26
    10d4:	bb 1f       	adc	r27, r27
    10d6:	a6 17       	cp	r26, r22
    10d8:	b7 07       	cpc	r27, r23
    10da:	10 f0       	brcs	.+4      	; 0x10e0 <__udivmodhi4_ep>
    10dc:	a6 1b       	sub	r26, r22
    10de:	b7 0b       	sbc	r27, r23

000010e0 <__udivmodhi4_ep>:
    10e0:	88 1f       	adc	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	5a 95       	dec	r21
    10e6:	a9 f7       	brne	.-22     	; 0x10d2 <__udivmodhi4_loop>
    10e8:	80 95       	com	r24
    10ea:	90 95       	com	r25
    10ec:	bc 01       	movw	r22, r24
    10ee:	cd 01       	movw	r24, r26
    10f0:	08 95       	ret

000010f2 <_exit>:
    10f2:	f8 94       	cli

000010f4 <__stop_program>:
    10f4:	ff cf       	rjmp	.-2      	; 0x10f4 <__stop_program>
