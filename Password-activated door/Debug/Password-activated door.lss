
Password-activated door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001742  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017c  00800060  00001742  000017d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  008001dc  008001dc  00001952  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00001954  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000168  00000000  00000000  000023f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002470  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000967  00000000  00000000  000049d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012e8  00000000  00000000  00005337  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000498  00000000  00000000  00006620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049c  00000000  00000000  00006ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b31  00000000  00000000  00006f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007a8  00000000  00000000  00008a85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3d       	cpi	r26, 0xDC	; 220
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac ed       	ldi	r26, 0xDC	; 220
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 34       	cpi	r26, 0x41	; 65
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 05 0a 	call	0x140a	; 0x140a <main>
      8a:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_clkPrescaler>:
//****************************************************************************
//This function selects the conversion time of the ADC
//NB: for no prescaler enter "1"
void adc_clkPrescaler(unsigned char prescaler)
{
	ADCSRA &= (~(1<<ADPS0)) & (~(1<<ADPS1)) & (~(1<<ADPS2)); // clear ADPS2:ADPS0 for initialization
      92:	96 b1       	in	r25, 0x06	; 6
      94:	98 7f       	andi	r25, 0xF8	; 248
      96:	96 b9       	out	0x06, r25	; 6
	
	switch(prescaler)
      98:	80 31       	cpi	r24, 0x10	; 16
      9a:	29 f1       	breq	.+74     	; 0xe6 <adc_clkPrescaler+0x54>
      9c:	81 31       	cpi	r24, 0x11	; 17
      9e:	48 f0       	brcs	.+18     	; 0xb2 <adc_clkPrescaler+0x20>
      a0:	80 34       	cpi	r24, 0x40	; 64
      a2:	b9 f0       	breq	.+46     	; 0xd2 <adc_clkPrescaler+0x40>
      a4:	80 38       	cpi	r24, 0x80	; 128
      a6:	69 f0       	breq	.+26     	; 0xc2 <adc_clkPrescaler+0x30>
      a8:	80 32       	cpi	r24, 0x20	; 32
      aa:	b9 f0       	breq	.+46     	; 0xda <adc_clkPrescaler+0x48>
			break;
		case 128:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
			break;
		default:
			ADCSRA |= 0x00;			//don't change any thing if no prescalar
      ac:	86 b1       	in	r24, 0x06	; 6
      ae:	86 b9       	out	0x06, r24	; 6
      b0:	08 95       	ret
//NB: for no prescaler enter "1"
void adc_clkPrescaler(unsigned char prescaler)
{
	ADCSRA &= (~(1<<ADPS0)) & (~(1<<ADPS1)) & (~(1<<ADPS2)); // clear ADPS2:ADPS0 for initialization
	
	switch(prescaler)
      b2:	84 30       	cpi	r24, 0x04	; 4
      b4:	b1 f0       	breq	.+44     	; 0xe2 <adc_clkPrescaler+0x50>
      b6:	88 30       	cpi	r24, 0x08	; 8
      b8:	41 f0       	breq	.+16     	; 0xca <adc_clkPrescaler+0x38>
      ba:	82 30       	cpi	r24, 0x02	; 2
      bc:	b9 f7       	brne	.-18     	; 0xac <adc_clkPrescaler+0x1a>
	{
		case 2:
			ADCSRA |= (1<<ADPS0);
      be:	30 9a       	sbi	0x06, 0	; 6
			break;
      c0:	08 95       	ret
			break;
		case 64:
			ADCSRA |= (1<<ADPS1) | (1<<ADPS2);
			break;
		case 128:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
      c2:	86 b1       	in	r24, 0x06	; 6
      c4:	87 60       	ori	r24, 0x07	; 7
      c6:	86 b9       	out	0x06, r24	; 6
			break;
      c8:	08 95       	ret
			break;
		case 4:
			ADCSRA |= (1<<ADPS1);
			break;
		case 8:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1);
      ca:	86 b1       	in	r24, 0x06	; 6
      cc:	83 60       	ori	r24, 0x03	; 3
      ce:	86 b9       	out	0x06, r24	; 6
			break;
      d0:	08 95       	ret
			break;
		case 32:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS2);
			break;
		case 64:
			ADCSRA |= (1<<ADPS1) | (1<<ADPS2);
      d2:	86 b1       	in	r24, 0x06	; 6
      d4:	86 60       	ori	r24, 0x06	; 6
      d6:	86 b9       	out	0x06, r24	; 6
			break;
      d8:	08 95       	ret
			break;
		case 16:
			ADCSRA |= (1<<ADPS2);
			break;
		case 32:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS2);
      da:	86 b1       	in	r24, 0x06	; 6
      dc:	85 60       	ori	r24, 0x05	; 5
      de:	86 b9       	out	0x06, r24	; 6
			break;
      e0:	08 95       	ret
	{
		case 2:
			ADCSRA |= (1<<ADPS0);
			break;
		case 4:
			ADCSRA |= (1<<ADPS1);
      e2:	31 9a       	sbi	0x06, 1	; 6
			break;
      e4:	08 95       	ret
		case 8:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1);
			break;
		case 16:
			ADCSRA |= (1<<ADPS2);
      e6:	32 9a       	sbi	0x06, 2	; 6
			break;
      e8:	08 95       	ret

000000ea <adc_init>:
#include "ADC.h"

//****************************************************************************
//This function enables ADC module
void adc_init(unsigned char prescaler, unsigned char vref, unsigned char location)
{
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	00 d0       	rcall	.+0      	; 0xf0 <adc_init+0x6>
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADEN); //enable ADC
      f4:	37 9a       	sbi	0x06, 7	; 6
	adc_clkPrescaler(prescaler);
      f6:	4a 83       	std	Y+2, r20	; 0x02
      f8:	69 83       	std	Y+1, r22	; 0x01
      fa:	0e 94 49 00 	call	0x92	; 0x92 <adc_clkPrescaler>
}
//****************************************************************************
//This function selects the voltage reference
void adc_voltageReference(unsigned char Vref)
{
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
      fe:	87 b1       	in	r24, 0x07	; 7
     100:	8f 73       	andi	r24, 0x3F	; 63
     102:	87 b9       	out	0x07, r24	; 7
	
	switch(Vref)
     104:	69 81       	ldd	r22, Y+1	; 0x01
     106:	4a 81       	ldd	r20, Y+2	; 0x02
     108:	61 30       	cpi	r22, 0x01	; 1
     10a:	c9 f0       	breq	.+50     	; 0x13e <adc_init+0x54>
     10c:	61 30       	cpi	r22, 0x01	; 1
     10e:	50 f4       	brcc	.+20     	; 0x124 <adc_init+0x3a>
			break;
		case INTERNAL:
			ADMUX |= (1<<REFS0) | (1<<REFS1);
			break;
		default:
			ADMUX |= 0x00;
     110:	87 b1       	in	r24, 0x07	; 7
     112:	87 b9       	out	0x07, r24	; 7
void adc_init(unsigned char prescaler, unsigned char vref, unsigned char location)
{
	ADCSRA |= (1<<ADEN); //enable ADC
	adc_clkPrescaler(prescaler);
	adc_voltageReference(vref);
	location ? (ADMUX |= (1<<ADLAR)) : (ADMUX &= ~(1<<ADLAR)); // If true location is left-justified and vice versa
     114:	44 23       	and	r20, r20
     116:	69 f4       	brne	.+26     	; 0x132 <adc_init+0x48>
     118:	3d 98       	cbi	0x07, 5	; 7
	return;
}
     11a:	0f 90       	pop	r0
     11c:	0f 90       	pop	r0
     11e:	df 91       	pop	r29
     120:	cf 91       	pop	r28
     122:	08 95       	ret
//This function selects the voltage reference
void adc_voltageReference(unsigned char Vref)
{
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
	
	switch(Vref)
     124:	62 30       	cpi	r22, 0x02	; 2
     126:	a1 f7       	brne	.-24     	; 0x110 <adc_init+0x26>
			break;
		case AVCC:
			ADMUX |= (1<<REFS0);
			break;
		case INTERNAL:
			ADMUX |= (1<<REFS0) | (1<<REFS1);
     128:	87 b1       	in	r24, 0x07	; 7
     12a:	80 6c       	ori	r24, 0xC0	; 192
     12c:	87 b9       	out	0x07, r24	; 7
void adc_init(unsigned char prescaler, unsigned char vref, unsigned char location)
{
	ADCSRA |= (1<<ADEN); //enable ADC
	adc_clkPrescaler(prescaler);
	adc_voltageReference(vref);
	location ? (ADMUX |= (1<<ADLAR)) : (ADMUX &= ~(1<<ADLAR)); // If true location is left-justified and vice versa
     12e:	44 23       	and	r20, r20
     130:	99 f3       	breq	.-26     	; 0x118 <adc_init+0x2e>
     132:	3d 9a       	sbi	0x07, 5	; 7
	return;
}
     134:	0f 90       	pop	r0
     136:	0f 90       	pop	r0
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret
	{
		case AREF:
			ADMUX |= 0x00;
			break;
		case AVCC:
			ADMUX |= (1<<REFS0);
     13e:	3e 9a       	sbi	0x07, 6	; 7
     140:	e9 cf       	rjmp	.-46     	; 0x114 <adc_init+0x2a>

00000142 <adc_voltageReference>:
}
//****************************************************************************
//This function selects the voltage reference
void adc_voltageReference(unsigned char Vref)
{
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
     142:	97 b1       	in	r25, 0x07	; 7
     144:	9f 73       	andi	r25, 0x3F	; 63
     146:	97 b9       	out	0x07, r25	; 7
	
	switch(Vref)
     148:	81 30       	cpi	r24, 0x01	; 1
     14a:	59 f0       	breq	.+22     	; 0x162 <adc_voltageReference+0x20>
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	18 f4       	brcc	.+6      	; 0x156 <adc_voltageReference+0x14>
			break;
		case INTERNAL:
			ADMUX |= (1<<REFS0) | (1<<REFS1);
			break;
		default:
			ADMUX |= 0x00;
     150:	87 b1       	in	r24, 0x07	; 7
     152:	87 b9       	out	0x07, r24	; 7
     154:	08 95       	ret
//This function selects the voltage reference
void adc_voltageReference(unsigned char Vref)
{
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
	
	switch(Vref)
     156:	82 30       	cpi	r24, 0x02	; 2
     158:	d9 f7       	brne	.-10     	; 0x150 <adc_voltageReference+0xe>
			break;
		case AVCC:
			ADMUX |= (1<<REFS0);
			break;
		case INTERNAL:
			ADMUX |= (1<<REFS0) | (1<<REFS1);
     15a:	87 b1       	in	r24, 0x07	; 7
     15c:	80 6c       	ori	r24, 0xC0	; 192
     15e:	87 b9       	out	0x07, r24	; 7
			break;
     160:	08 95       	ret
	{
		case AREF:
			ADMUX |= 0x00;
			break;
		case AVCC:
			ADMUX |= (1<<REFS0);
     162:	3e 9a       	sbi	0x07, 6	; 7
			break;
     164:	08 95       	ret

00000166 <adc_inputChannel>:
}
//****************************************************************************
//This function tells the ADC module to start conversion
void adc_inputChannel(unsigned char input_channel)
{
	ADMUX &= 0xC0; // clear MUX4:MUX0 and ADLAR bit for initialization
     166:	97 b1       	in	r25, 0x07	; 7
     168:	90 7c       	andi	r25, 0xC0	; 192
     16a:	97 b9       	out	0x07, r25	; 7
	
	switch(input_channel)
     16c:	83 30       	cpi	r24, 0x03	; 3
     16e:	41 f1       	breq	.+80     	; 0x1c0 <adc_inputChannel+0x5a>
     170:	84 30       	cpi	r24, 0x04	; 4
     172:	68 f0       	brcs	.+26     	; 0x18e <adc_inputChannel+0x28>
     174:	85 30       	cpi	r24, 0x05	; 5
     176:	b1 f0       	breq	.+44     	; 0x1a4 <adc_inputChannel+0x3e>
     178:	85 30       	cpi	r24, 0x05	; 5
     17a:	78 f0       	brcs	.+30     	; 0x19a <adc_inputChannel+0x34>
     17c:	86 30       	cpi	r24, 0x06	; 6
     17e:	d1 f0       	breq	.+52     	; 0x1b4 <adc_inputChannel+0x4e>
     180:	87 30       	cpi	r24, 0x07	; 7
     182:	a1 f0       	breq	.+40     	; 0x1ac <adc_inputChannel+0x46>
		case ADC7:
			//ADMUX |= 0x07;
			ADMUX |= (1<<MUX0) | (1<<MUX1) | (1<<MUX2);
			break;
		default:
			ADMUX |= (0x1F & input_channel);
     184:	97 b1       	in	r25, 0x07	; 7
     186:	8f 71       	andi	r24, 0x1F	; 31
     188:	89 2b       	or	r24, r25
     18a:	87 b9       	out	0x07, r24	; 7
     18c:	08 95       	ret
//This function tells the ADC module to start conversion
void adc_inputChannel(unsigned char input_channel)
{
	ADMUX &= 0xC0; // clear MUX4:MUX0 and ADLAR bit for initialization
	
	switch(input_channel)
     18e:	81 30       	cpi	r24, 0x01	; 1
     190:	a9 f0       	breq	.+42     	; 0x1bc <adc_inputChannel+0x56>
     192:	82 30       	cpi	r24, 0x02	; 2
     194:	20 f0       	brcs	.+8      	; 0x19e <adc_inputChannel+0x38>
			break;
		case ADC1:
			ADMUX |= (1<<MUX0);
			break;
		case ADC2:
			ADMUX |= (1<<MUX1);
     196:	39 9a       	sbi	0x07, 1	; 7
			break;
     198:	08 95       	ret
		case ADC3:
			ADMUX |= (1<<MUX0) | (1<<MUX1);
			break;
		case ADC4:
			ADMUX |= (1<<MUX2);
     19a:	3a 9a       	sbi	0x07, 2	; 7
			break;
     19c:	08 95       	ret
	ADMUX &= 0xC0; // clear MUX4:MUX0 and ADLAR bit for initialization
	
	switch(input_channel)
	{
		case ADC0:
			ADMUX |= 0x00;
     19e:	87 b1       	in	r24, 0x07	; 7
     1a0:	87 b9       	out	0x07, r24	; 7
			break;
     1a2:	08 95       	ret
			break;
		case ADC4:
			ADMUX |= (1<<MUX2);
			break;
		case ADC5:
			ADMUX |= (1<<MUX0) | (1<<MUX2);
     1a4:	87 b1       	in	r24, 0x07	; 7
     1a6:	85 60       	ori	r24, 0x05	; 5
     1a8:	87 b9       	out	0x07, r24	; 7
			break;
     1aa:	08 95       	ret
		case ADC6:
			ADMUX |= (1<<MUX1) | (1<<MUX2);
			break;
		case ADC7:
			//ADMUX |= 0x07;
			ADMUX |= (1<<MUX0) | (1<<MUX1) | (1<<MUX2);
     1ac:	87 b1       	in	r24, 0x07	; 7
     1ae:	87 60       	ori	r24, 0x07	; 7
     1b0:	87 b9       	out	0x07, r24	; 7
			break;
     1b2:	08 95       	ret
			break;
		case ADC5:
			ADMUX |= (1<<MUX0) | (1<<MUX2);
			break;
		case ADC6:
			ADMUX |= (1<<MUX1) | (1<<MUX2);
     1b4:	87 b1       	in	r24, 0x07	; 7
     1b6:	86 60       	ori	r24, 0x06	; 6
     1b8:	87 b9       	out	0x07, r24	; 7
			break;
     1ba:	08 95       	ret
	{
		case ADC0:
			ADMUX |= 0x00;
			break;
		case ADC1:
			ADMUX |= (1<<MUX0);
     1bc:	38 9a       	sbi	0x07, 0	; 7
			break;
     1be:	08 95       	ret
		case ADC2:
			ADMUX |= (1<<MUX1);
			break;
		case ADC3:
			ADMUX |= (1<<MUX0) | (1<<MUX1);
     1c0:	87 b1       	in	r24, 0x07	; 7
     1c2:	83 60       	ori	r24, 0x03	; 3
     1c4:	87 b9       	out	0x07, r24	; 7
			break;
     1c6:	08 95       	ret

000001c8 <adc_read>:
unsigned int adc_read(unsigned char input_channel)
{
	int analogReading = 0;
	unsigned char LSB;
	unsigned char MSB;
	adc_inputChannel(input_channel);
     1c8:	0e 94 b3 00 	call	0x166	; 0x166 <adc_inputChannel>
	ADCSRA |= (1<<ADSC);    //start conversion
     1cc:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1<<ADIF)) == 0); //Wait until conversion is done
     1ce:	34 9b       	sbis	0x06, 4	; 6
     1d0:	fe cf       	rjmp	.-4      	; 0x1ce <adc_read+0x6>
	LSB = ADCL;
     1d2:	84 b1       	in	r24, 0x04	; 4
	MSB = ADCH;
     1d4:	95 b1       	in	r25, 0x05	; 5
	analogReading |= MSB;
	analogReading <<= 8;
     1d6:	39 2f       	mov	r19, r25
     1d8:	20 e0       	ldi	r18, 0x00	; 0
	analogReading |= LSB;
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	82 2b       	or	r24, r18
     1de:	93 2b       	or	r25, r19
	return analogReading;	
}
     1e0:	08 95       	ret

000001e2 <DIO_pinmode>:

//This function sets the pin_number to either OUTPUT or INPUT

void DIO_pinmode(unsigned char port_char, unsigned char pin_number, unsigned char state)
{
	switch (port_char)
     1e2:	84 34       	cpi	r24, 0x44	; 68
     1e4:	21 f1       	breq	.+72     	; 0x22e <DIO_pinmode+0x4c>
     1e6:	85 34       	cpi	r24, 0x45	; 69
     1e8:	50 f0       	brcs	.+20     	; 0x1fe <DIO_pinmode+0x1c>
     1ea:	82 36       	cpi	r24, 0x62	; 98
     1ec:	99 f1       	breq	.+102    	; 0x254 <DIO_pinmode+0x72>
     1ee:	83 36       	cpi	r24, 0x63	; 99
     1f0:	08 f4       	brcc	.+2      	; 0x1f4 <DIO_pinmode+0x12>
     1f2:	42 c0       	rjmp	.+132    	; 0x278 <DIO_pinmode+0x96>
     1f4:	83 36       	cpi	r24, 0x63	; 99
     1f6:	41 f0       	breq	.+16     	; 0x208 <DIO_pinmode+0x26>
     1f8:	84 36       	cpi	r24, 0x64	; 100
     1fa:	c9 f0       	breq	.+50     	; 0x22e <DIO_pinmode+0x4c>
     1fc:	08 95       	ret
     1fe:	82 34       	cpi	r24, 0x42	; 66
     200:	49 f1       	breq	.+82     	; 0x254 <DIO_pinmode+0x72>
     202:	83 34       	cpi	r24, 0x43	; 67
     204:	08 f4       	brcc	.+2      	; 0x208 <DIO_pinmode+0x26>
     206:	4e c0       	rjmp	.+156    	; 0x2a4 <DIO_pinmode+0xc2>
			DDRB |= (1 << pin_number);		
		break;
		
		case 'C':
		case 'c':
		if(state == INPUT)
     208:	44 23       	and	r20, r20
     20a:	09 f4       	brne	.+2      	; 0x20e <DIO_pinmode+0x2c>
     20c:	66 c0       	rjmp	.+204    	; 0x2da <DIO_pinmode+0xf8>
			DDRC &= ~(1 << pin_number);
		else if (state == INPUT_PULLUP)
     20e:	42 30       	cpi	r20, 0x02	; 2
     210:	09 f4       	brne	.+2      	; 0x214 <DIO_pinmode+0x32>
     212:	8b c0       	rjmp	.+278    	; 0x32a <DIO_pinmode+0x148>
		{
			DDRC &= ~(1 << pin_number);
			PORTC |= (1 << pin_number);
		}			
		else if (state == OUTPUT)
     214:	41 30       	cpi	r20, 0x01	; 1
     216:	91 f7       	brne	.-28     	; 0x1fc <DIO_pinmode+0x1a>
			DDRC |= (1 << pin_number);
     218:	24 b3       	in	r18, 0x14	; 20
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_pinmode+0x42>
     220:	88 0f       	add	r24, r24
     222:	99 1f       	adc	r25, r25
     224:	6a 95       	dec	r22
     226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_pinmode+0x3e>
     228:	28 2b       	or	r18, r24
     22a:	24 bb       	out	0x14, r18	; 20
     22c:	08 95       	ret
		break;
		
		case 'D':
		case 'd':
		if(state == INPUT)
     22e:	44 23       	and	r20, r20
     230:	09 f4       	brne	.+2      	; 0x234 <DIO_pinmode+0x52>
     232:	47 c0       	rjmp	.+142    	; 0x2c2 <DIO_pinmode+0xe0>
			DDRD &= ~(1 << pin_number);
		else if (state == INPUT_PULLUP)
     234:	42 30       	cpi	r20, 0x02	; 2
     236:	09 f4       	brne	.+2      	; 0x23a <DIO_pinmode+0x58>
     238:	88 c0       	rjmp	.+272    	; 0x34a <DIO_pinmode+0x168>
		{
			DDRD &= ~(1 << pin_number);
			PORTD |= (1 << pin_number);			
		}			
		else if (state == OUTPUT)
     23a:	41 30       	cpi	r20, 0x01	; 1
     23c:	f9 f6       	brne	.-66     	; 0x1fc <DIO_pinmode+0x1a>
			DDRD |= (1 << pin_number);
     23e:	21 b3       	in	r18, 0x11	; 17
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_pinmode+0x68>
     246:	88 0f       	add	r24, r24
     248:	99 1f       	adc	r25, r25
     24a:	6a 95       	dec	r22
     24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_pinmode+0x64>
     24e:	28 2b       	or	r18, r24
     250:	21 bb       	out	0x11, r18	; 17
     252:	08 95       	ret
			DDRA |= (1 << pin_number);
		break;

		case 'B':
		case 'b':
		if(state == INPUT)
     254:	44 23       	and	r20, r20
     256:	49 f1       	breq	.+82     	; 0x2aa <DIO_pinmode+0xc8>
			DDRB &= ~(1 << pin_number);
		else if (state == INPUT_PULLUP)
     258:	42 30       	cpi	r20, 0x02	; 2
     25a:	09 f4       	brne	.+2      	; 0x25e <DIO_pinmode+0x7c>
     25c:	56 c0       	rjmp	.+172    	; 0x30a <DIO_pinmode+0x128>
		{
			DDRB &= ~(1 << pin_number);
			PORTB |= (1 << pin_number);		
		}				
		else if (state == OUTPUT)
     25e:	41 30       	cpi	r20, 0x01	; 1
     260:	69 f6       	brne	.-102    	; 0x1fc <DIO_pinmode+0x1a>
			DDRB |= (1 << pin_number);		
     262:	27 b3       	in	r18, 0x17	; 23
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_pinmode+0x8c>
     26a:	88 0f       	add	r24, r24
     26c:	99 1f       	adc	r25, r25
     26e:	6a 95       	dec	r22
     270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_pinmode+0x88>
     272:	28 2b       	or	r18, r24
     274:	27 bb       	out	0x17, r18	; 23
     276:	08 95       	ret

//This function sets the pin_number to either OUTPUT or INPUT

void DIO_pinmode(unsigned char port_char, unsigned char pin_number, unsigned char state)
{
	switch (port_char)
     278:	81 36       	cpi	r24, 0x61	; 97
     27a:	09 f0       	breq	.+2      	; 0x27e <DIO_pinmode+0x9c>
     27c:	bf cf       	rjmp	.-130    	; 0x1fc <DIO_pinmode+0x1a>
	{
		case 'A':
		case 'a':
		if(state == INPUT)
     27e:	44 23       	and	r20, r20
     280:	c1 f1       	breq	.+112    	; 0x2f2 <DIO_pinmode+0x110>
			DDRA &= ~(1 << pin_number);
		else if (state == INPUT_PULLUP)
     282:	42 30       	cpi	r20, 0x02	; 2
     284:	09 f4       	brne	.+2      	; 0x288 <DIO_pinmode+0xa6>
     286:	71 c0       	rjmp	.+226    	; 0x36a <DIO_pinmode+0x188>
		{
			DDRA &= ~(1 << pin_number);
			PORTA |= (1 << pin_number);
		}			
		else if (state == OUTPUT)
     288:	41 30       	cpi	r20, 0x01	; 1
     28a:	09 f0       	breq	.+2      	; 0x28e <DIO_pinmode+0xac>
     28c:	b7 cf       	rjmp	.-146    	; 0x1fc <DIO_pinmode+0x1a>
			DDRA |= (1 << pin_number);
     28e:	2a b3       	in	r18, 0x1a	; 26
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_pinmode+0xb8>
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	6a 95       	dec	r22
     29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_pinmode+0xb4>
     29e:	28 2b       	or	r18, r24
     2a0:	2a bb       	out	0x1a, r18	; 26
     2a2:	08 95       	ret

//This function sets the pin_number to either OUTPUT or INPUT

void DIO_pinmode(unsigned char port_char, unsigned char pin_number, unsigned char state)
{
	switch (port_char)
     2a4:	81 34       	cpi	r24, 0x41	; 65
     2a6:	59 f3       	breq	.-42     	; 0x27e <DIO_pinmode+0x9c>
     2a8:	08 95       	ret
		break;

		case 'B':
		case 'b':
		if(state == INPUT)
			DDRB &= ~(1 << pin_number);
     2aa:	27 b3       	in	r18, 0x17	; 23
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_pinmode+0xd4>
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	6a 95       	dec	r22
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_pinmode+0xd0>
     2ba:	80 95       	com	r24
     2bc:	82 23       	and	r24, r18
     2be:	87 bb       	out	0x17, r24	; 23
     2c0:	08 95       	ret
		break;
		
		case 'D':
		case 'd':
		if(state == INPUT)
			DDRD &= ~(1 << pin_number);
     2c2:	21 b3       	in	r18, 0x11	; 17
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_pinmode+0xec>
     2ca:	88 0f       	add	r24, r24
     2cc:	99 1f       	adc	r25, r25
     2ce:	6a 95       	dec	r22
     2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_pinmode+0xe8>
     2d2:	80 95       	com	r24
     2d4:	82 23       	and	r24, r18
     2d6:	81 bb       	out	0x11, r24	; 17
     2d8:	08 95       	ret
		break;
		
		case 'C':
		case 'c':
		if(state == INPUT)
			DDRC &= ~(1 << pin_number);
     2da:	24 b3       	in	r18, 0x14	; 20
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_pinmode+0x104>
     2e2:	88 0f       	add	r24, r24
     2e4:	99 1f       	adc	r25, r25
     2e6:	6a 95       	dec	r22
     2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_pinmode+0x100>
     2ea:	80 95       	com	r24
     2ec:	82 23       	and	r24, r18
     2ee:	84 bb       	out	0x14, r24	; 20
     2f0:	08 95       	ret
	switch (port_char)
	{
		case 'A':
		case 'a':
		if(state == INPUT)
			DDRA &= ~(1 << pin_number);
     2f2:	2a b3       	in	r18, 0x1a	; 26
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_pinmode+0x11c>
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	6a 95       	dec	r22
     300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_pinmode+0x118>
     302:	80 95       	com	r24
     304:	82 23       	and	r24, r18
     306:	8a bb       	out	0x1a, r24	; 26
     308:	08 95       	ret
		case 'b':
		if(state == INPUT)
			DDRB &= ~(1 << pin_number);
		else if (state == INPUT_PULLUP)
		{
			DDRB &= ~(1 << pin_number);
     30a:	27 b3       	in	r18, 0x17	; 23
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_pinmode+0x134>
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	6a 95       	dec	r22
     318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_pinmode+0x130>
     31a:	98 2f       	mov	r25, r24
     31c:	90 95       	com	r25
     31e:	92 23       	and	r25, r18
     320:	97 bb       	out	0x17, r25	; 23
			PORTB |= (1 << pin_number);		
     322:	98 b3       	in	r25, 0x18	; 24
     324:	98 2b       	or	r25, r24
     326:	98 bb       	out	0x18, r25	; 24
     328:	08 95       	ret
		case 'c':
		if(state == INPUT)
			DDRC &= ~(1 << pin_number);
		else if (state == INPUT_PULLUP)
		{
			DDRC &= ~(1 << pin_number);
     32a:	24 b3       	in	r18, 0x14	; 20
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_pinmode+0x154>
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	6a 95       	dec	r22
     338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_pinmode+0x150>
     33a:	98 2f       	mov	r25, r24
     33c:	90 95       	com	r25
     33e:	92 23       	and	r25, r18
     340:	94 bb       	out	0x14, r25	; 20
			PORTC |= (1 << pin_number);
     342:	95 b3       	in	r25, 0x15	; 21
     344:	98 2b       	or	r25, r24
     346:	95 bb       	out	0x15, r25	; 21
     348:	08 95       	ret
		case 'd':
		if(state == INPUT)
			DDRD &= ~(1 << pin_number);
		else if (state == INPUT_PULLUP)
		{
			DDRD &= ~(1 << pin_number);
     34a:	21 b3       	in	r18, 0x11	; 17
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_pinmode+0x174>
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	6a 95       	dec	r22
     358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_pinmode+0x170>
     35a:	98 2f       	mov	r25, r24
     35c:	90 95       	com	r25
     35e:	92 23       	and	r25, r18
     360:	91 bb       	out	0x11, r25	; 17
			PORTD |= (1 << pin_number);			
     362:	92 b3       	in	r25, 0x12	; 18
     364:	98 2b       	or	r25, r24
     366:	92 bb       	out	0x12, r25	; 18
     368:	08 95       	ret
		case 'a':
		if(state == INPUT)
			DDRA &= ~(1 << pin_number);
		else if (state == INPUT_PULLUP)
		{
			DDRA &= ~(1 << pin_number);
     36a:	2a b3       	in	r18, 0x1a	; 26
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_pinmode+0x194>
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	6a 95       	dec	r22
     378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_pinmode+0x190>
     37a:	98 2f       	mov	r25, r24
     37c:	90 95       	com	r25
     37e:	92 23       	and	r25, r18
     380:	9a bb       	out	0x1a, r25	; 26
			PORTA |= (1 << pin_number);
     382:	9b b3       	in	r25, 0x1b	; 27
     384:	98 2b       	or	r25, r24
     386:	9b bb       	out	0x1b, r25	; 27
     388:	08 95       	ret

0000038a <DIO_write>:

//This function writes on pin number either HIGH or LOW

void DIO_write(unsigned char port_char, unsigned char pin_number, unsigned char logic_level)
{
		switch (port_char)
     38a:	84 34       	cpi	r24, 0x44	; 68
     38c:	01 f1       	breq	.+64     	; 0x3ce <DIO_write+0x44>
     38e:	85 34       	cpi	r24, 0x45	; 69
     390:	48 f0       	brcs	.+18     	; 0x3a4 <DIO_write+0x1a>
     392:	82 36       	cpi	r24, 0x62	; 98
     394:	61 f1       	breq	.+88     	; 0x3ee <DIO_write+0x64>
     396:	83 36       	cpi	r24, 0x63	; 99
     398:	c8 f1       	brcs	.+114    	; 0x40c <DIO_write+0x82>
     39a:	83 36       	cpi	r24, 0x63	; 99
     39c:	41 f0       	breq	.+16     	; 0x3ae <DIO_write+0x24>
     39e:	84 36       	cpi	r24, 0x64	; 100
     3a0:	b1 f0       	breq	.+44     	; 0x3ce <DIO_write+0x44>
     3a2:	08 95       	ret
     3a4:	82 34       	cpi	r24, 0x42	; 66
     3a6:	19 f1       	breq	.+70     	; 0x3ee <DIO_write+0x64>
     3a8:	83 34       	cpi	r24, 0x43	; 67
     3aa:	08 f4       	brcc	.+2      	; 0x3ae <DIO_write+0x24>
     3ac:	40 c0       	rjmp	.+128    	; 0x42e <DIO_write+0xa4>
				PORTB |= (1 << pin_number);
			break;

			case 'C':
			case 'c':
			if(logic_level == LOW)
     3ae:	44 23       	and	r20, r20
     3b0:	09 f4       	brne	.+2      	; 0x3b4 <DIO_write+0x2a>
     3b2:	58 c0       	rjmp	.+176    	; 0x464 <DIO_write+0xda>
				PORTC &= ~(1 << pin_number);
			else if (logic_level == HIGH)
     3b4:	41 30       	cpi	r20, 0x01	; 1
     3b6:	a9 f7       	brne	.-22     	; 0x3a2 <DIO_write+0x18>
				PORTC |= (1 << pin_number);
     3b8:	25 b3       	in	r18, 0x15	; 21
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_write+0x3a>
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	6a 95       	dec	r22
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_write+0x36>
     3c8:	28 2b       	or	r18, r24
     3ca:	25 bb       	out	0x15, r18	; 21
     3cc:	08 95       	ret
			break;
			
			case 'D':
			case 'd':
			if(logic_level == LOW)
     3ce:	44 23       	and	r20, r20
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <DIO_write+0x4a>
     3d2:	3c c0       	rjmp	.+120    	; 0x44c <DIO_write+0xc2>
				PORTD &= ~(1 << pin_number);
			else if (logic_level == HIGH)
     3d4:	41 30       	cpi	r20, 0x01	; 1
     3d6:	29 f7       	brne	.-54     	; 0x3a2 <DIO_write+0x18>
				PORTD |= (1 << pin_number);
     3d8:	22 b3       	in	r18, 0x12	; 18
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_write+0x5a>
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	6a 95       	dec	r22
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_write+0x56>
     3e8:	28 2b       	or	r18, r24
     3ea:	22 bb       	out	0x12, r18	; 18
     3ec:	08 95       	ret
				PORTA |= (1 << pin_number);
			break;

			case 'B':
			case 'b':
			if(logic_level == LOW)
     3ee:	44 23       	and	r20, r20
     3f0:	09 f1       	breq	.+66     	; 0x434 <DIO_write+0xaa>
				PORTB &= ~(1 << pin_number);
			else if (logic_level == HIGH)
     3f2:	41 30       	cpi	r20, 0x01	; 1
     3f4:	b1 f6       	brne	.-84     	; 0x3a2 <DIO_write+0x18>
				PORTB |= (1 << pin_number);
     3f6:	28 b3       	in	r18, 0x18	; 24
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <DIO_write+0x78>
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	6a 95       	dec	r22
     404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_write+0x74>
     406:	28 2b       	or	r18, r24
     408:	28 bb       	out	0x18, r18	; 24
     40a:	08 95       	ret

//This function writes on pin number either HIGH or LOW

void DIO_write(unsigned char port_char, unsigned char pin_number, unsigned char logic_level)
{
		switch (port_char)
     40c:	81 36       	cpi	r24, 0x61	; 97
     40e:	49 f6       	brne	.-110    	; 0x3a2 <DIO_write+0x18>
		{
			case 'A':
			case 'a':
			if(logic_level == LOW)
     410:	44 23       	and	r20, r20
     412:	a1 f1       	breq	.+104    	; 0x47c <DIO_write+0xf2>
				PORTA &= ~(1 << pin_number);
			else if (logic_level == HIGH)
     414:	41 30       	cpi	r20, 0x01	; 1
     416:	29 f6       	brne	.-118    	; 0x3a2 <DIO_write+0x18>
				PORTA |= (1 << pin_number);
     418:	2b b3       	in	r18, 0x1b	; 27
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_write+0x9a>
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	6a 95       	dec	r22
     426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_write+0x96>
     428:	28 2b       	or	r18, r24
     42a:	2b bb       	out	0x1b, r18	; 27
     42c:	08 95       	ret

//This function writes on pin number either HIGH or LOW

void DIO_write(unsigned char port_char, unsigned char pin_number, unsigned char logic_level)
{
		switch (port_char)
     42e:	81 34       	cpi	r24, 0x41	; 65
     430:	79 f3       	breq	.-34     	; 0x410 <DIO_write+0x86>
     432:	08 95       	ret
			break;

			case 'B':
			case 'b':
			if(logic_level == LOW)
				PORTB &= ~(1 << pin_number);
     434:	28 b3       	in	r18, 0x18	; 24
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_write+0xb6>
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	6a 95       	dec	r22
     442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_write+0xb2>
     444:	80 95       	com	r24
     446:	82 23       	and	r24, r18
     448:	88 bb       	out	0x18, r24	; 24
     44a:	08 95       	ret
			break;
			
			case 'D':
			case 'd':
			if(logic_level == LOW)
				PORTD &= ~(1 << pin_number);
     44c:	22 b3       	in	r18, 0x12	; 18
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	02 c0       	rjmp	.+4      	; 0x458 <DIO_write+0xce>
     454:	88 0f       	add	r24, r24
     456:	99 1f       	adc	r25, r25
     458:	6a 95       	dec	r22
     45a:	e2 f7       	brpl	.-8      	; 0x454 <DIO_write+0xca>
     45c:	80 95       	com	r24
     45e:	82 23       	and	r24, r18
     460:	82 bb       	out	0x12, r24	; 18
     462:	08 95       	ret
			break;

			case 'C':
			case 'c':
			if(logic_level == LOW)
				PORTC &= ~(1 << pin_number);
     464:	25 b3       	in	r18, 0x15	; 21
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	02 c0       	rjmp	.+4      	; 0x470 <DIO_write+0xe6>
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	6a 95       	dec	r22
     472:	e2 f7       	brpl	.-8      	; 0x46c <DIO_write+0xe2>
     474:	80 95       	com	r24
     476:	82 23       	and	r24, r18
     478:	85 bb       	out	0x15, r24	; 21
     47a:	08 95       	ret
		switch (port_char)
		{
			case 'A':
			case 'a':
			if(logic_level == LOW)
				PORTA &= ~(1 << pin_number);
     47c:	2b b3       	in	r18, 0x1b	; 27
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_write+0xfe>
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	6a 95       	dec	r22
     48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_write+0xfa>
     48c:	80 95       	com	r24
     48e:	82 23       	and	r24, r18
     490:	8b bb       	out	0x1b, r24	; 27
     492:	08 95       	ret

00000494 <eeprom_write>:
#include <avr/io.h>
#include "EEPROM.h"

void eeprom_write(unsigned int address, unsigned char data)
{
	while((EECR & (1 << EEWE)) == 1);			//Wait for EEWE = 0, Which means that EEPROM is ready for read or write
     494:	2c b3       	in	r18, 0x1c	; 28
	EEAR = address;							//Put the address in which you want to put the byte
     496:	9f bb       	out	0x1f, r25	; 31
     498:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;							//Put the desired byte
     49a:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1 << EEMWE);					//Set EEMWE to 1
     49c:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1 << EEWE);					//Set EEWE to 1 within 4 clock cycles (EEMWE will be cleared after 4 clock cycles)
     49e:	e1 9a       	sbi	0x1c, 1	; 28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a0:	87 ea       	ldi	r24, 0xA7	; 167
     4a2:	91 e6       	ldi	r25, 0x61	; 97
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <eeprom_write+0x10>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <eeprom_write+0x16>
     4aa:	00 00       	nop
	_delay_ms(100);
}
     4ac:	08 95       	ret

000004ae <eeprom_read>:

unsigned char eeprom_read(unsigned char address)
{
	while((EECR & (1 << EEWE)) == 1);			//Wait for EEWE = 0, Which means that EEPROM is ready for read or write
     4ae:	9c b3       	in	r25, 0x1c	; 28
	EEAR = address;							//Put the address of byte you want to read
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	9f bb       	out	0x1f, r25	; 31
     4b4:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1 << EERE);					//Set EERE to 1
     4b6:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;							//Return the desired byte
     4b8:	8d b3       	in	r24, 0x1d	; 29
     4ba:	08 95       	ret

000004bc <set_externalInterrupt>:
#include <avr/io.h>
#include "external_interrupts.h"

void set_externalInterrupt(unsigned char interrupt_num, unsigned char state)
{
	switch(interrupt_num)
     4bc:	86 30       	cpi	r24, 0x06	; 6
     4be:	c9 f0       	breq	.+50     	; 0x4f2 <set_externalInterrupt+0x36>
     4c0:	87 30       	cpi	r24, 0x07	; 7
     4c2:	59 f0       	breq	.+22     	; 0x4da <set_externalInterrupt+0x1e>
     4c4:	85 30       	cpi	r24, 0x05	; 5
     4c6:	09 f0       	breq	.+2      	; 0x4ca <set_externalInterrupt+0xe>
     4c8:	08 95       	ret
				MCUCR |= (1 << ISC10) | (1 << ISC11);
			GICR |= (1 << INT1);
		break;
		
		case INT2:
			if (state == FALLING_EDGE)
     4ca:	63 30       	cpi	r22, 0x03	; 3
     4cc:	41 f1       	breq	.+80     	; 0x51e <set_externalInterrupt+0x62>
				MCUCR &= ~(1 << ISC2);
			else if (state == RISING_EDGE)
     4ce:	62 30       	cpi	r22, 0x02	; 2
     4d0:	51 f1       	breq	.+84     	; 0x526 <set_externalInterrupt+0x6a>
				MCUCR |= (1 << ISC2);
			GICR |= (1 << INT2);
     4d2:	8b b7       	in	r24, 0x3b	; 59
     4d4:	80 62       	ori	r24, 0x20	; 32
     4d6:	8b bf       	out	0x3b, r24	; 59
     4d8:	08 95       	ret
				MCUCR |= ((1 << ISC00) | (1 << ISC01));	
			GICR |= (1 << INT0);
		break;
		
		case INT1:
			if (state == LOW_LEVEL)
     4da:	66 23       	and	r22, r22
     4dc:	d9 f0       	breq	.+54     	; 0x514 <set_externalInterrupt+0x58>
				MCUCR = 0x00;
			else if (state == CHANGE)
     4de:	61 30       	cpi	r22, 0x01	; 1
     4e0:	31 f1       	breq	.+76     	; 0x52e <set_externalInterrupt+0x72>
				MCUCR |= (1 << ISC10);
			else if (state == FALLING_EDGE)
     4e2:	63 30       	cpi	r22, 0x03	; 3
     4e4:	61 f1       	breq	.+88     	; 0x53e <set_externalInterrupt+0x82>
				MCUCR |= (1 << ISC11);
			else if (state == RISING_EDGE)
     4e6:	62 30       	cpi	r22, 0x02	; 2
     4e8:	b1 f4       	brne	.+44     	; 0x516 <set_externalInterrupt+0x5a>
				MCUCR |= (1 << ISC10) | (1 << ISC11);
     4ea:	85 b7       	in	r24, 0x35	; 53
     4ec:	8c 60       	ori	r24, 0x0C	; 12
     4ee:	85 bf       	out	0x35, r24	; 53
     4f0:	12 c0       	rjmp	.+36     	; 0x516 <set_externalInterrupt+0x5a>
void set_externalInterrupt(unsigned char interrupt_num, unsigned char state)
{
	switch(interrupt_num)
	{
		case INT0:
			if (state == LOW_LEVEL)
     4f2:	66 23       	and	r22, r22
     4f4:	51 f0       	breq	.+20     	; 0x50a <set_externalInterrupt+0x4e>
				MCUCR = 0x00;
			else if (state == CHANGE)
     4f6:	61 30       	cpi	r22, 0x01	; 1
     4f8:	f1 f0       	breq	.+60     	; 0x536 <set_externalInterrupt+0x7a>
				MCUCR |= (1 << ISC00);
			else if (state == FALLING_EDGE)
     4fa:	63 30       	cpi	r22, 0x03	; 3
     4fc:	21 f1       	breq	.+72     	; 0x546 <set_externalInterrupt+0x8a>
				MCUCR |= (1 << ISC01);
			else if (state == RISING_EDGE)	
     4fe:	62 30       	cpi	r22, 0x02	; 2
     500:	29 f4       	brne	.+10     	; 0x50c <set_externalInterrupt+0x50>
				MCUCR |= ((1 << ISC00) | (1 << ISC01));	
     502:	85 b7       	in	r24, 0x35	; 53
     504:	83 60       	ori	r24, 0x03	; 3
     506:	85 bf       	out	0x35, r24	; 53
     508:	01 c0       	rjmp	.+2      	; 0x50c <set_externalInterrupt+0x50>
{
	switch(interrupt_num)
	{
		case INT0:
			if (state == LOW_LEVEL)
				MCUCR = 0x00;
     50a:	15 be       	out	0x35, r1	; 53
				MCUCR |= (1 << ISC00);
			else if (state == FALLING_EDGE)
				MCUCR |= (1 << ISC01);
			else if (state == RISING_EDGE)	
				MCUCR |= ((1 << ISC00) | (1 << ISC01));	
			GICR |= (1 << INT0);
     50c:	8b b7       	in	r24, 0x3b	; 59
     50e:	80 64       	ori	r24, 0x40	; 64
     510:	8b bf       	out	0x3b, r24	; 59
		break;
     512:	08 95       	ret
		
		case INT1:
			if (state == LOW_LEVEL)
				MCUCR = 0x00;
     514:	15 be       	out	0x35, r1	; 53
				MCUCR |= (1 << ISC10);
			else if (state == FALLING_EDGE)
				MCUCR |= (1 << ISC11);
			else if (state == RISING_EDGE)
				MCUCR |= (1 << ISC10) | (1 << ISC11);
			GICR |= (1 << INT1);
     516:	8b b7       	in	r24, 0x3b	; 59
     518:	80 68       	ori	r24, 0x80	; 128
     51a:	8b bf       	out	0x3b, r24	; 59
		break;
     51c:	08 95       	ret
		
		case INT2:
			if (state == FALLING_EDGE)
				MCUCR &= ~(1 << ISC2);
     51e:	85 b7       	in	r24, 0x35	; 53
     520:	8f 7b       	andi	r24, 0xBF	; 191
     522:	85 bf       	out	0x35, r24	; 53
     524:	d6 cf       	rjmp	.-84     	; 0x4d2 <set_externalInterrupt+0x16>
			else if (state == RISING_EDGE)
				MCUCR |= (1 << ISC2);
     526:	85 b7       	in	r24, 0x35	; 53
     528:	80 64       	ori	r24, 0x40	; 64
     52a:	85 bf       	out	0x35, r24	; 53
     52c:	d2 cf       	rjmp	.-92     	; 0x4d2 <set_externalInterrupt+0x16>
		
		case INT1:
			if (state == LOW_LEVEL)
				MCUCR = 0x00;
			else if (state == CHANGE)
				MCUCR |= (1 << ISC10);
     52e:	85 b7       	in	r24, 0x35	; 53
     530:	84 60       	ori	r24, 0x04	; 4
     532:	85 bf       	out	0x35, r24	; 53
     534:	f0 cf       	rjmp	.-32     	; 0x516 <set_externalInterrupt+0x5a>
	{
		case INT0:
			if (state == LOW_LEVEL)
				MCUCR = 0x00;
			else if (state == CHANGE)
				MCUCR |= (1 << ISC00);
     536:	85 b7       	in	r24, 0x35	; 53
     538:	81 60       	ori	r24, 0x01	; 1
     53a:	85 bf       	out	0x35, r24	; 53
     53c:	e7 cf       	rjmp	.-50     	; 0x50c <set_externalInterrupt+0x50>
			if (state == LOW_LEVEL)
				MCUCR = 0x00;
			else if (state == CHANGE)
				MCUCR |= (1 << ISC10);
			else if (state == FALLING_EDGE)
				MCUCR |= (1 << ISC11);
     53e:	85 b7       	in	r24, 0x35	; 53
     540:	88 60       	ori	r24, 0x08	; 8
     542:	85 bf       	out	0x35, r24	; 53
     544:	e8 cf       	rjmp	.-48     	; 0x516 <set_externalInterrupt+0x5a>
			if (state == LOW_LEVEL)
				MCUCR = 0x00;
			else if (state == CHANGE)
				MCUCR |= (1 << ISC00);
			else if (state == FALLING_EDGE)
				MCUCR |= (1 << ISC01);
     546:	85 b7       	in	r24, 0x35	; 53
     548:	82 60       	ori	r24, 0x02	; 2
     54a:	85 bf       	out	0x35, r24	; 53
     54c:	df cf       	rjmp	.-66     	; 0x50c <set_externalInterrupt+0x50>

0000054e <get_key>:

extern unsigned char get_key (void)
{
  unsigned char colloc, rowloc;
  
  KEY_DDR = 0xF0;                                                               //Columns bits are output and Rows' bits are input
     54e:	80 ef       	ldi	r24, 0xF0	; 240
     550:	84 bb       	out	0x14, r24	; 20
  KEY_PRT = 0xFF;  
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	85 bb       	out	0x15, r24	; 21
  KEY_PIN = 0x0F;
     556:	8f e0       	ldi	r24, 0x0F	; 15
     558:	83 bb       	out	0x13, r24	; 19
  
      do
          {
              KEY_PRT &= 0x0F;                                                  //ground all rows at once
     55a:	85 b3       	in	r24, 0x15	; 21
     55c:	8f 70       	andi	r24, 0x0F	; 15
     55e:	85 bb       	out	0x15, r24	; 21
              colloc = (KEY_PIN & 0x0F);                                        //read the columns
     560:	83 b3       	in	r24, 0x13	; 19
     562:	8f 70       	andi	r24, 0x0F	; 15
          } while(colloc != 0x0F);                                              //check untill all keys are released
     564:	8f 30       	cpi	r24, 0x0F	; 15
     566:	c9 f7       	brne	.-14     	; 0x55a <get_key+0xc>
     568:	87 e8       	ldi	r24, 0x87	; 135
     56a:	93 e1       	ldi	r25, 0x13	; 19
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	f1 f7       	brne	.-4      	; 0x56c <get_key+0x1e>
     570:	00 c0       	rjmp	.+0      	; 0x572 <get_key+0x24>
     572:	00 00       	nop
      do
        { 
            do
              {
                  _delay_ms(20);                                        //Delay to allow the user to enter the required Key
                  colloc = (KEY_PIN & 0x0F);                                    //read the columns
     574:	83 b3       	in	r24, 0x13	; 19
     576:	8f 70       	andi	r24, 0x0F	; 15
              } while(colloc != 0x0F);                                          //wait for key press
     578:	8f 30       	cpi	r24, 0x0F	; 15
     57a:	b1 f7       	brne	.-20     	; 0x568 <get_key+0x1a>
     57c:	87 e8       	ldi	r24, 0x87	; 135
     57e:	93 e1       	ldi	r25, 0x13	; 19
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <get_key+0x32>
     584:	00 c0       	rjmp	.+0      	; 0x586 <get_key+0x38>
     586:	00 00       	nop
          
            _delay_ms(20);                                              //Delay for debounce
            colloc = (KEY_PIN & 0x0F);                                          //read the columns
     588:	83 b3       	in	r24, 0x13	; 19
     58a:	8f 70       	andi	r24, 0x0F	; 15
        } while(colloc != 0x0F);                                                //wait for key press
     58c:	8f 30       	cpi	r24, 0x0F	; 15
     58e:	61 f7       	brne	.-40     	; 0x568 <get_key+0x1a>
      
      while(1)
      {
        KEY_PRT = 0xEF;                                                         //ground row 0
     590:	9f ee       	ldi	r25, 0xEF	; 239
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 0;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xDF;                                                         //ground row 1
     592:	2f ed       	ldi	r18, 0xDF	; 223
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 1;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xBF;                                                         //ground row 2
     594:	3f eb       	ldi	r19, 0xBF	; 191
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 2;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0x7F;                                                         //ground row 3
     596:	4f e7       	ldi	r20, 0x7F	; 127
            colloc = (KEY_PIN & 0x0F);                                          //read the columns
        } while(colloc != 0x0F);                                                //wait for key press
      
      while(1)
      {
        KEY_PRT = 0xEF;                                                         //ground row 0
     598:	95 bb       	out	0x15, r25	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
     59a:	83 b3       	in	r24, 0x13	; 19
     59c:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
     59e:	8f 30       	cpi	r24, 0x0F	; 15
     5a0:	41 f5       	brne	.+80     	; 0x5f2 <get_key+0xa4>
        {
          rowloc = 0;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xDF;                                                         //ground row 1
     5a2:	25 bb       	out	0x15, r18	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
     5a4:	83 b3       	in	r24, 0x13	; 19
     5a6:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
     5a8:	8f 30       	cpi	r24, 0x0F	; 15
     5aa:	01 f5       	brne	.+64     	; 0x5ec <get_key+0x9e>
        {
          rowloc = 1;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xBF;                                                         //ground row 2
     5ac:	35 bb       	out	0x15, r19	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
     5ae:	83 b3       	in	r24, 0x13	; 19
     5b0:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
     5b2:	8f 30       	cpi	r24, 0x0F	; 15
     5b4:	09 f5       	brne	.+66     	; 0x5f8 <get_key+0xaa>
        {
          rowloc = 2;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0x7F;                                                         //ground row 3
     5b6:	45 bb       	out	0x15, r20	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
     5b8:	83 b3       	in	r24, 0x13	; 19
     5ba:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
     5bc:	8f 30       	cpi	r24, 0x0F	; 15
     5be:	61 f3       	breq	.-40     	; 0x598 <get_key+0x4a>
     5c0:	e3 e0       	ldi	r30, 0x03	; 3
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
      }
      
      
     //check column and save result in key
      if(colloc == 0x0E)
        return (keypad[rowloc][0]);
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	ee 0f       	add	r30, r30
     5ca:	ff 1f       	adc	r31, r31
     5cc:	e0 5a       	subi	r30, 0xA0	; 160
     5ce:	ff 4f       	sbci	r31, 0xFF	; 255
        }
      }
      
      
     //check column and save result in key
      if(colloc == 0x0E)
     5d0:	8e 30       	cpi	r24, 0x0E	; 14
     5d2:	31 f0       	breq	.+12     	; 0x5e0 <get_key+0x92>
        return (keypad[rowloc][0]);
      else if(colloc == 0x0D)
     5d4:	8d 30       	cpi	r24, 0x0D	; 13
     5d6:	31 f0       	breq	.+12     	; 0x5e4 <get_key+0x96>
        return (keypad[rowloc][1]);
      else if(colloc == 0x0B)
     5d8:	8b 30       	cpi	r24, 0x0B	; 11
     5da:	31 f0       	breq	.+12     	; 0x5e8 <get_key+0x9a>
        return (keypad[rowloc][2]);
      else 
        return (keypad[rowloc][3]);  
     5dc:	83 81       	ldd	r24, Z+3	; 0x03
}  
     5de:	08 95       	ret
      }
      
      
     //check column and save result in key
      if(colloc == 0x0E)
        return (keypad[rowloc][0]);
     5e0:	80 81       	ld	r24, Z
     5e2:	08 95       	ret
      else if(colloc == 0x0D)
        return (keypad[rowloc][1]);
     5e4:	81 81       	ldd	r24, Z+1	; 0x01
     5e6:	08 95       	ret
      else if(colloc == 0x0B)
        return (keypad[rowloc][2]);
     5e8:	82 81       	ldd	r24, Z+2	; 0x02
     5ea:	08 95       	ret
          rowloc = 0;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xDF;                                                         //ground row 1
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
        if (colloc != 0x0F)                                                     //column detected
     5ec:	e1 e0       	ldi	r30, 0x01	; 1
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	e9 cf       	rjmp	.-46     	; 0x5c4 <get_key+0x76>
      
      while(1)
      {
        KEY_PRT = 0xEF;                                                         //ground row 0
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
        if (colloc != 0x0F)                                                     //column detected
     5f2:	e0 e0       	ldi	r30, 0x00	; 0
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	e6 cf       	rjmp	.-52     	; 0x5c4 <get_key+0x76>
          rowloc = 1;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xBF;                                                         //ground row 2
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
        if (colloc != 0x0F)                                                     //column detected
     5f8:	e2 e0       	ldi	r30, 0x02	; 2
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	e3 cf       	rjmp	.-58     	; 0x5c4 <get_key+0x76>

000005fe <delay_us>:
#include "LCD 4-bit.h"
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <delay_us+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     600:	00 00       	nop
     602:	01 97       	sbiw	r24, 0x01	; 1
	while(d--) 
     604:	00 97       	sbiw	r24, 0x00	; 0
     606:	e1 f7       	brne	.-8      	; 0x600 <delay_us+0x2>
     608:	08 95       	ret

0000060a <delay_ms>:
		_delay_us(1);
	}
}
//*******************************************************************************
void delay_ms(int d)
{
     60a:	07 c0       	rjmp	.+14     	; 0x61a <delay_ms+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     60c:	e9 ef       	ldi	r30, 0xF9	; 249
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <delay_ms+0x6>
     614:	00 c0       	rjmp	.+0      	; 0x616 <delay_ms+0xc>
     616:	00 00       	nop
     618:	01 97       	sbiw	r24, 0x01	; 1
	while(d--)
     61a:	00 97       	sbiw	r24, 0x00	; 0
     61c:	b9 f7       	brne	.-18     	; 0x60c <delay_ms+0x2>
     61e:	08 95       	ret

00000620 <lcdCommand>:
	delay_us(100);                                                     //wait
}
//******************************************************************************
void lcdCommand(unsigned char cmnd)
{
	LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);                             //taking high nibble of cmnd
     620:	2b b3       	in	r18, 0x1b	; 27
     622:	98 2f       	mov	r25, r24
     624:	90 7f       	andi	r25, 0xF0	; 240
     626:	2f 70       	andi	r18, 0x0F	; 15
     628:	92 2b       	or	r25, r18
     62a:	9b bb       	out	0x1b, r25	; 27
	LCD_PRT &= ~(1<<LCD_RS);	       		                        //RS = 0 for command (IR Register)
     62c:	d8 98       	cbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);			                        //RW = 0 for Write
     62e:	d9 98       	cbi	0x1b, 1	; 27
 	LCD_PRT |= (1<<LCD_EN);			                                //EN = 1 for H-to-L			                                //wait to make EN wider (min 450 ns)
     630:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     632:	00 00       	nop
	delay_us(1);
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L	
     634:	da 98       	cbi	0x1b, 2	; 27
     636:	24 e1       	ldi	r18, 0x14	; 20
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	00 00       	nop
     63c:	21 50       	subi	r18, 0x01	; 1
     63e:	30 40       	sbci	r19, 0x00	; 0
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     640:	e1 f7       	brne	.-8      	; 0x63a <lcdCommand+0x1a>
	delay_us(1);
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L	
        
	delay_us(20);                                                     //Wait some time
        
	LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);                               //taking low nibble of cmnd
     642:	9b b3       	in	r25, 0x1b	; 27
     644:	82 95       	swap	r24
     646:	80 7f       	andi	r24, 0xF0	; 240
     648:	9f 70       	andi	r25, 0x0F	; 15
     64a:	89 2b       	or	r24, r25
     64c:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT |= (1<<LCD_EN);			                                //EN = 1 for H-to-L
     64e:	da 9a       	sbi	0x1b, 2	; 27
     650:	00 00       	nop
	delay_us(1);			                                //wait to make enable wider (min 450 ns)
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
     652:	da 98       	cbi	0x1b, 2	; 27
}
     654:	08 95       	ret

00000656 <lcd_init>:
}
//******************************************************************************
void lcd_init(void)
{       
    //lcd_reset();
	LCD_DDR = 0xFF;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	8a bb       	out	0x1a, r24	; 26
     65a:	80 ed       	ldi	r24, 0xD0	; 208
     65c:	97 e0       	ldi	r25, 0x07	; 7
     65e:	00 00       	nop
     660:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     662:	e9 f7       	brne	.-6      	; 0x65e <lcd_init+0x8>
{       
    //lcd_reset();
	LCD_DDR = 0xFF;
	delay_us(2000);
    /* Function set */
    lcdCommand(0x33);							   //$28 for 4-bit mode
     664:	83 e3       	ldi	r24, 0x33	; 51
     666:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     66a:	84 e6       	ldi	r24, 0x64	; 100
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	00 00       	nop
     670:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     672:	e9 f7       	brne	.-6      	; 0x66e <lcd_init+0x18>
    /* Function set */
    lcdCommand(0x33);							   //$28 for 4-bit mode
	delay_us(100);                                                     //wait
        
    /* Display ON/OFF Control */
	lcdCommand(0x32);                               //display on, cursor on, blinking
     674:	82 e3       	ldi	r24, 0x32	; 50
     676:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     67a:	84 e6       	ldi	r24, 0x64	; 100
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	00 00       	nop
     680:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     682:	e9 f7       	brne	.-6      	; 0x67e <lcd_init+0x28>
    /* Display ON/OFF Control */
	lcdCommand(0x32);                               //display on, cursor on, blinking
	delay_us(100);														//wait
        
   
	lcdCommand(LCD_FUNCTION_4BIT_2LINES);
     684:	88 e2       	ldi	r24, 0x28	; 40
     686:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     68a:	84 e6       	ldi	r24, 0x64	; 100
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	00 00       	nop
     690:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     692:	e9 f7       	brne	.-6      	; 0x68e <lcd_init+0x38>
        
   
	lcdCommand(LCD_FUNCTION_4BIT_2LINES);
	delay_us(100);					                        //clear LCD
	
	lcdCommand(LCD_DISP_ON);
     694:	8c e0       	ldi	r24, 0x0C	; 12
     696:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     69a:	84 e6       	ldi	r24, 0x64	; 100
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	00 00       	nop
     6a0:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     6a2:	e9 f7       	brne	.-6      	; 0x69e <lcd_init+0x48>
	delay_us(100);					                        //clear LCD
	
	lcdCommand(LCD_DISP_ON);
	delay_us(100);
	
	lcdCommand(CLEAR_DISPLAY);
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     6aa:	80 ed       	ldi	r24, 0xD0	; 208
     6ac:	97 e0       	ldi	r25, 0x07	; 7
     6ae:	00 00       	nop
     6b0:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     6b2:	e9 f7       	brne	.-6      	; 0x6ae <lcd_init+0x58>
	
	lcdCommand(CLEAR_DISPLAY);
	delay_us(2000);														//wait
        
    /* Entry mode set */
	lcdCommand(LCD_ENTRY_INC_);									//shift && cursor right
     6b4:	86 e0       	ldi	r24, 0x06	; 6
     6b6:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     6ba:	84 e6       	ldi	r24, 0x64	; 100
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	00 00       	nop
     6c0:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     6c2:	e9 f7       	brne	.-6      	; 0x6be <lcd_init+0x68>
	delay_us(2000);														//wait
        
    /* Entry mode set */
	lcdCommand(LCD_ENTRY_INC_);									//shift && cursor right
	delay_us(100);                                                     //wait
}
     6c4:	08 95       	ret

000006c6 <lcd_reset>:
	}
}
//******************************************************************************
void lcd_reset(void)
{
	LCD_DDR = 0xFF;					                        //LCD port is output
     6c6:	8f ef       	ldi	r24, 0xFF	; 255
     6c8:	8a bb       	out	0x1a, r24	; 26
	LCD_PRT &= ~(1<<LCD_EN);			                    //LCD_EN = 0
     6ca:	da 98       	cbi	0x1b, 2	; 27
     6cc:	80 e2       	ldi	r24, 0x20	; 32
     6ce:	9e e4       	ldi	r25, 0x4E	; 78
     6d0:	00 00       	nop
     6d2:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     6d4:	e9 f7       	brne	.-6      	; 0x6d0 <lcd_reset+0xa>
void lcd_reset(void)
{
	LCD_DDR = 0xFF;					                        //LCD port is output
	LCD_PRT &= ~(1<<LCD_EN);			                    //LCD_EN = 0
	delay_us(20000);				                        //wait for stable power (more than 15 ms)
	lcdCommand(0x03);				                        //$30 for reset
     6d6:	83 e0       	ldi	r24, 0x03	; 3
     6d8:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     6dc:	80 e1       	ldi	r24, 0x10	; 16
     6de:	97 e2       	ldi	r25, 0x27	; 39
     6e0:	00 00       	nop
     6e2:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     6e4:	e9 f7       	brne	.-6      	; 0x6e0 <lcd_reset+0x1a>
	LCD_DDR = 0xFF;					                        //LCD port is output
	LCD_PRT &= ~(1<<LCD_EN);			                    //LCD_EN = 0
	delay_us(20000);				                        //wait for stable power (more than 15 ms)
	lcdCommand(0x03);				                        //$30 for reset
	delay_us(10000);				                        //wait for more than (4.1 ms)
    lcdCommand(0x03);										//$30 for reset
     6e6:	83 e0       	ldi	r24, 0x03	; 3
     6e8:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     6ec:	88 ee       	ldi	r24, 0xE8	; 232
     6ee:	93 e0       	ldi	r25, 0x03	; 3
     6f0:	00 00       	nop
     6f2:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     6f4:	e9 f7       	brne	.-6      	; 0x6f0 <lcd_reset+0x2a>
	delay_us(20000);				                        //wait for stable power (more than 15 ms)
	lcdCommand(0x03);				                        //$30 for reset
	delay_us(10000);				                        //wait for more than (4.1 ms)
    lcdCommand(0x03);										//$30 for reset
	delay_us(1000);											//wait (for more than (100 us)
    lcdCommand(0x03);										//$30 for reset
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     6fc:	88 ee       	ldi	r24, 0xE8	; 232
     6fe:	93 e0       	ldi	r25, 0x03	; 3
     700:	00 00       	nop
     702:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     704:	e9 f7       	brne	.-6      	; 0x700 <lcd_reset+0x3a>
	delay_us(10000);				                        //wait for more than (4.1 ms)
    lcdCommand(0x03);										//$30 for reset
	delay_us(1000);											//wait (for more than (100 us)
    lcdCommand(0x03);										//$30 for reset
	delay_us(1000);                                         //wait (for more than 100 us)
    lcdCommand(0x02);										//$20 for reset
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     70c:	88 ee       	ldi	r24, 0xE8	; 232
     70e:	93 e0       	ldi	r25, 0x03	; 3
     710:	00 00       	nop
     712:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     714:	e9 f7       	brne	.-6      	; 0x710 <lcd_reset+0x4a>
	delay_us(1000);											//wait (for more than (100 us)
    lcdCommand(0x03);										//$30 for reset
	delay_us(1000);                                         //wait (for more than 100 us)
    lcdCommand(0x02);										//$20 for reset
	delay_us(1000);                                         //wait (for more than 100 us)
}
     716:	08 95       	ret

00000718 <lcdData>:
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
}
//******************************************************************************
void lcdData (unsigned char data)
{
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);	                        //taking high nibble of data
     718:	2b b3       	in	r18, 0x1b	; 27
     71a:	98 2f       	mov	r25, r24
     71c:	90 7f       	andi	r25, 0xF0	; 240
     71e:	2f 70       	andi	r18, 0x0F	; 15
     720:	92 2b       	or	r25, r18
     722:	9b bb       	out	0x1b, r25	; 27
	LCD_PRT |= (1<<LCD_RS);												//RS = 1 for data (DR Register)
     724:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);											//RW = 0 for Write
     726:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PRT |= (1<<LCD_EN);												//EN = 1 for H-to-L
     728:	da 9a       	sbi	0x1b, 2	; 27
     72a:	00 00       	nop
																		 
	delay_us(1);														//wait to make enable wider (min 450 ns)
	
	LCD_PRT &= ~(1<<LCD_EN);											//EN = 0 for H-to-L    
     72c:	da 98       	cbi	0x1b, 2	; 27
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);                           //taking low nibble of data
     72e:	9b b3       	in	r25, 0x1b	; 27
     730:	82 95       	swap	r24
     732:	80 7f       	andi	r24, 0xF0	; 240
     734:	9f 70       	andi	r25, 0x0F	; 15
     736:	89 2b       	or	r24, r25
     738:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT |= (1<<LCD_EN);						                        //EN = 1 for H-to-L
     73a:	da 9a       	sbi	0x1b, 2	; 27
     73c:	00 00       	nop
	delay_us(1);							                            //wait to make enable wider
	LCD_PRT &= ~(1<<LCD_EN);					                        //EN = 0 for H-to-L
     73e:	da 98       	cbi	0x1b, 2	; 27
}
     740:	08 95       	ret

00000742 <lcd_gotoxy>:
//******************************************************************************
void lcd_gotoxy(unsigned char x, unsigned char y)
{
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	00 d0       	rcall	.+0      	; 0x748 <lcd_gotoxy+0x6>
     748:	00 d0       	rcall	.+0      	; 0x74a <lcd_gotoxy+0x8>
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
     74e:	90 e8       	ldi	r25, 0x80	; 128
     750:	99 83       	std	Y+1, r25	; 0x01
     752:	90 ec       	ldi	r25, 0xC0	; 192
     754:	9a 83       	std	Y+2, r25	; 0x02
     756:	94 e9       	ldi	r25, 0x94	; 148
     758:	9b 83       	std	Y+3, r25	; 0x03
     75a:	94 ed       	ldi	r25, 0xD4	; 212
     75c:	9c 83       	std	Y+4, r25	; 0x04
	lcdCommand(firstcharAdr[y-1] + x - 1);
     75e:	81 50       	subi	r24, 0x01	; 1
     760:	fe 01       	movw	r30, r28
     762:	e6 0f       	add	r30, r22
     764:	f1 1d       	adc	r31, r1
     766:	90 81       	ld	r25, Z
     768:	89 0f       	add	r24, r25
     76a:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     76e:	84 e6       	ldi	r24, 0x64	; 100
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	00 00       	nop
     774:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     776:	e9 f7       	brne	.-6      	; 0x772 <lcd_gotoxy+0x30>
void lcd_gotoxy(unsigned char x, unsigned char y)
{
	unsigned char firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
	lcdCommand(firstcharAdr[y-1] + x - 1);
	delay_us(100);
}
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <lcd_cursor_on>:
//*******************************************************************************
void lcd_cursor_on(void)
{
	lcdCommand(LCD_DISP_ON_CURSOR_BLINK);
     786:	8f e0       	ldi	r24, 0x0F	; 15
     788:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     78c:	84 e6       	ldi	r24, 0x64	; 100
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	00 00       	nop
     792:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     794:	e9 f7       	brne	.-6      	; 0x790 <lcd_cursor_on+0xa>
//*******************************************************************************
void lcd_cursor_on(void)
{
	lcdCommand(LCD_DISP_ON_CURSOR_BLINK);
	delay_us(100);
}
     796:	08 95       	ret

00000798 <lcd_cursor_off>:
//*******************************************************************************
void lcd_cursor_off(void)
{
	lcdCommand(LCD_DISP_ON);
     798:	8c e0       	ldi	r24, 0x0C	; 12
     79a:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     79e:	84 e6       	ldi	r24, 0x64	; 100
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	00 00       	nop
     7a4:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     7a6:	e9 f7       	brne	.-6      	; 0x7a2 <lcd_cursor_off+0xa>
//*******************************************************************************
void lcd_cursor_off(void)
{
	lcdCommand(LCD_DISP_ON);
	delay_us(100);
}
     7a8:	08 95       	ret

000007aa <lcd_move_cursor_left>:
//*******************************************************************************
void lcd_move_cursor_left(void)
{
	lcdCommand(LCD_MOVE_CURSOR_LEFT);
     7aa:	80 e1       	ldi	r24, 0x10	; 16
     7ac:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     7b0:	84 e6       	ldi	r24, 0x64	; 100
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	00 00       	nop
     7b6:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     7b8:	e9 f7       	brne	.-6      	; 0x7b4 <lcd_move_cursor_left+0xa>
//*******************************************************************************
void lcd_move_cursor_left(void)
{
	lcdCommand(LCD_MOVE_CURSOR_LEFT);
	delay_us(100);
}
     7ba:	08 95       	ret

000007bc <lcd_move_cursor_right>:

//*******************************************************************************
void lcd_move_cursor_right(void)
{
	lcdCommand(LCD_MOVE_CURSOR_RIGHT);
     7bc:	84 e1       	ldi	r24, 0x14	; 20
     7be:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     7c2:	84 e6       	ldi	r24, 0x64	; 100
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	00 00       	nop
     7c8:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     7ca:	e9 f7       	brne	.-6      	; 0x7c6 <lcd_move_cursor_right+0xa>
//*******************************************************************************
void lcd_move_cursor_right(void)
{
	lcdCommand(LCD_MOVE_CURSOR_RIGHT);
	delay_us(100);
}
     7cc:	08 95       	ret

000007ce <lcd_print>:
//*******************************************************************************
void lcd_print(char *str)
{
	unsigned char i = 0;
	
	while(str[i] != 0)
     7ce:	fc 01       	movw	r30, r24
     7d0:	20 81       	ld	r18, Z
     7d2:	22 23       	and	r18, r18
     7d4:	e1 f0       	breq	.+56     	; 0x80e <lcd_print+0x40>
     7d6:	50 e0       	ldi	r21, 0x00	; 0
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
}
//******************************************************************************
void lcdData (unsigned char data)
{
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);	                        //taking high nibble of data
     7d8:	4b b3       	in	r20, 0x1b	; 27
     7da:	32 2f       	mov	r19, r18
     7dc:	30 7f       	andi	r19, 0xF0	; 240
     7de:	4f 70       	andi	r20, 0x0F	; 15
     7e0:	34 2b       	or	r19, r20
     7e2:	3b bb       	out	0x1b, r19	; 27
	LCD_PRT |= (1<<LCD_RS);												//RS = 1 for data (DR Register)
     7e4:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);											//RW = 0 for Write
     7e6:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PRT |= (1<<LCD_EN);												//EN = 1 for H-to-L
     7e8:	da 9a       	sbi	0x1b, 2	; 27
     7ea:	00 00       	nop
																		 
	delay_us(1);														//wait to make enable wider (min 450 ns)
	
	LCD_PRT &= ~(1<<LCD_EN);											//EN = 0 for H-to-L    
     7ec:	da 98       	cbi	0x1b, 2	; 27
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);                           //taking low nibble of data
     7ee:	3b b3       	in	r19, 0x1b	; 27
     7f0:	22 95       	swap	r18
     7f2:	20 7f       	andi	r18, 0xF0	; 240
     7f4:	3f 70       	andi	r19, 0x0F	; 15
     7f6:	23 2b       	or	r18, r19
     7f8:	2b bb       	out	0x1b, r18	; 27
	LCD_PRT |= (1<<LCD_EN);						                        //EN = 1 for H-to-L
     7fa:	da 9a       	sbi	0x1b, 2	; 27
     7fc:	00 00       	nop
	delay_us(1);							                            //wait to make enable wider
	LCD_PRT &= ~(1<<LCD_EN);					                        //EN = 0 for H-to-L
     7fe:	da 98       	cbi	0x1b, 2	; 27
	unsigned char i = 0;
	
	while(str[i] != 0)
	{
		lcdData(str[i]);
		i++;
     800:	5f 5f       	subi	r21, 0xFF	; 255
//*******************************************************************************
void lcd_print(char *str)
{
	unsigned char i = 0;
	
	while(str[i] != 0)
     802:	fc 01       	movw	r30, r24
     804:	e5 0f       	add	r30, r21
     806:	f1 1d       	adc	r31, r1
     808:	20 81       	ld	r18, Z
     80a:	22 23       	and	r18, r18
     80c:	29 f7       	brne	.-54     	; 0x7d8 <lcd_print+0xa>
     80e:	08 95       	ret

00000810 <lcd_clear>:
	}
}
//*******************************************************************************
void lcd_clear(void)
{
	lcdCommand(CLEAR_DISPLAY);
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     816:	80 ed       	ldi	r24, 0xD0	; 208
     818:	97 e0       	ldi	r25, 0x07	; 7
     81a:	00 00       	nop
     81c:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     81e:	e9 f7       	brne	.-6      	; 0x81a <lcd_clear+0xa>
}
//******************************************************************************
void lcd_gotoxy(unsigned char x, unsigned char y)
{
	unsigned char firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
	lcdCommand(firstcharAdr[y-1] + x - 1);
     820:	80 e8       	ldi	r24, 0x80	; 128
     822:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
     826:	84 e6       	ldi	r24, 0x64	; 100
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	00 00       	nop
     82c:	01 97       	sbiw	r24, 0x01	; 1
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
     82e:	e9 f7       	brne	.-6      	; 0x82a <lcd_clear+0x1a>
void lcd_clear(void)
{
	lcdCommand(CLEAR_DISPLAY);
	delay_us(2000);
	lcd_gotoxy(1,1);
}
     830:	08 95       	ret

00000832 <lcd_generate>:
// LCD_build(1,pattern);
//
//LCD Ports are same as discussed in previous sections
 
void lcd_generate(unsigned char location, unsigned char *ptr)
{
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	eb 01       	movw	r28, r22
	unsigned char i;
	if(location<8)
     838:	88 30       	cpi	r24, 0x08	; 8
     83a:	08 f0       	brcs	.+2      	; 0x83e <lcd_generate+0xc>
     83c:	ae c0       	rjmp	.+348    	; 0x99a <__stack+0x13b>
	{
		lcdCommand(0x40+(location*8));
     83e:	88 0f       	add	r24, r24
     840:	88 0f       	add	r24, r24
     842:	88 0f       	add	r24, r24
     844:	80 5c       	subi	r24, 0xC0	; 192
     846:	0e 94 10 03 	call	0x620	; 0x620 <lcdCommand>
		for(i=0;i<8;i++)
		{
			lcdData(ptr[i]);	
     84a:	88 81       	ld	r24, Y
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
}
//******************************************************************************
void lcdData (unsigned char data)
{
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);	                        //taking high nibble of data
     84c:	2b b3       	in	r18, 0x1b	; 27
     84e:	98 2f       	mov	r25, r24
     850:	90 7f       	andi	r25, 0xF0	; 240
     852:	2f 70       	andi	r18, 0x0F	; 15
     854:	92 2b       	or	r25, r18
     856:	9b bb       	out	0x1b, r25	; 27
	LCD_PRT |= (1<<LCD_RS);												//RS = 1 for data (DR Register)
     858:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);											//RW = 0 for Write
     85a:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PRT |= (1<<LCD_EN);												//EN = 1 for H-to-L
     85c:	da 9a       	sbi	0x1b, 2	; 27
     85e:	00 00       	nop
																		 
	delay_us(1);														//wait to make enable wider (min 450 ns)
	
	LCD_PRT &= ~(1<<LCD_EN);											//EN = 0 for H-to-L    
     860:	da 98       	cbi	0x1b, 2	; 27
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);                           //taking low nibble of data
     862:	9b b3       	in	r25, 0x1b	; 27
     864:	82 95       	swap	r24
     866:	80 7f       	andi	r24, 0xF0	; 240
     868:	9f 70       	andi	r25, 0x0F	; 15
     86a:	89 2b       	or	r24, r25
     86c:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT |= (1<<LCD_EN);						                        //EN = 1 for H-to-L
     86e:	da 9a       	sbi	0x1b, 2	; 27
     870:	00 00       	nop
	delay_us(1);							                            //wait to make enable wider
	LCD_PRT &= ~(1<<LCD_EN);					                        //EN = 0 for H-to-L
     872:	da 98       	cbi	0x1b, 2	; 27
	if(location<8)
	{
		lcdCommand(0x40+(location*8));
		for(i=0;i<8;i++)
		{
			lcdData(ptr[i]);	
     874:	89 81       	ldd	r24, Y+1	; 0x01
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
}
//******************************************************************************
void lcdData (unsigned char data)
{
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);	                        //taking high nibble of data
     876:	2b b3       	in	r18, 0x1b	; 27
     878:	98 2f       	mov	r25, r24
     87a:	90 7f       	andi	r25, 0xF0	; 240
     87c:	2f 70       	andi	r18, 0x0F	; 15
     87e:	92 2b       	or	r25, r18
     880:	9b bb       	out	0x1b, r25	; 27
	LCD_PRT |= (1<<LCD_RS);												//RS = 1 for data (DR Register)
     882:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);											//RW = 0 for Write
     884:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PRT |= (1<<LCD_EN);												//EN = 1 for H-to-L
     886:	da 9a       	sbi	0x1b, 2	; 27
     888:	00 00       	nop
																		 
	delay_us(1);														//wait to make enable wider (min 450 ns)
	
	LCD_PRT &= ~(1<<LCD_EN);											//EN = 0 for H-to-L    
     88a:	da 98       	cbi	0x1b, 2	; 27
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);                           //taking low nibble of data
     88c:	9b b3       	in	r25, 0x1b	; 27
     88e:	82 95       	swap	r24
     890:	80 7f       	andi	r24, 0xF0	; 240
     892:	9f 70       	andi	r25, 0x0F	; 15
     894:	89 2b       	or	r24, r25
     896:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT |= (1<<LCD_EN);						                        //EN = 1 for H-to-L
     898:	da 9a       	sbi	0x1b, 2	; 27
     89a:	00 00       	nop
	delay_us(1);							                            //wait to make enable wider
	LCD_PRT &= ~(1<<LCD_EN);					                        //EN = 0 for H-to-L
     89c:	da 98       	cbi	0x1b, 2	; 27
	if(location<8)
	{
		lcdCommand(0x40+(location*8));
		for(i=0;i<8;i++)
		{
			lcdData(ptr[i]);	
     89e:	8a 81       	ldd	r24, Y+2	; 0x02
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
}
//******************************************************************************
void lcdData (unsigned char data)
{
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);	                        //taking high nibble of data
     8a0:	2b b3       	in	r18, 0x1b	; 27
     8a2:	98 2f       	mov	r25, r24
     8a4:	90 7f       	andi	r25, 0xF0	; 240
     8a6:	2f 70       	andi	r18, 0x0F	; 15
     8a8:	92 2b       	or	r25, r18
     8aa:	9b bb       	out	0x1b, r25	; 27
	LCD_PRT |= (1<<LCD_RS);												//RS = 1 for data (DR Register)
     8ac:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);											//RW = 0 for Write
     8ae:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PRT |= (1<<LCD_EN);												//EN = 1 for H-to-L
     8b0:	da 9a       	sbi	0x1b, 2	; 27
     8b2:	00 00       	nop
																		 
	delay_us(1);														//wait to make enable wider (min 450 ns)
	
	LCD_PRT &= ~(1<<LCD_EN);											//EN = 0 for H-to-L    
     8b4:	da 98       	cbi	0x1b, 2	; 27
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);                           //taking low nibble of data
     8b6:	9b b3       	in	r25, 0x1b	; 27
     8b8:	82 95       	swap	r24
     8ba:	80 7f       	andi	r24, 0xF0	; 240
     8bc:	9f 70       	andi	r25, 0x0F	; 15
     8be:	89 2b       	or	r24, r25
     8c0:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT |= (1<<LCD_EN);						                        //EN = 1 for H-to-L
     8c2:	da 9a       	sbi	0x1b, 2	; 27
     8c4:	00 00       	nop
	delay_us(1);							                            //wait to make enable wider
	LCD_PRT &= ~(1<<LCD_EN);					                        //EN = 0 for H-to-L
     8c6:	da 98       	cbi	0x1b, 2	; 27
	if(location<8)
	{
		lcdCommand(0x40+(location*8));
		for(i=0;i<8;i++)
		{
			lcdData(ptr[i]);	
     8c8:	8b 81       	ldd	r24, Y+3	; 0x03
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
}
//******************************************************************************
void lcdData (unsigned char data)
{
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);	                        //taking high nibble of data
     8ca:	2b b3       	in	r18, 0x1b	; 27
     8cc:	98 2f       	mov	r25, r24
     8ce:	90 7f       	andi	r25, 0xF0	; 240
     8d0:	2f 70       	andi	r18, 0x0F	; 15
     8d2:	92 2b       	or	r25, r18
     8d4:	9b bb       	out	0x1b, r25	; 27
	LCD_PRT |= (1<<LCD_RS);												//RS = 1 for data (DR Register)
     8d6:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);											//RW = 0 for Write
     8d8:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PRT |= (1<<LCD_EN);												//EN = 1 for H-to-L
     8da:	da 9a       	sbi	0x1b, 2	; 27
     8dc:	00 00       	nop
																		 
	delay_us(1);														//wait to make enable wider (min 450 ns)
	
	LCD_PRT &= ~(1<<LCD_EN);											//EN = 0 for H-to-L    
     8de:	da 98       	cbi	0x1b, 2	; 27
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);                           //taking low nibble of data
     8e0:	9b b3       	in	r25, 0x1b	; 27
     8e2:	82 95       	swap	r24
     8e4:	80 7f       	andi	r24, 0xF0	; 240
     8e6:	9f 70       	andi	r25, 0x0F	; 15
     8e8:	89 2b       	or	r24, r25
     8ea:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT |= (1<<LCD_EN);						                        //EN = 1 for H-to-L
     8ec:	da 9a       	sbi	0x1b, 2	; 27
     8ee:	00 00       	nop
	delay_us(1);							                            //wait to make enable wider
	LCD_PRT &= ~(1<<LCD_EN);					                        //EN = 0 for H-to-L
     8f0:	da 98       	cbi	0x1b, 2	; 27
	if(location<8)
	{
		lcdCommand(0x40+(location*8));
		for(i=0;i<8;i++)
		{
			lcdData(ptr[i]);	
     8f2:	8c 81       	ldd	r24, Y+4	; 0x04
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
}
//******************************************************************************
void lcdData (unsigned char data)
{
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);	                        //taking high nibble of data
     8f4:	2b b3       	in	r18, 0x1b	; 27
     8f6:	98 2f       	mov	r25, r24
     8f8:	90 7f       	andi	r25, 0xF0	; 240
     8fa:	2f 70       	andi	r18, 0x0F	; 15
     8fc:	92 2b       	or	r25, r18
     8fe:	9b bb       	out	0x1b, r25	; 27
	LCD_PRT |= (1<<LCD_RS);												//RS = 1 for data (DR Register)
     900:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);											//RW = 0 for Write
     902:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PRT |= (1<<LCD_EN);												//EN = 1 for H-to-L
     904:	da 9a       	sbi	0x1b, 2	; 27
     906:	00 00       	nop
																		 
	delay_us(1);														//wait to make enable wider (min 450 ns)
	
	LCD_PRT &= ~(1<<LCD_EN);											//EN = 0 for H-to-L    
     908:	da 98       	cbi	0x1b, 2	; 27
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);                           //taking low nibble of data
     90a:	9b b3       	in	r25, 0x1b	; 27
     90c:	82 95       	swap	r24
     90e:	80 7f       	andi	r24, 0xF0	; 240
     910:	9f 70       	andi	r25, 0x0F	; 15
     912:	89 2b       	or	r24, r25
     914:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT |= (1<<LCD_EN);						                        //EN = 1 for H-to-L
     916:	da 9a       	sbi	0x1b, 2	; 27
     918:	00 00       	nop
	delay_us(1);							                            //wait to make enable wider
	LCD_PRT &= ~(1<<LCD_EN);					                        //EN = 0 for H-to-L
     91a:	da 98       	cbi	0x1b, 2	; 27
	if(location<8)
	{
		lcdCommand(0x40+(location*8));
		for(i=0;i<8;i++)
		{
			lcdData(ptr[i]);	
     91c:	8d 81       	ldd	r24, Y+5	; 0x05
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
}
//******************************************************************************
void lcdData (unsigned char data)
{
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);	                        //taking high nibble of data
     91e:	2b b3       	in	r18, 0x1b	; 27
     920:	98 2f       	mov	r25, r24
     922:	90 7f       	andi	r25, 0xF0	; 240
     924:	2f 70       	andi	r18, 0x0F	; 15
     926:	92 2b       	or	r25, r18
     928:	9b bb       	out	0x1b, r25	; 27
	LCD_PRT |= (1<<LCD_RS);												//RS = 1 for data (DR Register)
     92a:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);											//RW = 0 for Write
     92c:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PRT |= (1<<LCD_EN);												//EN = 1 for H-to-L
     92e:	da 9a       	sbi	0x1b, 2	; 27
     930:	00 00       	nop
																		 
	delay_us(1);														//wait to make enable wider (min 450 ns)
	
	LCD_PRT &= ~(1<<LCD_EN);											//EN = 0 for H-to-L    
     932:	da 98       	cbi	0x1b, 2	; 27
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);                           //taking low nibble of data
     934:	9b b3       	in	r25, 0x1b	; 27
     936:	82 95       	swap	r24
     938:	80 7f       	andi	r24, 0xF0	; 240
     93a:	9f 70       	andi	r25, 0x0F	; 15
     93c:	89 2b       	or	r24, r25
     93e:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT |= (1<<LCD_EN);						                        //EN = 1 for H-to-L
     940:	da 9a       	sbi	0x1b, 2	; 27
     942:	00 00       	nop
	delay_us(1);							                            //wait to make enable wider
	LCD_PRT &= ~(1<<LCD_EN);					                        //EN = 0 for H-to-L
     944:	da 98       	cbi	0x1b, 2	; 27
	if(location<8)
	{
		lcdCommand(0x40+(location*8));
		for(i=0;i<8;i++)
		{
			lcdData(ptr[i]);	
     946:	8e 81       	ldd	r24, Y+6	; 0x06
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
}
//******************************************************************************
void lcdData (unsigned char data)
{
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);	                        //taking high nibble of data
     948:	2b b3       	in	r18, 0x1b	; 27
     94a:	98 2f       	mov	r25, r24
     94c:	90 7f       	andi	r25, 0xF0	; 240
     94e:	2f 70       	andi	r18, 0x0F	; 15
     950:	92 2b       	or	r25, r18
     952:	9b bb       	out	0x1b, r25	; 27
	LCD_PRT |= (1<<LCD_RS);												//RS = 1 for data (DR Register)
     954:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);											//RW = 0 for Write
     956:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PRT |= (1<<LCD_EN);												//EN = 1 for H-to-L
     958:	da 9a       	sbi	0x1b, 2	; 27
     95a:	00 00       	nop
																		 
	delay_us(1);														//wait to make enable wider (min 450 ns)
	
	LCD_PRT &= ~(1<<LCD_EN);											//EN = 0 for H-to-L    
     95c:	da 98       	cbi	0x1b, 2	; 27
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);                           //taking low nibble of data
     95e:	9b b3       	in	r25, 0x1b	; 27
     960:	82 95       	swap	r24
     962:	80 7f       	andi	r24, 0xF0	; 240
     964:	9f 70       	andi	r25, 0x0F	; 15
     966:	89 2b       	or	r24, r25
     968:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT |= (1<<LCD_EN);						                        //EN = 1 for H-to-L
     96a:	da 9a       	sbi	0x1b, 2	; 27
     96c:	00 00       	nop
	delay_us(1);							                            //wait to make enable wider
	LCD_PRT &= ~(1<<LCD_EN);					                        //EN = 0 for H-to-L
     96e:	da 98       	cbi	0x1b, 2	; 27
	if(location<8)
	{
		lcdCommand(0x40+(location*8));
		for(i=0;i<8;i++)
		{
			lcdData(ptr[i]);	
     970:	8f 81       	ldd	r24, Y+7	; 0x07
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
}
//******************************************************************************
void lcdData (unsigned char data)
{
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);	                        //taking high nibble of data
     972:	2b b3       	in	r18, 0x1b	; 27
     974:	98 2f       	mov	r25, r24
     976:	90 7f       	andi	r25, 0xF0	; 240
     978:	2f 70       	andi	r18, 0x0F	; 15
     97a:	92 2b       	or	r25, r18
     97c:	9b bb       	out	0x1b, r25	; 27
	LCD_PRT |= (1<<LCD_RS);												//RS = 1 for data (DR Register)
     97e:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);											//RW = 0 for Write
     980:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PRT |= (1<<LCD_EN);												//EN = 1 for H-to-L
     982:	da 9a       	sbi	0x1b, 2	; 27
     984:	00 00       	nop
																		 
	delay_us(1);														//wait to make enable wider (min 450 ns)
	
	LCD_PRT &= ~(1<<LCD_EN);											//EN = 0 for H-to-L    
     986:	da 98       	cbi	0x1b, 2	; 27
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);                           //taking low nibble of data
     988:	9b b3       	in	r25, 0x1b	; 27
     98a:	82 95       	swap	r24
     98c:	80 7f       	andi	r24, 0xF0	; 240
     98e:	9f 70       	andi	r25, 0x0F	; 15
     990:	89 2b       	or	r24, r25
     992:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT |= (1<<LCD_EN);						                        //EN = 1 for H-to-L
     994:	da 9a       	sbi	0x1b, 2	; 27
     996:	00 00       	nop
	delay_us(1);							                            //wait to make enable wider
	LCD_PRT &= ~(1<<LCD_EN);					                        //EN = 0 for H-to-L
     998:	da 98       	cbi	0x1b, 2	; 27
		for(i=0;i<8;i++)
		{
			lcdData(ptr[i]);	
		}	
	}
}
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <init>:
//This function initiates the LCD, ADC Modules and ports needed

void init (void)
{
	unsigned char i = 0;							//Just a counter
	lcd_init();										//Initialize LCD
     9a0:	0e 94 2b 03 	call	0x656	; 0x656 <lcd_init>
	adc_init(128,AVCC,RIGHT);						//Initialize ADC
     9a4:	80 e8       	ldi	r24, 0x80	; 128
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	40 e0       	ldi	r20, 0x00	; 0
     9aa:	0e 94 75 00 	call	0xea	; 0xea <adc_init>
	DIO_pinmode('B', MOTOR_IN1, OUTPUT);			//PB0 is an output pin
     9ae:	82 e4       	ldi	r24, 0x42	; 66
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	41 e0       	ldi	r20, 0x01	; 1
     9b4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_pinmode>
	DIO_pinmode('B', MOTOR_IN2, OUTPUT);			//PB1 is an output pin
     9b8:	82 e4       	ldi	r24, 0x42	; 66
     9ba:	61 e0       	ldi	r22, 0x01	; 1
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_pinmode>
	DIO_pinmode('B', MOTOR_EN, OUTPUT);				//PB3 is an output pin
     9c2:	82 e4       	ldi	r24, 0x42	; 66
     9c4:	63 e0       	ldi	r22, 0x03	; 3
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_pinmode>
	DIO_pinmode('B', BUZZER, OUTPUT);				//PB4 is an output pin
     9cc:	82 e4       	ldi	r24, 0x42	; 66
     9ce:	64 e0       	ldi	r22, 0x04	; 4
     9d0:	41 e0       	ldi	r20, 0x01	; 1
     9d2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_pinmode>
	DIO_pinmode('B', SW, INPUT_PULLUP);				//PD0 is an input pin (pull-up)
     9d6:	82 e4       	ldi	r24, 0x42	; 66
     9d8:	62 e0       	ldi	r22, 0x02	; 2
     9da:	42 e0       	ldi	r20, 0x02	; 2
     9dc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_pinmode>
	set_externalInterrupt(INT2, FALLING_EDGE);		//Enable INT0, FALLING_EDGE
     9e0:	85 e0       	ldi	r24, 0x05	; 5
     9e2:	63 e0       	ldi	r22, 0x03	; 3
     9e4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <set_externalInterrupt>
	sei();
     9e8:	78 94       	sei
	eeprom_write(NUM_OF_TRIALS_ADDR,0);
     9ea:	89 e1       	ldi	r24, 0x19	; 25
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write>
	for(i = 1; i < 5; i++)
		eeprom_write(i+1, i+48);
	for(i = 0; i < 10; i++)
		eeprom_write(i+27, i+48);
#endif
}
     9f4:	08 95       	ret

000009f6 <welcome_message>:

//This function prints a welcome message to the user

void welcome_message (void)
{
	lcd_clear();
     9f6:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
	lcd_print(" Password-lock door");
     9fa:	80 e7       	ldi	r24, 0x70	; 112
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
	lcd_gotoxy(1,2);
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	62 e0       	ldi	r22, 0x02	; 2
     a06:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
	lcd_print("      Welcome!");
     a0a:	84 e8       	ldi	r24, 0x84	; 132
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
}
     a12:	08 95       	ret

00000a14 <choose_list>:

//This function lists the possible choices for user

void choose_list (void)
{
	lcd_clear();
     a14:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
	lcd_print("(1)Log-in");
     a18:	83 e9       	ldi	r24, 0x93	; 147
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
	lcd_gotoxy(1,2);
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	62 e0       	ldi	r22, 0x02	; 2
     a24:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
	lcd_print("(2)Change Password");
     a28:	8d e9       	ldi	r24, 0x9D	; 157
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
}
     a30:	08 95       	ret

00000a32 <sign_up>:

//This function asks the user to enter his desired password two times. If the passwords are 
//matched, the password will be saved. Else, It won't and the user should try again.

void sign_up (void)
{
     a32:	af 92       	push	r10
     a34:	bf 92       	push	r11
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	66 97       	sbiw	r28, 0x16	; 22
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	2c e0       	ldi	r18, 0x0C	; 12
     a58:	e2 2e       	mov	r14, r18
     a5a:	f1 2c       	mov	r15, r1
     a5c:	ec 0e       	add	r14, r28
     a5e:	fd 1e       	adc	r15, r29
     a60:	6e 01       	movw	r12, r28
     a62:	08 94       	sec
     a64:	c1 1c       	adc	r12, r1
     a66:	d1 1c       	adc	r13, r1
	unsigned char desired_password_1[11] = {0};		//The first entered password is saved here
     a68:	3b e0       	ldi	r19, 0x0B	; 11
     a6a:	a3 2e       	mov	r10, r19
     a6c:	d7 01       	movw	r26, r14
     a6e:	ea 2d       	mov	r30, r10
     a70:	1d 92       	st	X+, r1
     a72:	ea 95       	dec	r30
     a74:	e9 f7       	brne	.-6      	; 0xa70 <sign_up+0x3e>
	unsigned char desired_password_2[11] = {0};		//The second entered password is saved here
     a76:	d6 01       	movw	r26, r12
     a78:	ea 2d       	mov	r30, r10
     a7a:	1d 92       	st	X+, r1
     a7c:	ea 95       	dec	r30
     a7e:	e9 f7       	brne	.-6      	; 0xa7a <sign_up+0x48>
	unsigned char length_1 = 0;						//Length of first entered password
	unsigned char length_2 = 0;						//Length of second entered password

	lcd_clear();
     a80:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
	lcd_gotoxy(1,1);
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
	lcd_print("Your new Password: ");
     a8c:	80 eb       	ldi	r24, 0xB0	; 176
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
	lcd_gotoxy(1,2);
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	62 e0       	ldi	r22, 0x02	; 2
     a98:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
unsigned char get_password(unsigned char* pass)
{
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
     a9c:	0e 94 c3 03 	call	0x786	; 0x786 <lcd_cursor_on>
	
	for(cnt = 0; cnt <= 10 ; )
     aa0:	00 e0       	ldi	r16, 0x00	; 0
     aa2:	10 e0       	ldi	r17, 0x00	; 0
	{
		key = get_key();
     aa4:	0e 94 a7 02 	call	0x54e	; 0x54e <get_key>
		
		if(key == '#')
     aa8:	83 32       	cpi	r24, 0x23	; 35
     aaa:	91 f0       	breq	.+36     	; 0xad0 <sign_up+0x9e>
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
     aac:	8a 32       	cpi	r24, 0x2A	; 42
     aae:	09 f4       	brne	.+2      	; 0xab2 <sign_up+0x80>
     ab0:	59 c0       	rjmp	.+178    	; 0xb64 <sign_up+0x132>
		}
		else if(key == '*' && cnt <= 0)
		{
			cnt = 0;
		}
		else if(cnt != 10)
     ab2:	0a 30       	cpi	r16, 0x0A	; 10
     ab4:	11 05       	cpc	r17, r1
     ab6:	b1 f3       	breq	.-20     	; 0xaa4 <sign_up+0x72>
		{
			pass[cnt++] = key;
     ab8:	f7 01       	movw	r30, r14
     aba:	e0 0f       	add	r30, r16
     abc:	f1 1f       	adc	r31, r17
     abe:	80 83       	st	Z, r24
     ac0:	0f 5f       	subi	r16, 0xFF	; 255
     ac2:	1f 4f       	sbci	r17, 0xFF	; 255
			lcdData('*');
     ac4:	8a e2       	ldi	r24, 0x2A	; 42
     ac6:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
	
	for(cnt = 0; cnt <= 10 ; )
     aca:	0b 30       	cpi	r16, 0x0B	; 11
     acc:	11 05       	cpc	r17, r1
     ace:	54 f3       	brlt	.-44     	; 0xaa4 <sign_up+0x72>
			pass[cnt++] = key;
			lcdData('*');
		}
	}

	lcd_cursor_off();
     ad0:	0e 94 cc 03 	call	0x798	; 0x798 <lcd_cursor_off>
	
	return cnt;
     ad4:	b0 2e       	mov	r11, r16
	lcd_gotoxy(1,1);
	lcd_print("Your new Password: ");
	lcd_gotoxy(1,2);
	length_1 = get_password(desired_password_1);
	
	lcd_clear();
     ad6:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
	lcd_gotoxy(1,1);
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	61 e0       	ldi	r22, 0x01	; 1
     ade:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
	lcd_print("Re-enter Password: ");
     ae2:	84 ec       	ldi	r24, 0xC4	; 196
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
	lcd_gotoxy(1,2);
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	62 e0       	ldi	r22, 0x02	; 2
     aee:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
unsigned char get_password(unsigned char* pass)
{
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
     af2:	0e 94 c3 03 	call	0x786	; 0x786 <lcd_cursor_on>
	
	for(cnt = 0; cnt <= 10 ; )
     af6:	00 e0       	ldi	r16, 0x00	; 0
     af8:	10 e0       	ldi	r17, 0x00	; 0
	{
		key = get_key();
     afa:	0e 94 a7 02 	call	0x54e	; 0x54e <get_key>
		
		if(key == '#')
     afe:	83 32       	cpi	r24, 0x23	; 35
     b00:	89 f0       	breq	.+34     	; 0xb24 <sign_up+0xf2>
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
     b02:	8a 32       	cpi	r24, 0x2A	; 42
     b04:	e9 f1       	breq	.+122    	; 0xb80 <sign_up+0x14e>
		}
		else if(key == '*' && cnt <= 0)
		{
			cnt = 0;
		}
		else if(cnt != 10)
     b06:	0a 30       	cpi	r16, 0x0A	; 10
     b08:	11 05       	cpc	r17, r1
     b0a:	b9 f3       	breq	.-18     	; 0xafa <sign_up+0xc8>
		{
			pass[cnt++] = key;
     b0c:	f6 01       	movw	r30, r12
     b0e:	e0 0f       	add	r30, r16
     b10:	f1 1f       	adc	r31, r17
     b12:	80 83       	st	Z, r24
     b14:	0f 5f       	subi	r16, 0xFF	; 255
     b16:	1f 4f       	sbci	r17, 0xFF	; 255
			lcdData('*');
     b18:	8a e2       	ldi	r24, 0x2A	; 42
     b1a:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
	
	for(cnt = 0; cnt <= 10 ; )
     b1e:	0b 30       	cpi	r16, 0x0B	; 11
     b20:	11 05       	cpc	r17, r1
     b22:	5c f3       	brlt	.-42     	; 0xafa <sign_up+0xc8>
			pass[cnt++] = key;
			lcdData('*');
		}
	}

	lcd_cursor_off();
     b24:	0e 94 cc 03 	call	0x798	; 0x798 <lcd_cursor_off>

unsigned char compare(unsigned char* pass1, unsigned char* pass2, unsigned char len1, unsigned char len2)
{
	unsigned char i = 0;		//Just a counter variable

	if(len1 != len2)
     b28:	b0 16       	cp	r11, r16
     b2a:	c1 f1       	breq	.+112    	; 0xb9c <sign_up+0x16a>
	}
	
	else
	{
		//Failed operation, try again
		lcd_clear();
     b2c:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
		lcd_gotoxy(1,1);
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
		lcd_print("Failed operation");
     b38:	88 ed       	ldi	r24, 0xD8	; 216
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
		lcd_gotoxy(1,2);
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	62 e0       	ldi	r22, 0x02	; 2
     b44:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
		lcd_print("Plz, Try again");
     b48:	89 ee       	ldi	r24, 0xE9	; 233
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b50:	8f e3       	ldi	r24, 0x3F	; 63
     b52:	9d e0       	ldi	r25, 0x0D	; 13
     b54:	a3 e0       	ldi	r26, 0x03	; 3
     b56:	81 50       	subi	r24, 0x01	; 1
     b58:	90 40       	sbci	r25, 0x00	; 0
     b5a:	a0 40       	sbci	r26, 0x00	; 0
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <sign_up+0x124>
     b5e:	00 c0       	rjmp	.+0      	; 0xb60 <sign_up+0x12e>
     b60:	00 00       	nop
     b62:	84 cf       	rjmp	.-248    	; 0xa6c <sign_up+0x3a>
		if(key == '#')
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
     b64:	01 15       	cp	r16, r1
     b66:	11 05       	cpc	r17, r1
     b68:	09 f4       	brne	.+2      	; 0xb6c <sign_up+0x13a>
     b6a:	9c cf       	rjmp	.-200    	; 0xaa4 <sign_up+0x72>
		{
			lcd_move_cursor_left();
     b6c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			lcdData(' ');
     b70:	80 e2       	ldi	r24, 0x20	; 32
     b72:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
			lcd_move_cursor_left();
     b76:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			cnt --;	
     b7a:	01 50       	subi	r16, 0x01	; 1
     b7c:	10 40       	sbci	r17, 0x00	; 0
     b7e:	a5 cf       	rjmp	.-182    	; 0xaca <sign_up+0x98>
		if(key == '#')
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
     b80:	01 15       	cp	r16, r1
     b82:	11 05       	cpc	r17, r1
     b84:	09 f4       	brne	.+2      	; 0xb88 <sign_up+0x156>
     b86:	b9 cf       	rjmp	.-142    	; 0xafa <sign_up+0xc8>
		{
			lcd_move_cursor_left();
     b88:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			lcdData(' ');
     b8c:	80 e2       	ldi	r24, 0x20	; 32
     b8e:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
			lcd_move_cursor_left();
     b92:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			cnt --;	
     b96:	01 50       	subi	r16, 0x01	; 1
     b98:	10 40       	sbci	r17, 0x00	; 0
     b9a:	c1 cf       	rjmp	.-126    	; 0xb1e <sign_up+0xec>
		return 0;
	}
	
	else
	{
		for(i = 0; i < len1; i++)
     b9c:	bb 20       	and	r11, r11
     b9e:	b9 f0       	breq	.+46     	; 0xbce <sign_up+0x19c>
		{
			if(pass1[i] != pass2[i])
     ba0:	9c 85       	ldd	r25, Y+12	; 0x0c
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	98 17       	cp	r25, r24
     ba6:	11 f6       	brne	.-124    	; 0xb2c <sign_up+0xfa>
/*************************************************************************************************************/

//This function asks the user to enter his desired password two times. If the passwords are 
//matched, the password will be saved. Else, It won't and the user should try again.

void sign_up (void)
     ba8:	fe 01       	movw	r30, r28
     baa:	3d 96       	adiw	r30, 0x0d	; 13
     bac:	de 01       	movw	r26, r28
     bae:	12 96       	adiw	r26, 0x02	; 2
     bb0:	8b 2d       	mov	r24, r11
     bb2:	81 50       	subi	r24, 0x01	; 1
     bb4:	9f 01       	movw	r18, r30
     bb6:	28 0f       	add	r18, r24
     bb8:	31 1d       	adc	r19, r1
     bba:	c9 01       	movw	r24, r18
		return 0;
	}
	
	else
	{
		for(i = 0; i < len1; i++)
     bbc:	e8 17       	cp	r30, r24
     bbe:	f9 07       	cpc	r31, r25
     bc0:	31 f0       	breq	.+12     	; 0xbce <sign_up+0x19c>
		{
			if(pass1[i] != pass2[i])
     bc2:	31 91       	ld	r19, Z+
     bc4:	2d 91       	ld	r18, X+
     bc6:	32 17       	cp	r19, r18
     bc8:	09 f0       	breq	.+2      	; 0xbcc <sign_up+0x19a>
     bca:	b0 cf       	rjmp	.-160    	; 0xb2c <sign_up+0xfa>
     bcc:	f7 cf       	rjmp	.-18     	; 0xbbc <sign_up+0x18a>
	
	
	if(compare(desired_password_1,desired_password_2,length_1,length_2))
	{
		unsigned char i = 0;		//Just a counter variable
		cli();
     bce:	f8 94       	cli
		
		//Save the length of the password in EEPROM (Location = 0x0001)
		eeprom_write(0x0001,length_1);
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	6b 2d       	mov	r22, r11
     bd6:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write>
		
		for(i = 0; i < length_1; i++)
     bda:	bb 20       	and	r11, r11
     bdc:	c1 f0       	breq	.+48     	; 0xc0e <sign_up+0x1dc>
     bde:	87 01       	movw	r16, r14
/*************************************************************************************************************/

//This function asks the user to enter his desired password two times. If the passwords are 
//matched, the password will be saved. Else, It won't and the user should try again.

void sign_up (void)
     be0:	8d e0       	ldi	r24, 0x0D	; 13
     be2:	c8 2e       	mov	r12, r24
     be4:	d1 2c       	mov	r13, r1
     be6:	cc 0e       	add	r12, r28
     be8:	dd 1e       	adc	r13, r29
     bea:	ba 94       	dec	r11
     bec:	cb 0c       	add	r12, r11
     bee:	d1 1c       	adc	r13, r1
     bf0:	92 e0       	ldi	r25, 0x02	; 2
     bf2:	e9 2e       	mov	r14, r25
     bf4:	f1 2c       	mov	r15, r1
		eeprom_write(0x0001,length_1);
		
		for(i = 0; i < length_1; i++)
		{
			//Save the password in EEPROM (In location from 12 to 22)
			eeprom_write(i+2,desired_password_1[i]);
     bf6:	d8 01       	movw	r26, r16
     bf8:	6d 91       	ld	r22, X+
     bfa:	8d 01       	movw	r16, r26
     bfc:	c7 01       	movw	r24, r14
     bfe:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write>
     c02:	08 94       	sec
     c04:	e1 1c       	adc	r14, r1
     c06:	f1 1c       	adc	r15, r1
		cli();
		
		//Save the length of the password in EEPROM (Location = 0x0001)
		eeprom_write(0x0001,length_1);
		
		for(i = 0; i < length_1; i++)
     c08:	0c 15       	cp	r16, r12
     c0a:	1d 05       	cpc	r17, r13
     c0c:	a1 f7       	brne	.-24     	; 0xbf6 <sign_up+0x1c4>
		{
			//Save the password in EEPROM (In location from 12 to 22)
			eeprom_write(i+2,desired_password_1[i]);
		}
		sei();
     c0e:	78 94       	sei
		
		//Successful operation
		lcd_clear();
     c10:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
		lcd_print("  Your password is");
     c14:	88 ef       	ldi	r24, 0xF8	; 248
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
		lcd_gotoxy(1,2);
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	62 e0       	ldi	r22, 0x02	; 2
     c20:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
		lcd_print("      is saved");
     c24:	8b e0       	ldi	r24, 0x0B	; 11
     c26:	91 e0       	ldi	r25, 0x01	; 1
     c28:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
     c2c:	8f e3       	ldi	r24, 0x3F	; 63
     c2e:	9d e0       	ldi	r25, 0x0D	; 13
     c30:	a3 e0       	ldi	r26, 0x03	; 3
     c32:	81 50       	subi	r24, 0x01	; 1
     c34:	90 40       	sbci	r25, 0x00	; 0
     c36:	a0 40       	sbci	r26, 0x00	; 0
     c38:	e1 f7       	brne	.-8      	; 0xc32 <sign_up+0x200>
     c3a:	00 c0       	rjmp	.+0      	; 0xc3c <sign_up+0x20a>
     c3c:	00 00       	nop
		lcd_gotoxy(1,2);
		lcd_print("Plz, Try again");
		_delay_ms(1000);
		sign_up();
	}
}
     c3e:	66 96       	adiw	r28, 0x16	; 22
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	ff 90       	pop	r15
     c54:	ef 90       	pop	r14
     c56:	df 90       	pop	r13
     c58:	cf 90       	pop	r12
     c5a:	bf 90       	pop	r11
     c5c:	af 90       	pop	r10
     c5e:	08 95       	ret

00000c60 <compare>:

unsigned char compare(unsigned char* pass1, unsigned char* pass2, unsigned char len1, unsigned char len2)
{
	unsigned char i = 0;		//Just a counter variable

	if(len1 != len2)
     c60:	42 17       	cp	r20, r18
     c62:	11 f0       	breq	.+4      	; 0xc68 <compare+0x8>
				lcd_gotoxy(1,2);
				lcd_print("pass2 = ");
				lcd_print(itoa((int)pass2[i],(char*)str,10));
				_delay_ms(500);
#endif
				return 0;
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	08 95       	ret
		return 0;
	}
	
	else
	{
		for(i = 0; i < len1; i++)
     c68:	44 23       	and	r20, r20
     c6a:	99 f0       	breq	.+38     	; 0xc92 <compare+0x32>
		{
			if(pass1[i] != pass2[i])
     c6c:	fc 01       	movw	r30, r24
     c6e:	30 81       	ld	r19, Z
     c70:	fb 01       	movw	r30, r22
     c72:	20 81       	ld	r18, Z
     c74:	32 17       	cp	r19, r18
     c76:	b1 f7       	brne	.-20     	; 0xc64 <compare+0x4>
/*************************************************************************************************************/

//This function compares password_1 and password_2 and returns '1' if they are matched and '0' 
//if matching didn't occur.

unsigned char compare(unsigned char* pass1, unsigned char* pass2, unsigned char len1, unsigned char len2)
     c78:	dc 01       	movw	r26, r24
     c7a:	11 96       	adiw	r26, 0x01	; 1
     c7c:	31 96       	adiw	r30, 0x01	; 1
     c7e:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	else
	{
		for(i = 0; i < len1; i++)
     c80:	8f 5f       	subi	r24, 0xFF	; 255
     c82:	84 17       	cp	r24, r20
     c84:	31 f0       	breq	.+12     	; 0xc92 <compare+0x32>
		{
			if(pass1[i] != pass2[i])
     c86:	2d 91       	ld	r18, X+
     c88:	91 91       	ld	r25, Z+
     c8a:	29 17       	cp	r18, r25
     c8c:	c9 f3       	breq	.-14     	; 0xc80 <compare+0x20>
				lcd_gotoxy(1,2);
				lcd_print("pass2 = ");
				lcd_print(itoa((int)pass2[i],(char*)str,10));
				_delay_ms(500);
#endif
				return 0;
     c8e:	80 e0       	ldi	r24, 0x00	; 0
				continue;			//No need for it, just to make the code readable
			}
		}
		return 1;
	}
}
     c90:	08 95       	ret
				_delay_ms(2000);
#endif				
				continue;			//No need for it, just to make the code readable
			}
		}
		return 1;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	08 95       	ret

00000c96 <change_password>:

//This function changes the password of user. It firstly asks to enter his old password and if it is right, It
//will ask you to enter your new password two times. 

void change_password(void)
{
     c96:	af 92       	push	r10
     c98:	bf 92       	push	r11
     c9a:	cf 92       	push	r12
     c9c:	df 92       	push	r13
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	2a 97       	sbiw	r28, 0x0a	; 10
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	6e 01       	movw	r12, r28
     cbc:	08 94       	sec
     cbe:	c1 1c       	adc	r12, r1
     cc0:	d1 1c       	adc	r13, r1
	unsigned char old_password[10] = {0};		//Old password is stored here
     cc2:	4a e0       	ldi	r20, 0x0A	; 10
     cc4:	b4 2e       	mov	r11, r20
     cc6:	d6 01       	movw	r26, r12
     cc8:	eb 2d       	mov	r30, r11
     cca:	1d 92       	st	X+, r1
     ccc:	ea 95       	dec	r30
     cce:	e9 f7       	brne	.-6      	; 0xcca <change_password+0x34>
	unsigned char length = 0;					//length of old password is stored here
	
	lcd_clear();
     cd0:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
	lcd_print("Enter old password:");
     cd4:	8a e1       	ldi	r24, 0x1A	; 26
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
	lcd_gotoxy(1,2);
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	62 e0       	ldi	r22, 0x02	; 2
     ce0:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
unsigned char get_password(unsigned char* pass)
{
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
     ce4:	0e 94 c3 03 	call	0x786	; 0x786 <lcd_cursor_on>
	
	for(cnt = 0; cnt <= 10 ; )
     ce8:	00 e0       	ldi	r16, 0x00	; 0
     cea:	10 e0       	ldi	r17, 0x00	; 0
	{
		key = get_key();
     cec:	0e 94 a7 02 	call	0x54e	; 0x54e <get_key>
		
		if(key == '#')
     cf0:	83 32       	cpi	r24, 0x23	; 35
     cf2:	89 f0       	breq	.+34     	; 0xd16 <change_password+0x80>
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
     cf4:	8a 32       	cpi	r24, 0x2A	; 42
     cf6:	b9 f1       	breq	.+110    	; 0xd66 <change_password+0xd0>
		}
		else if(key == '*' && cnt <= 0)
		{
			cnt = 0;
		}
		else if(cnt != 10)
     cf8:	0a 30       	cpi	r16, 0x0A	; 10
     cfa:	11 05       	cpc	r17, r1
     cfc:	b9 f3       	breq	.-18     	; 0xcec <change_password+0x56>
		{
			pass[cnt++] = key;
     cfe:	f6 01       	movw	r30, r12
     d00:	e0 0f       	add	r30, r16
     d02:	f1 1f       	adc	r31, r17
     d04:	80 83       	st	Z, r24
     d06:	0f 5f       	subi	r16, 0xFF	; 255
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
			lcdData('*');
     d0a:	8a e2       	ldi	r24, 0x2A	; 42
     d0c:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
	
	for(cnt = 0; cnt <= 10 ; )
     d10:	0b 30       	cpi	r16, 0x0B	; 11
     d12:	11 05       	cpc	r17, r1
     d14:	5c f3       	brlt	.-42     	; 0xcec <change_password+0x56>
			pass[cnt++] = key;
			lcdData('*');
		}
	}

	lcd_cursor_off();
     d16:	0e 94 cc 03 	call	0x798	; 0x798 <lcd_cursor_off>

unsigned char check_password(unsigned char len, unsigned char* password)
{	
	unsigned char i = 0;				//Just a counter variable
	
	if(eeprom_read(0x0001) != len)		//Length is stored in EEPROM location 0x0001
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
     d20:	08 17       	cp	r16, r24
     d22:	89 f6       	brne	.-94     	; 0xcc6 <change_password+0x30>
	{
		return 0;
	}
	else
	{
		for(i = 0; i < len; i++)
     d24:	00 23       	and	r16, r16
     d26:	69 f1       	breq	.+90     	; 0xd82 <change_password+0xec>
     d28:	76 01       	movw	r14, r12
/*************************************************************************************************************/

//This function changes the password of user. It firstly asks to enter his old password and if it is right, It
//will ask you to enter your new password two times. 

void change_password(void)
     d2a:	0e 5f       	subi	r16, 0xFE	; 254
     d2c:	12 e0       	ldi	r17, 0x02	; 2
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <change_password+0xa0>
     d30:	1f 5f       	subi	r17, 0xFF	; 255
	{
		return 0;
	}
	else
	{
		for(i = 0; i < len; i++)
     d32:	10 17       	cp	r17, r16
     d34:	31 f1       	breq	.+76     	; 0xd82 <change_password+0xec>
		{
			if(password[i] != eeprom_read(i+2))		//Password is stored in EEPROM from location 2 to 12
     d36:	d7 01       	movw	r26, r14
     d38:	ad 90       	ld	r10, X+
     d3a:	7d 01       	movw	r14, r26
     d3c:	81 2f       	mov	r24, r17
     d3e:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
     d42:	a8 16       	cp	r10, r24
     d44:	a9 f3       	breq	.-22     	; 0xd30 <change_password+0x9a>
			{
				lcd_clear();
     d46:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
				lcd_print("break");
     d4a:	8e e2       	ldi	r24, 0x2E	; 46
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
     d52:	8f e3       	ldi	r24, 0x3F	; 63
     d54:	9d e0       	ldi	r25, 0x0D	; 13
     d56:	a3 e0       	ldi	r26, 0x03	; 3
     d58:	81 50       	subi	r24, 0x01	; 1
     d5a:	90 40       	sbci	r25, 0x00	; 0
     d5c:	a0 40       	sbci	r26, 0x00	; 0
     d5e:	e1 f7       	brne	.-8      	; 0xd58 <change_password+0xc2>
     d60:	00 c0       	rjmp	.+0      	; 0xd62 <change_password+0xcc>
     d62:	00 00       	nop
     d64:	b0 cf       	rjmp	.-160    	; 0xcc6 <change_password+0x30>
		if(key == '#')
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
     d66:	01 15       	cp	r16, r1
     d68:	11 05       	cpc	r17, r1
     d6a:	09 f4       	brne	.+2      	; 0xd6e <change_password+0xd8>
     d6c:	bf cf       	rjmp	.-130    	; 0xcec <change_password+0x56>
		{
			lcd_move_cursor_left();
     d6e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			lcdData(' ');
     d72:	80 e2       	ldi	r24, 0x20	; 32
     d74:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
			lcd_move_cursor_left();
     d78:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			cnt --;	
     d7c:	01 50       	subi	r16, 0x01	; 1
     d7e:	10 40       	sbci	r17, 0x00	; 0
     d80:	c7 cf       	rjmp	.-114    	; 0xd10 <change_password+0x7a>
	lcd_print("Enter old password:");
	lcd_gotoxy(1,2);
	length = get_password(old_password);
	if (check_password(length, old_password))
	{
		sign_up();
     d82:	0e 94 19 05 	call	0xa32	; 0xa32 <sign_up>
	else
	{
		
		change_password();
	}
}
     d86:	2a 96       	adiw	r28, 0x0a	; 10
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	f8 94       	cli
     d8c:	de bf       	out	0x3e, r29	; 62
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	cd bf       	out	0x3d, r28	; 61
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	df 90       	pop	r13
     da0:	cf 90       	pop	r12
     da2:	bf 90       	pop	r11
     da4:	af 90       	pop	r10
     da6:	08 95       	ret

00000da8 <get_password>:

/*************************************************************************************************************/
//This function takes the password from the user

unsigned char get_password(unsigned char* pass)
{
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	8c 01       	movw	r16, r24
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
     db2:	0e 94 c3 03 	call	0x786	; 0x786 <lcd_cursor_on>
	
	for(cnt = 0; cnt <= 10 ; )
     db6:	c0 e0       	ldi	r28, 0x00	; 0
     db8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		key = get_key();
     dba:	0e 94 a7 02 	call	0x54e	; 0x54e <get_key>
		
		if(key == '#')
     dbe:	83 32       	cpi	r24, 0x23	; 35
     dc0:	81 f0       	breq	.+32     	; 0xde2 <get_password+0x3a>
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
     dc2:	8a 32       	cpi	r24, 0x2A	; 42
     dc4:	b1 f0       	breq	.+44     	; 0xdf2 <get_password+0x4a>
		}
		else if(key == '*' && cnt <= 0)
		{
			cnt = 0;
		}
		else if(cnt != 10)
     dc6:	ca 30       	cpi	r28, 0x0A	; 10
     dc8:	d1 05       	cpc	r29, r1
     dca:	b9 f3       	breq	.-18     	; 0xdba <get_password+0x12>
		{
			pass[cnt++] = key;
     dcc:	f8 01       	movw	r30, r16
     dce:	ec 0f       	add	r30, r28
     dd0:	fd 1f       	adc	r31, r29
     dd2:	80 83       	st	Z, r24
     dd4:	21 96       	adiw	r28, 0x01	; 1
			lcdData('*');
     dd6:	8a e2       	ldi	r24, 0x2A	; 42
     dd8:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
	
	for(cnt = 0; cnt <= 10 ; )
     ddc:	cb 30       	cpi	r28, 0x0B	; 11
     dde:	d1 05       	cpc	r29, r1
     de0:	64 f3       	brlt	.-40     	; 0xdba <get_password+0x12>
			pass[cnt++] = key;
			lcdData('*');
		}
	}

	lcd_cursor_off();
     de2:	0e 94 cc 03 	call	0x798	; 0x798 <lcd_cursor_off>
	
	return cnt;
}
     de6:	8c 2f       	mov	r24, r28
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret
		if(key == '#')
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
     df2:	20 97       	sbiw	r28, 0x00	; 0
     df4:	11 f3       	breq	.-60     	; 0xdba <get_password+0x12>
		{
			lcd_move_cursor_left();
     df6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			lcdData(' ');
     dfa:	80 e2       	ldi	r24, 0x20	; 32
     dfc:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
			lcd_move_cursor_left();
     e00:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			cnt --;	
     e04:	21 97       	sbiw	r28, 0x01	; 1
     e06:	ea cf       	rjmp	.-44     	; 0xddc <get_password+0x34>

00000e08 <check_password>:

//This function compare the entered password with the one saved in the EEPROM. If matching occurs,
//it would return '1'. Else, It would return '0'

unsigned char check_password(unsigned char len, unsigned char* password)
{	
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ff 92       	push	r15
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	00 d0       	rcall	.+0      	; 0xe18 <check_password+0x10>
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	18 2f       	mov	r17, r24
	unsigned char i = 0;				//Just a counter variable
	
	if(eeprom_read(0x0001) != len)		//Length is stored in EEPROM location 0x0001
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	69 83       	std	Y+1, r22	; 0x01
     e22:	7a 83       	std	Y+2, r23	; 0x02
     e24:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
     e28:	69 81       	ldd	r22, Y+1	; 0x01
     e2a:	7a 81       	ldd	r23, Y+2	; 0x02
     e2c:	81 17       	cp	r24, r17
     e2e:	59 f0       	breq	.+22     	; 0xe46 <check_password+0x3e>
	{
		return 0;
     e30:	80 e0       	ldi	r24, 0x00	; 0
				return 0;
			}
		}
		return 1;
	}
}
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	df 90       	pop	r13
     e42:	cf 90       	pop	r12
     e44:	08 95       	ret
	{
		return 0;
	}
	else
	{
		for(i = 0; i < len; i++)
     e46:	88 23       	and	r24, r24
     e48:	11 f1       	breq	.+68     	; 0xe8e <check_password+0x86>
     e4a:	6b 01       	movw	r12, r22
/*************************************************************************************************************/

//This function compare the entered password with the one saved in the EEPROM. If matching occurs,
//it would return '1'. Else, It would return '0'

unsigned char check_password(unsigned char len, unsigned char* password)
     e4c:	52 e0       	ldi	r21, 0x02	; 2
     e4e:	f5 2e       	mov	r15, r21
     e50:	f8 0e       	add	r15, r24
     e52:	12 e0       	ldi	r17, 0x02	; 2
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <check_password+0x54>
     e56:	1f 5f       	subi	r17, 0xFF	; 255
	{
		return 0;
	}
	else
	{
		for(i = 0; i < len; i++)
     e58:	1f 15       	cp	r17, r15
     e5a:	c9 f0       	breq	.+50     	; 0xe8e <check_password+0x86>
		{
			if(password[i] != eeprom_read(i+2))		//Password is stored in EEPROM from location 2 to 12
     e5c:	d6 01       	movw	r26, r12
     e5e:	0d 91       	ld	r16, X+
     e60:	6d 01       	movw	r12, r26
     e62:	81 2f       	mov	r24, r17
     e64:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
     e68:	08 17       	cp	r16, r24
     e6a:	a9 f3       	breq	.-22     	; 0xe56 <check_password+0x4e>
			{
				lcd_clear();
     e6c:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
				lcd_print("break");
     e70:	8e e2       	ldi	r24, 0x2E	; 46
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
     e78:	8f e3       	ldi	r24, 0x3F	; 63
     e7a:	9d e0       	ldi	r25, 0x0D	; 13
     e7c:	a3 e0       	ldi	r26, 0x03	; 3
     e7e:	81 50       	subi	r24, 0x01	; 1
     e80:	90 40       	sbci	r25, 0x00	; 0
     e82:	a0 40       	sbci	r26, 0x00	; 0
     e84:	e1 f7       	brne	.-8      	; 0xe7e <check_password+0x76>
     e86:	00 c0       	rjmp	.+0      	; 0xe88 <check_password+0x80>
     e88:	00 00       	nop
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	d2 cf       	rjmp	.-92     	; 0xe32 <check_password+0x2a>
				_delay_ms(1000);
				return 0;
			}
		}
		return 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	d0 cf       	rjmp	.-96     	; 0xe32 <check_password+0x2a>

00000e92 <open_the_door>:

//This function rotates the motor in counter_clock wise direction which means that the door is closed

void open_the_door (void)
{
	DIO_write('B', MOTOR_EN, HIGH);		//EN = 1
     e92:	82 e4       	ldi	r24, 0x42	; 66
     e94:	63 e0       	ldi	r22, 0x03	; 3
     e96:	41 e0       	ldi	r20, 0x01	; 1
     e98:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	DIO_write('B', MOTOR_IN1, HIGH);	//IN1 = 1
     e9c:	82 e4       	ldi	r24, 0x42	; 66
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	41 e0       	ldi	r20, 0x01	; 1
     ea2:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	DIO_write('B', MOTOR_IN2, LOW);		//IN2 = 0
     ea6:	82 e4       	ldi	r24, 0x42	; 66
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	lcd_clear();
     eb0:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
	lcd_print(" The door is opened");
     eb4:	84 e3       	ldi	r24, 0x34	; 52
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
     ebc:	8f e7       	ldi	r24, 0x7F	; 127
     ebe:	9a e1       	ldi	r25, 0x1A	; 26
     ec0:	a6 e0       	ldi	r26, 0x06	; 6
     ec2:	81 50       	subi	r24, 0x01	; 1
     ec4:	90 40       	sbci	r25, 0x00	; 0
     ec6:	a0 40       	sbci	r26, 0x00	; 0
     ec8:	e1 f7       	brne	.-8      	; 0xec2 <open_the_door+0x30>
     eca:	00 c0       	rjmp	.+0      	; 0xecc <open_the_door+0x3a>
     ecc:	00 00       	nop
	_delay_ms(2000);
	DIO_write('B', MOTOR_EN, LOW);		//EN = 0
     ece:	82 e4       	ldi	r24, 0x42	; 66
     ed0:	63 e0       	ldi	r22, 0x03	; 3
     ed2:	40 e0       	ldi	r20, 0x00	; 0
     ed4:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	eeprom_write(NUM_OF_TRIALS_ADDR,0);
     ed8:	89 e1       	ldi	r24, 0x19	; 25
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write>
}
     ee2:	08 95       	ret

00000ee4 <close_the_door>:
//This function rotates the motor in counter_clock wise direction which means that the door is closed

void close_the_door (void)
{	
	
	DIO_write('B', MOTOR_EN, HIGH);		//EN = 1
     ee4:	82 e4       	ldi	r24, 0x42	; 66
     ee6:	63 e0       	ldi	r22, 0x03	; 3
     ee8:	41 e0       	ldi	r20, 0x01	; 1
     eea:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	DIO_write('B', MOTOR_IN1, LOW);	//IN1 = 0
     eee:	82 e4       	ldi	r24, 0x42	; 66
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	DIO_write('B', MOTOR_IN2, HIGH);		//IN2 = 1
     ef8:	82 e4       	ldi	r24, 0x42	; 66
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	41 e0       	ldi	r20, 0x01	; 1
     efe:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	DIO_write('B', BUZZER, HIGH);		//Make some noise :D
     f02:	82 e4       	ldi	r24, 0x42	; 66
     f04:	64 e0       	ldi	r22, 0x04	; 4
     f06:	41 e0       	ldi	r20, 0x01	; 1
     f08:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	PORTB |= (1 << BUZZER);
     f0c:	c4 9a       	sbi	0x18, 4	; 24
     f0e:	8f e7       	ldi	r24, 0x7F	; 127
     f10:	9a e1       	ldi	r25, 0x1A	; 26
     f12:	a6 e0       	ldi	r26, 0x06	; 6
     f14:	81 50       	subi	r24, 0x01	; 1
     f16:	90 40       	sbci	r25, 0x00	; 0
     f18:	a0 40       	sbci	r26, 0x00	; 0
     f1a:	e1 f7       	brne	.-8      	; 0xf14 <close_the_door+0x30>
     f1c:	00 c0       	rjmp	.+0      	; 0xf1e <close_the_door+0x3a>
     f1e:	00 00       	nop
	_delay_ms(2000);
	DIO_write('B', BUZZER, LOW);
     f20:	82 e4       	ldi	r24, 0x42	; 66
     f22:	64 e0       	ldi	r22, 0x04	; 4
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	DIO_write('B', MOTOR_EN, LOW);		//EN = 0
     f2a:	82 e4       	ldi	r24, 0x42	; 66
     f2c:	63 e0       	ldi	r22, 0x03	; 3
     f2e:	40 e0       	ldi	r20, 0x00	; 0
     f30:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	
}
     f34:	08 95       	ret

00000f36 <__vector_3>:
//If the voltage on PB2 changes from HIGH to LOW (falling_edge) the door will be closed.
//In reality the interrupt can come from any source .... can be a sensor connected to the door or just 
//a simple switch when pressed, the door will be closed.

ISR(INT2_vect)
{
     f36:	1f 92       	push	r1
     f38:	0f 92       	push	r0
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	0f 92       	push	r0
     f3e:	11 24       	eor	r1, r1
     f40:	2f 93       	push	r18
     f42:	3f 93       	push	r19
     f44:	4f 93       	push	r20
     f46:	5f 93       	push	r21
     f48:	6f 93       	push	r22
     f4a:	7f 93       	push	r23
     f4c:	8f 93       	push	r24
     f4e:	9f 93       	push	r25
     f50:	af 93       	push	r26
     f52:	bf 93       	push	r27
     f54:	ef 93       	push	r30
     f56:	ff 93       	push	r31
	cli();
     f58:	f8 94       	cli
//This function rotates the motor in counter_clock wise direction which means that the door is closed

void close_the_door (void)
{	
	
	DIO_write('B', MOTOR_EN, HIGH);		//EN = 1
     f5a:	82 e4       	ldi	r24, 0x42	; 66
     f5c:	63 e0       	ldi	r22, 0x03	; 3
     f5e:	41 e0       	ldi	r20, 0x01	; 1
     f60:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	DIO_write('B', MOTOR_IN1, LOW);	//IN1 = 0
     f64:	82 e4       	ldi	r24, 0x42	; 66
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	DIO_write('B', MOTOR_IN2, HIGH);		//IN2 = 1
     f6e:	82 e4       	ldi	r24, 0x42	; 66
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	DIO_write('B', BUZZER, HIGH);		//Make some noise :D
     f78:	82 e4       	ldi	r24, 0x42	; 66
     f7a:	64 e0       	ldi	r22, 0x04	; 4
     f7c:	41 e0       	ldi	r20, 0x01	; 1
     f7e:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	PORTB |= (1 << BUZZER);
     f82:	c4 9a       	sbi	0x18, 4	; 24
     f84:	8f e7       	ldi	r24, 0x7F	; 127
     f86:	9a e1       	ldi	r25, 0x1A	; 26
     f88:	a6 e0       	ldi	r26, 0x06	; 6
     f8a:	81 50       	subi	r24, 0x01	; 1
     f8c:	90 40       	sbci	r25, 0x00	; 0
     f8e:	a0 40       	sbci	r26, 0x00	; 0
     f90:	e1 f7       	brne	.-8      	; 0xf8a <__vector_3+0x54>
     f92:	00 c0       	rjmp	.+0      	; 0xf94 <__vector_3+0x5e>
     f94:	00 00       	nop
	_delay_ms(2000);
	DIO_write('B', BUZZER, LOW);
     f96:	82 e4       	ldi	r24, 0x42	; 66
     f98:	64 e0       	ldi	r22, 0x04	; 4
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	DIO_write('B', MOTOR_EN, LOW);		//EN = 0
     fa0:	82 e4       	ldi	r24, 0x42	; 66
     fa2:	63 e0       	ldi	r22, 0x03	; 3
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>

ISR(INT2_vect)
{
	cli();
	close_the_door();
	sei();
     faa:	78 94       	sei
}
     fac:	ff 91       	pop	r31
     fae:	ef 91       	pop	r30
     fb0:	bf 91       	pop	r27
     fb2:	af 91       	pop	r26
     fb4:	9f 91       	pop	r25
     fb6:	8f 91       	pop	r24
     fb8:	7f 91       	pop	r23
     fba:	6f 91       	pop	r22
     fbc:	5f 91       	pop	r21
     fbe:	4f 91       	pop	r20
     fc0:	3f 91       	pop	r19
     fc2:	2f 91       	pop	r18
     fc4:	0f 90       	pop	r0
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	0f 90       	pop	r0
     fca:	1f 90       	pop	r1
     fcc:	18 95       	reti

00000fce <get_puk_code>:
/*************************************************************************************************************/

//This function checks if the user enters the puk code correctly or not

unsigned char get_puk_code(void)
{
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	2b 97       	sbiw	r28, 0x0b	; 11
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
	unsigned char i = 0;				//Just a counter variable
	unsigned char puk_code[10] = {0};
     fea:	7e 01       	movw	r14, r28
     fec:	08 94       	sec
     fee:	e1 1c       	adc	r14, r1
     ff0:	f1 1c       	adc	r15, r1
     ff2:	8a e0       	ldi	r24, 0x0A	; 10
     ff4:	d7 01       	movw	r26, r14
     ff6:	1d 92       	st	X+, r1
     ff8:	8a 95       	dec	r24
     ffa:	e9 f7       	brne	.-6      	; 0xff6 <get_puk_code+0x28>
	unsigned char length = 0;
	
	lcd_clear();
     ffc:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
	lcd_print(" The door is closed ");
    1000:	88 e4       	ldi	r24, 0x48	; 72
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
	lcd_gotoxy(1,2);
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	62 e0       	ldi	r22, 0x02	; 2
    100c:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
	lcd_print("    permanently");
    1010:	8d e5       	ldi	r24, 0x5D	; 93
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	9d e0       	ldi	r25, 0x0D	; 13
    101c:	a3 e0       	ldi	r26, 0x03	; 3
    101e:	81 50       	subi	r24, 0x01	; 1
    1020:	90 40       	sbci	r25, 0x00	; 0
    1022:	a0 40       	sbci	r26, 0x00	; 0
    1024:	e1 f7       	brne	.-8      	; 0x101e <get_puk_code+0x50>
    1026:	00 c0       	rjmp	.+0      	; 0x1028 <get_puk_code+0x5a>
    1028:	00 00       	nop
	_delay_ms(1000);
	
	lcd_clear();
    102a:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
	lcd_print("Enter PUK code: ");
    102e:	8d e6       	ldi	r24, 0x6D	; 109
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
	lcd_gotoxy(1,2);
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	62 e0       	ldi	r22, 0x02	; 2
    103a:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
unsigned char get_password(unsigned char* pass)
{
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
    103e:	0e 94 c3 03 	call	0x786	; 0x786 <lcd_cursor_on>
	
	for(cnt = 0; cnt <= 10 ; )
    1042:	00 e0       	ldi	r16, 0x00	; 0
    1044:	10 e0       	ldi	r17, 0x00	; 0
	{
		key = get_key();
    1046:	0e 94 a7 02 	call	0x54e	; 0x54e <get_key>
		
		if(key == '#')
    104a:	83 32       	cpi	r24, 0x23	; 35
    104c:	91 f0       	breq	.+36     	; 0x1072 <get_puk_code+0xa4>
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
    104e:	8a 32       	cpi	r24, 0x2A	; 42
    1050:	09 f4       	brne	.+2      	; 0x1054 <get_puk_code+0x86>
    1052:	7e c0       	rjmp	.+252    	; 0x1150 <get_puk_code+0x182>
		}
		else if(key == '*' && cnt <= 0)
		{
			cnt = 0;
		}
		else if(cnt != 10)
    1054:	0a 30       	cpi	r16, 0x0A	; 10
    1056:	11 05       	cpc	r17, r1
    1058:	b1 f3       	breq	.-20     	; 0x1046 <get_puk_code+0x78>
		{
			pass[cnt++] = key;
    105a:	f7 01       	movw	r30, r14
    105c:	e0 0f       	add	r30, r16
    105e:	f1 1f       	adc	r31, r17
    1060:	80 83       	st	Z, r24
    1062:	0f 5f       	subi	r16, 0xFF	; 255
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
			lcdData('*');
    1066:	8a e2       	ldi	r24, 0x2A	; 42
    1068:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
	
	for(cnt = 0; cnt <= 10 ; )
    106c:	0b 30       	cpi	r16, 0x0B	; 11
    106e:	11 05       	cpc	r17, r1
    1070:	54 f3       	brlt	.-44     	; 0x1046 <get_puk_code+0x78>
			pass[cnt++] = key;
			lcdData('*');
		}
	}

	lcd_cursor_off();
    1072:	0e 94 cc 03 	call	0x798	; 0x798 <lcd_cursor_off>
	lcd_clear();
	lcd_print("Enter PUK code: ");
	lcd_gotoxy(1,2);
	length = get_password(puk_code);
	for(i = 0; i < 10; i++)
		puk_code[i] -= 48;
    1076:	99 81       	ldd	r25, Y+1	; 0x01
    1078:	90 53       	subi	r25, 0x30	; 48
    107a:	99 83       	std	Y+1, r25	; 0x01
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	80 53       	subi	r24, 0x30	; 48
    1080:	8a 83       	std	Y+2, r24	; 0x02
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	80 53       	subi	r24, 0x30	; 48
    1086:	8b 83       	std	Y+3, r24	; 0x03
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	80 53       	subi	r24, 0x30	; 48
    108c:	8c 83       	std	Y+4, r24	; 0x04
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	80 53       	subi	r24, 0x30	; 48
    1092:	8d 83       	std	Y+5, r24	; 0x05
    1094:	8e 81       	ldd	r24, Y+6	; 0x06
    1096:	80 53       	subi	r24, 0x30	; 48
    1098:	8e 83       	std	Y+6, r24	; 0x06
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
    109c:	80 53       	subi	r24, 0x30	; 48
    109e:	8f 83       	std	Y+7, r24	; 0x07
    10a0:	88 85       	ldd	r24, Y+8	; 0x08
    10a2:	80 53       	subi	r24, 0x30	; 48
    10a4:	88 87       	std	Y+8, r24	; 0x08
    10a6:	89 85       	ldd	r24, Y+9	; 0x09
    10a8:	80 53       	subi	r24, 0x30	; 48
    10aa:	89 87       	std	Y+9, r24	; 0x09
    10ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    10ae:	80 53       	subi	r24, 0x30	; 48
    10b0:	8a 87       	std	Y+10, r24	; 0x0a
		
	if(length != 10)		//PUK code is 10 numbers + the ending '*' which acts as an enter.
    10b2:	0a 30       	cpi	r16, 0x0A	; 10
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <get_puk_code+0xea>
    10b6:	5a c0       	rjmp	.+180    	; 0x116c <get_puk_code+0x19e>
	}
	else
	{
		for(i = 0; i < 10; i++)
		{
			if(puk_code[i] != eeprom_read(i+27))		//Password is stored in EEPROM from location 27 to 37
    10b8:	8b e1       	ldi	r24, 0x1B	; 27
    10ba:	9b 87       	std	Y+11, r25	; 0x0b
    10bc:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    10c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    10c2:	98 17       	cp	r25, r24
    10c4:	b1 f5       	brne	.+108    	; 0x1132 <get_puk_code+0x164>
    10c6:	0a 81       	ldd	r16, Y+2	; 0x02
    10c8:	8c e1       	ldi	r24, 0x1C	; 28
    10ca:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    10ce:	08 17       	cp	r16, r24
    10d0:	81 f5       	brne	.+96     	; 0x1132 <get_puk_code+0x164>
    10d2:	0b 81       	ldd	r16, Y+3	; 0x03
    10d4:	8d e1       	ldi	r24, 0x1D	; 29
    10d6:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    10da:	08 17       	cp	r16, r24
    10dc:	51 f5       	brne	.+84     	; 0x1132 <get_puk_code+0x164>
    10de:	0c 81       	ldd	r16, Y+4	; 0x04
    10e0:	8e e1       	ldi	r24, 0x1E	; 30
    10e2:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    10e6:	08 17       	cp	r16, r24
    10e8:	21 f5       	brne	.+72     	; 0x1132 <get_puk_code+0x164>
    10ea:	0d 81       	ldd	r16, Y+5	; 0x05
    10ec:	8f e1       	ldi	r24, 0x1F	; 31
    10ee:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    10f2:	08 17       	cp	r16, r24
    10f4:	f1 f4       	brne	.+60     	; 0x1132 <get_puk_code+0x164>
    10f6:	0e 81       	ldd	r16, Y+6	; 0x06
    10f8:	80 e2       	ldi	r24, 0x20	; 32
    10fa:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    10fe:	08 17       	cp	r16, r24
    1100:	c1 f4       	brne	.+48     	; 0x1132 <get_puk_code+0x164>
    1102:	0f 81       	ldd	r16, Y+7	; 0x07
    1104:	81 e2       	ldi	r24, 0x21	; 33
    1106:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    110a:	08 17       	cp	r16, r24
    110c:	91 f4       	brne	.+36     	; 0x1132 <get_puk_code+0x164>
    110e:	08 85       	ldd	r16, Y+8	; 0x08
    1110:	82 e2       	ldi	r24, 0x22	; 34
    1112:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    1116:	08 17       	cp	r16, r24
    1118:	61 f4       	brne	.+24     	; 0x1132 <get_puk_code+0x164>
    111a:	09 85       	ldd	r16, Y+9	; 0x09
    111c:	83 e2       	ldi	r24, 0x23	; 35
    111e:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    1122:	08 17       	cp	r16, r24
    1124:	31 f4       	brne	.+12     	; 0x1132 <get_puk_code+0x164>
    1126:	0a 85       	ldd	r16, Y+10	; 0x0a
    1128:	84 e2       	ldi	r24, 0x24	; 36
    112a:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>

/*************************************************************************************************************/

//This function checks if the user enters the puk code correctly or not

unsigned char get_puk_code(void)
    112e:	91 e0       	ldi	r25, 0x01	; 1
    1130:	08 13       	cpse	r16, r24
	{
		for(i = 0; i < 10; i++)
		{
			if(puk_code[i] != eeprom_read(i+27))		//Password is stored in EEPROM from location 27 to 37
			{
				return 0;
    1132:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
		return 1;
	}	
}
    1134:	89 2f       	mov	r24, r25
    1136:	2b 96       	adiw	r28, 0x0b	; 11
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	08 95       	ret
		if(key == '#')
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
    1150:	01 15       	cp	r16, r1
    1152:	11 05       	cpc	r17, r1
    1154:	09 f4       	brne	.+2      	; 0x1158 <get_puk_code+0x18a>
    1156:	77 cf       	rjmp	.-274    	; 0x1046 <get_puk_code+0x78>
		{
			lcd_move_cursor_left();
    1158:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			lcdData(' ');
    115c:	80 e2       	ldi	r24, 0x20	; 32
    115e:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
			lcd_move_cursor_left();
    1162:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			cnt --;	
    1166:	01 50       	subi	r16, 0x01	; 1
    1168:	10 40       	sbci	r17, 0x00	; 0
    116a:	80 cf       	rjmp	.-256    	; 0x106c <get_puk_code+0x9e>
	for(i = 0; i < 10; i++)
		puk_code[i] -= 48;
		
	if(length != 10)		//PUK code is 10 numbers + the ending '*' which acts as an enter.
	{
		lcd_clear();
    116c:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
		lcd_print(itoa((int)length,str,10));
    1170:	80 2f       	mov	r24, r16
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	6d ed       	ldi	r22, 0xDD	; 221
    1176:	71 e0       	ldi	r23, 0x01	; 1
    1178:	4a e0       	ldi	r20, 0x0A	; 10
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <itoa>
    1180:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
    1184:	8f e3       	ldi	r24, 0x3F	; 63
    1186:	9d e0       	ldi	r25, 0x0D	; 13
    1188:	a3 e0       	ldi	r26, 0x03	; 3
    118a:	81 50       	subi	r24, 0x01	; 1
    118c:	90 40       	sbci	r25, 0x00	; 0
    118e:	a0 40       	sbci	r26, 0x00	; 0
    1190:	e1 f7       	brne	.-8      	; 0x118a <get_puk_code+0x1bc>
    1192:	00 c0       	rjmp	.+0      	; 0x1194 <get_puk_code+0x1c6>
    1194:	00 00       	nop
		_delay_ms(1000);
		return 0;
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	cd cf       	rjmp	.-102    	; 0x1134 <get_puk_code+0x166>

0000119a <try_again>:
}

/*************************************************************************************************************/

void try_again (void)
{
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
	static unsigned char number_of_trials = 0;
	number_of_trials = eeprom_read(NUM_OF_TRIALS_ADDR);
    119e:	89 e1       	ldi	r24, 0x19	; 25
    11a0:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
	eeprom_write(NUM_OF_TRIALS_ADDR,++number_of_trials);			//This variable is stored in EEPROM location number 25
    11a4:	68 2f       	mov	r22, r24
    11a6:	6f 5f       	subi	r22, 0xFF	; 255
    11a8:	60 93 dc 01 	sts	0x01DC, r22
    11ac:	89 e1       	ldi	r24, 0x19	; 25
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write>
	
	if(eeprom_read(NUM_OF_TRIALS_ADDR) == 3 || eeprom_read(NUM_OF_TRIALS_ADDR) == 6)
    11b4:	89 e1       	ldi	r24, 0x19	; 25
    11b6:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	91 f1       	breq	.+100    	; 0x1222 <try_again+0x88>
    11be:	89 e1       	ldi	r24, 0x19	; 25
    11c0:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    11c4:	86 30       	cpi	r24, 0x06	; 6
    11c6:	69 f1       	breq	.+90     	; 0x1222 <try_again+0x88>
			_delay_ms(100);
		}
		log_in();
	}
	
	else if (eeprom_read(NUM_OF_TRIALS_ADDR) >= 9)
    11c8:	89 e1       	ldi	r24, 0x19	; 25
    11ca:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    11ce:	89 30       	cpi	r24, 0x09	; 9
    11d0:	08 f4       	brcc	.+2      	; 0x11d4 <try_again+0x3a>
    11d2:	57 c0       	rjmp	.+174    	; 0x1282 <try_again+0xe8>
	{
		eeprom_write(26,0xFF);
    11d4:	8a e1       	ldi	r24, 0x1A	; 26
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	6f ef       	ldi	r22, 0xFF	; 255
    11da:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write>
		unsigned char chk = 0;
		do
		{
			chk = get_puk_code();
    11de:	0e 94 e7 07 	call	0xfce	; 0xfce <get_puk_code>
			
		} while (!chk);
    11e2:	88 23       	and	r24, r24
    11e4:	e1 f3       	breq	.-8      	; 0x11de <try_again+0x44>
		
		lcd_clear();
    11e6:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
		lcd_print("Successful operation");
    11ea:	81 ea       	ldi	r24, 0xA1	; 161
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
		eeprom_write(26,0);
    11f2:	8a e1       	ldi	r24, 0x1A	; 26
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write>
		eeprom_write(NUM_OF_TRIALS_ADDR,0);
    11fc:	89 e1       	ldi	r24, 0x19	; 25
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write>
    1206:	8f e3       	ldi	r24, 0x3F	; 63
    1208:	9d e0       	ldi	r25, 0x0D	; 13
    120a:	a3 e0       	ldi	r26, 0x03	; 3
    120c:	81 50       	subi	r24, 0x01	; 1
    120e:	90 40       	sbci	r25, 0x00	; 0
    1210:	a0 40       	sbci	r26, 0x00	; 0
    1212:	e1 f7       	brne	.-8      	; 0x120c <try_again+0x72>
    1214:	00 c0       	rjmp	.+0      	; 0x1216 <try_again+0x7c>
    1216:	00 00       	nop
		_delay_ms(1000);
		sign_up();
    1218:	0e 94 19 05 	call	0xa32	; 0xa32 <sign_up>
		lcd_gotoxy(1,2);
		lcd_print("Plz, try again");
		_delay_ms(1000);
		log_in();
	}
}
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret
	eeprom_write(NUM_OF_TRIALS_ADDR,++number_of_trials);			//This variable is stored in EEPROM location number 25
	
	if(eeprom_read(NUM_OF_TRIALS_ADDR) == 3 || eeprom_read(NUM_OF_TRIALS_ADDR) == 6)
	{
		unsigned char i = 0;
		lcd_clear();
    1222:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
		lcd_gotoxy(1,1);
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	61 e0       	ldi	r22, 0x01	; 1
    122a:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
		lcd_print("Wrong password");
    122e:	8e e7       	ldi	r24, 0x7E	; 126
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
		lcd_gotoxy(1,2);
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	62 e0       	ldi	r22, 0x02	; 2
    123a:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
		lcd_print("Try again in    Sec");
    123e:	8d e8       	ldi	r24, 0x8D	; 141
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
    1246:	cb e3       	ldi	r28, 0x3B	; 59
    1248:	d0 e0       	ldi	r29, 0x00	; 0
		for(i = 59; i > 0; i--)
		{	
			lcd_gotoxy(14,2);
    124a:	8e e0       	ldi	r24, 0x0E	; 14
    124c:	62 e0       	ldi	r22, 0x02	; 2
    124e:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
			itoa((int)i, str, 10);
    1252:	ce 01       	movw	r24, r28
    1254:	6d ed       	ldi	r22, 0xDD	; 221
    1256:	71 e0       	ldi	r23, 0x01	; 1
    1258:	4a e0       	ldi	r20, 0x0A	; 10
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <itoa>
			lcd_print(str);
    1260:	8d ed       	ldi	r24, 0xDD	; 221
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
    1268:	87 ea       	ldi	r24, 0xA7	; 167
    126a:	91 e6       	ldi	r25, 0x61	; 97
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	f1 f7       	brne	.-4      	; 0x126c <try_again+0xd2>
    1270:	00 c0       	rjmp	.+0      	; 0x1272 <try_again+0xd8>
    1272:	00 00       	nop
    1274:	21 97       	sbiw	r28, 0x01	; 1
		lcd_clear();
		lcd_gotoxy(1,1);
		lcd_print("Wrong password");
		lcd_gotoxy(1,2);
		lcd_print("Try again in    Sec");
		for(i = 59; i > 0; i--)
    1276:	49 f7       	brne	.-46     	; 0x124a <try_again+0xb0>
		lcd_gotoxy(1,1);
		lcd_print("Wrong password");
		lcd_gotoxy(1,2);
		lcd_print("Plz, try again");
		_delay_ms(1000);
		log_in();
    1278:	0e 94 5d 09 	call	0x12ba	; 0x12ba <log_in>
	}
}
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret
		sign_up();
	}
	
	else
	{
		lcd_clear();
    1282:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
		lcd_gotoxy(1,1);
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
		lcd_print("Wrong password");
    128e:	8e e7       	ldi	r24, 0x7E	; 126
    1290:	91 e0       	ldi	r25, 0x01	; 1
    1292:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
		lcd_gotoxy(1,2);
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	62 e0       	ldi	r22, 0x02	; 2
    129a:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
		lcd_print("Plz, try again");
    129e:	86 eb       	ldi	r24, 0xB6	; 182
    12a0:	91 e0       	ldi	r25, 0x01	; 1
    12a2:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
    12a6:	8f e3       	ldi	r24, 0x3F	; 63
    12a8:	9d e0       	ldi	r25, 0x0D	; 13
    12aa:	a3 e0       	ldi	r26, 0x03	; 3
    12ac:	81 50       	subi	r24, 0x01	; 1
    12ae:	90 40       	sbci	r25, 0x00	; 0
    12b0:	a0 40       	sbci	r26, 0x00	; 0
    12b2:	e1 f7       	brne	.-8      	; 0x12ac <try_again+0x112>
    12b4:	00 c0       	rjmp	.+0      	; 0x12b6 <try_again+0x11c>
    12b6:	00 00       	nop
    12b8:	df cf       	rjmp	.-66     	; 0x1278 <try_again+0xde>

000012ba <log_in>:

//This function tells the user to enter the saved password and then checks if it is right or not
//using check_password function. And then make a decision upon the results

void log_in (void)
{
    12ba:	df 92       	push	r13
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	2b 97       	sbiw	r28, 0x0b	; 11
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
	unsigned char entered_password[11] = {0};				//The entered password is saved here
    12d8:	7e 01       	movw	r14, r28
    12da:	08 94       	sec
    12dc:	e1 1c       	adc	r14, r1
    12de:	f1 1c       	adc	r15, r1
    12e0:	8b e0       	ldi	r24, 0x0B	; 11
    12e2:	d7 01       	movw	r26, r14
    12e4:	1d 92       	st	X+, r1
    12e6:	8a 95       	dec	r24
    12e8:	e9 f7       	brne	.-6      	; 0x12e4 <log_in+0x2a>
	unsigned char length = 0;								//Length of entered password
	
	lcd_clear();
    12ea:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
	lcd_print("Enter your password: ");
    12ee:	85 ec       	ldi	r24, 0xC5	; 197
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
	lcd_gotoxy(1,2);
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	62 e0       	ldi	r22, 0x02	; 2
    12fa:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
unsigned char get_password(unsigned char* pass)
{
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
    12fe:	0e 94 c3 03 	call	0x786	; 0x786 <lcd_cursor_on>
	
	for(cnt = 0; cnt <= 10 ; )
    1302:	00 e0       	ldi	r16, 0x00	; 0
    1304:	10 e0       	ldi	r17, 0x00	; 0
	{
		key = get_key();
    1306:	0e 94 a7 02 	call	0x54e	; 0x54e <get_key>
		
		if(key == '#')
    130a:	83 32       	cpi	r24, 0x23	; 35
    130c:	89 f0       	breq	.+34     	; 0x1330 <log_in+0x76>
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
    130e:	8a 32       	cpi	r24, 0x2A	; 42
    1310:	31 f1       	breq	.+76     	; 0x135e <log_in+0xa4>
		}
		else if(key == '*' && cnt <= 0)
		{
			cnt = 0;
		}
		else if(cnt != 10)
    1312:	0a 30       	cpi	r16, 0x0A	; 10
    1314:	11 05       	cpc	r17, r1
    1316:	b9 f3       	breq	.-18     	; 0x1306 <log_in+0x4c>
		{
			pass[cnt++] = key;
    1318:	f7 01       	movw	r30, r14
    131a:	e0 0f       	add	r30, r16
    131c:	f1 1f       	adc	r31, r17
    131e:	80 83       	st	Z, r24
    1320:	0f 5f       	subi	r16, 0xFF	; 255
    1322:	1f 4f       	sbci	r17, 0xFF	; 255
			lcdData('*');
    1324:	8a e2       	ldi	r24, 0x2A	; 42
    1326:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
	
	for(cnt = 0; cnt <= 10 ; )
    132a:	0b 30       	cpi	r16, 0x0B	; 11
    132c:	11 05       	cpc	r17, r1
    132e:	5c f3       	brlt	.-42     	; 0x1306 <log_in+0x4c>
			pass[cnt++] = key;
			lcdData('*');
		}
	}

	lcd_cursor_off();
    1330:	0e 94 cc 03 	call	0x798	; 0x798 <lcd_cursor_off>

unsigned char check_password(unsigned char len, unsigned char* password)
{	
	unsigned char i = 0;				//Just a counter variable
	
	if(eeprom_read(0x0001) != len)		//Length is stored in EEPROM location 0x0001
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    133a:	08 17       	cp	r16, r24
    133c:	e9 f0       	breq	.+58     	; 0x1378 <log_in+0xbe>
	{
		open_the_door();
	}
	else
	{
		try_again();
    133e:	0e 94 cd 08 	call	0x119a	; 0x119a <try_again>
	}
}
    1342:	2b 96       	adiw	r28, 0x0b	; 11
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	ff 90       	pop	r15
    1358:	ef 90       	pop	r14
    135a:	df 90       	pop	r13
    135c:	08 95       	ret
		if(key == '#')
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
    135e:	01 15       	cp	r16, r1
    1360:	11 05       	cpc	r17, r1
    1362:	89 f2       	breq	.-94     	; 0x1306 <log_in+0x4c>
		{
			lcd_move_cursor_left();
    1364:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			lcdData(' ');
    1368:	80 e2       	ldi	r24, 0x20	; 32
    136a:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
			lcd_move_cursor_left();
    136e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			cnt --;	
    1372:	01 50       	subi	r16, 0x01	; 1
    1374:	10 40       	sbci	r17, 0x00	; 0
    1376:	d9 cf       	rjmp	.-78     	; 0x132a <log_in+0x70>
	{
		return 0;
	}
	else
	{
		for(i = 0; i < len; i++)
    1378:	00 23       	and	r16, r16
    137a:	f1 f0       	breq	.+60     	; 0x13b8 <log_in+0xfe>
/*************************************************************************************************************/

//This function tells the user to enter the saved password and then checks if it is right or not
//using check_password function. And then make a decision upon the results

void log_in (void)
    137c:	0e 5f       	subi	r16, 0xFE	; 254
    137e:	12 e0       	ldi	r17, 0x02	; 2
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <log_in+0xce>
    1382:	1f 5f       	subi	r17, 0xFF	; 255
	{
		return 0;
	}
	else
	{
		for(i = 0; i < len; i++)
    1384:	10 17       	cp	r17, r16
    1386:	c1 f0       	breq	.+48     	; 0x13b8 <log_in+0xfe>
		{
			if(password[i] != eeprom_read(i+2))		//Password is stored in EEPROM from location 2 to 12
    1388:	f7 01       	movw	r30, r14
    138a:	d1 90       	ld	r13, Z+
    138c:	7f 01       	movw	r14, r30
    138e:	81 2f       	mov	r24, r17
    1390:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    1394:	d8 16       	cp	r13, r24
    1396:	a9 f3       	breq	.-22     	; 0x1382 <log_in+0xc8>
			{
				lcd_clear();
    1398:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
				lcd_print("break");
    139c:	8e e2       	ldi	r24, 0x2E	; 46
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
    13a4:	8f e3       	ldi	r24, 0x3F	; 63
    13a6:	9d e0       	ldi	r25, 0x0D	; 13
    13a8:	a3 e0       	ldi	r26, 0x03	; 3
    13aa:	81 50       	subi	r24, 0x01	; 1
    13ac:	90 40       	sbci	r25, 0x00	; 0
    13ae:	a0 40       	sbci	r26, 0x00	; 0
    13b0:	e1 f7       	brne	.-8      	; 0x13aa <log_in+0xf0>
    13b2:	00 c0       	rjmp	.+0      	; 0x13b4 <log_in+0xfa>
    13b4:	00 00       	nop
    13b6:	c3 cf       	rjmp	.-122    	; 0x133e <log_in+0x84>

//This function rotates the motor in counter_clock wise direction which means that the door is closed

void open_the_door (void)
{
	DIO_write('B', MOTOR_EN, HIGH);		//EN = 1
    13b8:	82 e4       	ldi	r24, 0x42	; 66
    13ba:	63 e0       	ldi	r22, 0x03	; 3
    13bc:	41 e0       	ldi	r20, 0x01	; 1
    13be:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	DIO_write('B', MOTOR_IN1, HIGH);	//IN1 = 1
    13c2:	82 e4       	ldi	r24, 0x42	; 66
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	DIO_write('B', MOTOR_IN2, LOW);		//IN2 = 0
    13cc:	82 e4       	ldi	r24, 0x42	; 66
    13ce:	61 e0       	ldi	r22, 0x01	; 1
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	lcd_clear();
    13d6:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
	lcd_print(" The door is opened");
    13da:	84 e3       	ldi	r24, 0x34	; 52
    13dc:	91 e0       	ldi	r25, 0x01	; 1
    13de:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
    13e2:	8f e7       	ldi	r24, 0x7F	; 127
    13e4:	9a e1       	ldi	r25, 0x1A	; 26
    13e6:	a6 e0       	ldi	r26, 0x06	; 6
    13e8:	81 50       	subi	r24, 0x01	; 1
    13ea:	90 40       	sbci	r25, 0x00	; 0
    13ec:	a0 40       	sbci	r26, 0x00	; 0
    13ee:	e1 f7       	brne	.-8      	; 0x13e8 <log_in+0x12e>
    13f0:	00 c0       	rjmp	.+0      	; 0x13f2 <log_in+0x138>
    13f2:	00 00       	nop
	_delay_ms(2000);
	DIO_write('B', MOTOR_EN, LOW);		//EN = 0
    13f4:	82 e4       	ldi	r24, 0x42	; 66
    13f6:	63 e0       	ldi	r22, 0x03	; 3
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	eeprom_write(NUM_OF_TRIALS_ADDR,0);
    13fe:	89 e1       	ldi	r24, 0x19	; 25
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write>
    1408:	9c cf       	rjmp	.-200    	; 0x1342 <log_in+0x88>

0000140a <main>:
unsigned char is_door_is_permanently_closed(void);

/*************************************************************************************************************/

int main(void)
{			
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	2b 97       	sbiw	r28, 0x0b	; 11
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
	unsigned char choice = 0;			
	init();
    141e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <init>
    1422:	6e 01       	movw	r12, r28
    1424:	08 94       	sec
    1426:	c1 1c       	adc	r12, r1
    1428:	d1 1c       	adc	r13, r1
//This function changes the password of user. It firstly asks to enter his old password and if it is right, It
//will ask you to enter your new password two times. 

void change_password(void)
{
	unsigned char old_password[10] = {0};		//Old password is stored here
    142a:	6a e0       	ldi	r22, 0x0A	; 10
    142c:	b6 2e       	mov	r11, r22
//This function tells the user to enter the saved password and then checks if it is right or not
//using check_password function. And then make a decision upon the results

void log_in (void)
{
	unsigned char entered_password[11] = {0};				//The entered password is saved here
    142e:	7b e0       	ldi	r23, 0x0B	; 11
    1430:	a7 2e       	mov	r10, r23
	
	while(1)
	{
		//Check firstly if the door is permanently locked or not (if the user enters the password 9 times wrong,
		//the door will be locked permanently.
		if(eeprom_read(26) == 0xFF)
    1432:	8a e1       	ldi	r24, 0x1A	; 26
    1434:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    1438:	8f 3f       	cpi	r24, 0xFF	; 255
    143a:	09 f4       	brne	.+2      	; 0x143e <main+0x34>
    143c:	60 c0       	rjmp	.+192    	; 0x14fe <main+0xf4>

//This function prints a welcome message to the user

void welcome_message (void)
{
	lcd_clear();
    143e:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
	lcd_print(" Password-lock door");
    1442:	80 e7       	ldi	r24, 0x70	; 112
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
	lcd_gotoxy(1,2);
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	62 e0       	ldi	r22, 0x02	; 2
    144e:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
	lcd_print("      Welcome!");
    1452:	84 e8       	ldi	r24, 0x84	; 132
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
		}		
		//Print Hello message on screen
		welcome_message();
		
		//Press any key to go to choose list
		get_key();
    145a:	0e 94 a7 02 	call	0x54e	; 0x54e <get_key>

//This function lists the possible choices for user

void choose_list (void)
{
	lcd_clear();
    145e:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
	lcd_print("(1)Log-in");
    1462:	83 e9       	ldi	r24, 0x93	; 147
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
	lcd_gotoxy(1,2);
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	62 e0       	ldi	r22, 0x02	; 2
    146e:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
	lcd_print("(2)Change Password");
    1472:	8d e9       	ldi	r24, 0x9D	; 157
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
		get_key();
		
		do 
		{
			choose_list();
			choice = get_key();
    147a:	0e 94 a7 02 	call	0x54e	; 0x54e <get_key>
		} while (choice != '1' && choice != '2');
    147e:	98 2f       	mov	r25, r24
    1480:	91 53       	subi	r25, 0x31	; 49
    1482:	92 30       	cpi	r25, 0x02	; 2
    1484:	60 f7       	brcc	.-40     	; 0x145e <main+0x54>
//This function tells the user to enter the saved password and then checks if it is right or not
//using check_password function. And then make a decision upon the results

void log_in (void)
{
	unsigned char entered_password[11] = {0};				//The entered password is saved here
    1486:	d6 01       	movw	r26, r12
		{
			choose_list();
			choice = get_key();
		} while (choice != '1' && choice != '2');
		
		if(choice == '1')
    1488:	81 33       	cpi	r24, 0x31	; 49
    148a:	09 f4       	brne	.+2      	; 0x148e <main+0x84>
    148c:	66 c0       	rjmp	.+204    	; 0x155a <main+0x150>
//This function changes the password of user. It firstly asks to enter his old password and if it is right, It
//will ask you to enter your new password two times. 

void change_password(void)
{
	unsigned char old_password[10] = {0};		//Old password is stored here
    148e:	eb 2d       	mov	r30, r11
    1490:	1d 92       	st	X+, r1
    1492:	ea 95       	dec	r30
    1494:	e9 f7       	brne	.-6      	; 0x1490 <main+0x86>
	unsigned char length = 0;					//length of old password is stored here
	
	lcd_clear();
    1496:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
	lcd_print("Enter old password:");
    149a:	8a e1       	ldi	r24, 0x1A	; 26
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
	lcd_gotoxy(1,2);
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	62 e0       	ldi	r22, 0x02	; 2
    14a6:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
unsigned char get_password(unsigned char* pass)
{
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
    14aa:	0e 94 c3 03 	call	0x786	; 0x786 <lcd_cursor_on>
	
	for(cnt = 0; cnt <= 10 ; )
    14ae:	00 e0       	ldi	r16, 0x00	; 0
    14b0:	10 e0       	ldi	r17, 0x00	; 0
	{
		key = get_key();
    14b2:	0e 94 a7 02 	call	0x54e	; 0x54e <get_key>
		
		if(key == '#')
    14b6:	83 32       	cpi	r24, 0x23	; 35
    14b8:	91 f0       	breq	.+36     	; 0x14de <main+0xd4>
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
    14ba:	8a 32       	cpi	r24, 0x2A	; 42
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <main+0xb6>
    14be:	3f c0       	rjmp	.+126    	; 0x153e <main+0x134>
		}
		else if(key == '*' && cnt <= 0)
		{
			cnt = 0;
		}
		else if(cnt != 10)
    14c0:	0a 30       	cpi	r16, 0x0A	; 10
    14c2:	11 05       	cpc	r17, r1
    14c4:	b1 f3       	breq	.-20     	; 0x14b2 <main+0xa8>
		{
			pass[cnt++] = key;
    14c6:	f6 01       	movw	r30, r12
    14c8:	e0 0f       	add	r30, r16
    14ca:	f1 1f       	adc	r31, r17
    14cc:	80 83       	st	Z, r24
    14ce:	0f 5f       	subi	r16, 0xFF	; 255
    14d0:	1f 4f       	sbci	r17, 0xFF	; 255
			lcdData('*');
    14d2:	8a e2       	ldi	r24, 0x2A	; 42
    14d4:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
	
	for(cnt = 0; cnt <= 10 ; )
    14d8:	0b 30       	cpi	r16, 0x0B	; 11
    14da:	11 05       	cpc	r17, r1
    14dc:	54 f3       	brlt	.-44     	; 0x14b2 <main+0xa8>
			pass[cnt++] = key;
			lcdData('*');
		}
	}

	lcd_cursor_off();
    14de:	0e 94 cc 03 	call	0x798	; 0x798 <lcd_cursor_off>

unsigned char check_password(unsigned char len, unsigned char* password)
{	
	unsigned char i = 0;				//Just a counter variable
	
	if(eeprom_read(0x0001) != len)		//Length is stored in EEPROM location 0x0001
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    14e8:	08 17       	cp	r16, r24
    14ea:	09 f4       	brne	.+2      	; 0x14ee <main+0xe4>
    14ec:	74 c0       	rjmp	.+232    	; 0x15d6 <main+0x1cc>
		sign_up();
	}
	else
	{
		
		change_password();
    14ee:	0e 94 4b 06 	call	0xc96	; 0xc96 <change_password>
	
	while(1)
	{
		//Check firstly if the door is permanently locked or not (if the user enters the password 9 times wrong,
		//the door will be locked permanently.
		if(eeprom_read(26) == 0xFF)
    14f2:	8a e1       	ldi	r24, 0x1A	; 26
    14f4:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    14f8:	8f 3f       	cpi	r24, 0xFF	; 255
    14fa:	09 f0       	breq	.+2      	; 0x14fe <main+0xf4>
    14fc:	a0 cf       	rjmp	.-192    	; 0x143e <main+0x34>
		{			
			unsigned char chk = 0;
			do
			{
				chk = get_puk_code();
    14fe:	0e 94 e7 07 	call	0xfce	; 0xfce <get_puk_code>
				
			} while (!chk);
    1502:	88 23       	and	r24, r24
    1504:	e1 f3       	breq	.-8      	; 0x14fe <main+0xf4>
			
		
			lcd_clear();
    1506:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
			lcd_print("Successful operation");
    150a:	81 ea       	ldi	r24, 0xA1	; 161
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
			eeprom_write(26,0);
    1512:	8a e1       	ldi	r24, 0x1A	; 26
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write>
			eeprom_write(NUM_OF_TRIALS_ADDR,0);
    151c:	89 e1       	ldi	r24, 0x19	; 25
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write>
    1526:	8f e3       	ldi	r24, 0x3F	; 63
    1528:	9d e0       	ldi	r25, 0x0D	; 13
    152a:	a3 e0       	ldi	r26, 0x03	; 3
    152c:	81 50       	subi	r24, 0x01	; 1
    152e:	90 40       	sbci	r25, 0x00	; 0
    1530:	a0 40       	sbci	r26, 0x00	; 0
    1532:	e1 f7       	brne	.-8      	; 0x152c <main+0x122>
    1534:	00 c0       	rjmp	.+0      	; 0x1536 <main+0x12c>
    1536:	00 00       	nop
			_delay_ms(1000);
			sign_up();
    1538:	0e 94 19 05 	call	0xa32	; 0xa32 <sign_up>
    153c:	80 cf       	rjmp	.-256    	; 0x143e <main+0x34>
		if(key == '#')
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
    153e:	01 15       	cp	r16, r1
    1540:	11 05       	cpc	r17, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <main+0x13c>
    1544:	b6 cf       	rjmp	.-148    	; 0x14b2 <main+0xa8>
		{
			lcd_move_cursor_left();
    1546:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			lcdData(' ');
    154a:	80 e2       	ldi	r24, 0x20	; 32
    154c:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
			lcd_move_cursor_left();
    1550:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			cnt --;	
    1554:	01 50       	subi	r16, 0x01	; 1
    1556:	10 40       	sbci	r17, 0x00	; 0
    1558:	bf cf       	rjmp	.-130    	; 0x14d8 <main+0xce>
//This function tells the user to enter the saved password and then checks if it is right or not
//using check_password function. And then make a decision upon the results

void log_in (void)
{
	unsigned char entered_password[11] = {0};				//The entered password is saved here
    155a:	ea 2d       	mov	r30, r10
    155c:	1d 92       	st	X+, r1
    155e:	ea 95       	dec	r30
    1560:	e9 f7       	brne	.-6      	; 0x155c <main+0x152>
	unsigned char length = 0;								//Length of entered password
	
	lcd_clear();
    1562:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
	lcd_print("Enter your password: ");
    1566:	85 ec       	ldi	r24, 0xC5	; 197
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
	lcd_gotoxy(1,2);
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	62 e0       	ldi	r22, 0x02	; 2
    1572:	0e 94 a1 03 	call	0x742	; 0x742 <lcd_gotoxy>
unsigned char get_password(unsigned char* pass)
{
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
    1576:	0e 94 c3 03 	call	0x786	; 0x786 <lcd_cursor_on>
	
	for(cnt = 0; cnt <= 10 ; )
    157a:	00 e0       	ldi	r16, 0x00	; 0
    157c:	10 e0       	ldi	r17, 0x00	; 0
	{
		key = get_key();
    157e:	0e 94 a7 02 	call	0x54e	; 0x54e <get_key>
		
		if(key == '#')
    1582:	83 32       	cpi	r24, 0x23	; 35
    1584:	89 f0       	breq	.+34     	; 0x15a8 <main+0x19e>
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
    1586:	8a 32       	cpi	r24, 0x2A	; 42
    1588:	c9 f0       	breq	.+50     	; 0x15bc <main+0x1b2>
		}
		else if(key == '*' && cnt <= 0)
		{
			cnt = 0;
		}
		else if(cnt != 10)
    158a:	0a 30       	cpi	r16, 0x0A	; 10
    158c:	11 05       	cpc	r17, r1
    158e:	b9 f3       	breq	.-18     	; 0x157e <main+0x174>
		{
			pass[cnt++] = key;
    1590:	f6 01       	movw	r30, r12
    1592:	e0 0f       	add	r30, r16
    1594:	f1 1f       	adc	r31, r17
    1596:	80 83       	st	Z, r24
    1598:	0f 5f       	subi	r16, 0xFF	; 255
    159a:	1f 4f       	sbci	r17, 0xFF	; 255
			lcdData('*');
    159c:	8a e2       	ldi	r24, 0x2A	; 42
    159e:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
	int cnt = 0;
	unsigned char key = 0;
	
	lcd_cursor_on();
	
	for(cnt = 0; cnt <= 10 ; )
    15a2:	0b 30       	cpi	r16, 0x0B	; 11
    15a4:	11 05       	cpc	r17, r1
    15a6:	5c f3       	brlt	.-42     	; 0x157e <main+0x174>
			pass[cnt++] = key;
			lcdData('*');
		}
	}

	lcd_cursor_off();
    15a8:	0e 94 cc 03 	call	0x798	; 0x798 <lcd_cursor_off>

unsigned char check_password(unsigned char len, unsigned char* password)
{	
	unsigned char i = 0;				//Just a counter variable
	
	if(eeprom_read(0x0001) != len)		//Length is stored in EEPROM location 0x0001
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    15b2:	08 17       	cp	r16, r24
    15b4:	91 f1       	breq	.+100    	; 0x161a <main+0x210>
	{
		open_the_door();
	}
	else
	{
		try_again();
    15b6:	0e 94 cd 08 	call	0x119a	; 0x119a <try_again>
    15ba:	3b cf       	rjmp	.-394    	; 0x1432 <main+0x28>
		if(key == '#')
		{
			break;
		}
		
		else if(key == '*' && cnt > 0)
    15bc:	01 15       	cp	r16, r1
    15be:	11 05       	cpc	r17, r1
    15c0:	f1 f2       	breq	.-68     	; 0x157e <main+0x174>
		{
			lcd_move_cursor_left();
    15c2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			lcdData(' ');
    15c6:	80 e2       	ldi	r24, 0x20	; 32
    15c8:	0e 94 8c 03 	call	0x718	; 0x718 <lcdData>
			lcd_move_cursor_left();
    15cc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_move_cursor_left>
			cnt --;	
    15d0:	01 50       	subi	r16, 0x01	; 1
    15d2:	10 40       	sbci	r17, 0x00	; 0
    15d4:	e6 cf       	rjmp	.-52     	; 0x15a2 <main+0x198>
	{
		return 0;
	}
	else
	{
		for(i = 0; i < len; i++)
    15d6:	00 23       	and	r16, r16
    15d8:	09 f4       	brne	.+2      	; 0x15dc <main+0x1d2>
    15da:	40 c0       	rjmp	.+128    	; 0x165c <main+0x252>
    15dc:	76 01       	movw	r14, r12
void try_again (void);
unsigned char is_door_is_permanently_closed(void);

/*************************************************************************************************************/

int main(void)
    15de:	0e 5f       	subi	r16, 0xFE	; 254
    15e0:	12 e0       	ldi	r17, 0x02	; 2
    15e2:	03 c0       	rjmp	.+6      	; 0x15ea <main+0x1e0>
    15e4:	1f 5f       	subi	r17, 0xFF	; 255
	{
		return 0;
	}
	else
	{
		for(i = 0; i < len; i++)
    15e6:	10 17       	cp	r17, r16
    15e8:	c9 f1       	breq	.+114    	; 0x165c <main+0x252>
		{
			if(password[i] != eeprom_read(i+2))		//Password is stored in EEPROM from location 2 to 12
    15ea:	d7 01       	movw	r26, r14
    15ec:	9d 90       	ld	r9, X+
    15ee:	7d 01       	movw	r14, r26
    15f0:	81 2f       	mov	r24, r17
    15f2:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    15f6:	98 16       	cp	r9, r24
    15f8:	a9 f3       	breq	.-22     	; 0x15e4 <main+0x1da>
			{
				lcd_clear();
    15fa:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
				lcd_print("break");
    15fe:	8e e2       	ldi	r24, 0x2E	; 46
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
    1606:	8f e3       	ldi	r24, 0x3F	; 63
    1608:	9d e0       	ldi	r25, 0x0D	; 13
    160a:	a3 e0       	ldi	r26, 0x03	; 3
    160c:	81 50       	subi	r24, 0x01	; 1
    160e:	90 40       	sbci	r25, 0x00	; 0
    1610:	a0 40       	sbci	r26, 0x00	; 0
    1612:	e1 f7       	brne	.-8      	; 0x160c <main+0x202>
    1614:	00 c0       	rjmp	.+0      	; 0x1616 <main+0x20c>
    1616:	00 00       	nop
    1618:	6a cf       	rjmp	.-300    	; 0x14ee <main+0xe4>
	{
		return 0;
	}
	else
	{
		for(i = 0; i < len; i++)
    161a:	00 23       	and	r16, r16
    161c:	11 f1       	breq	.+68     	; 0x1662 <main+0x258>
    161e:	76 01       	movw	r14, r12
void try_again (void);
unsigned char is_door_is_permanently_closed(void);

/*************************************************************************************************************/

int main(void)
    1620:	0e 5f       	subi	r16, 0xFE	; 254
    1622:	12 e0       	ldi	r17, 0x02	; 2
    1624:	03 c0       	rjmp	.+6      	; 0x162c <main+0x222>
    1626:	1f 5f       	subi	r17, 0xFF	; 255
	{
		return 0;
	}
	else
	{
		for(i = 0; i < len; i++)
    1628:	10 17       	cp	r17, r16
    162a:	d9 f0       	breq	.+54     	; 0x1662 <main+0x258>
		{
			if(password[i] != eeprom_read(i+2))		//Password is stored in EEPROM from location 2 to 12
    162c:	d7 01       	movw	r26, r14
    162e:	9d 90       	ld	r9, X+
    1630:	7d 01       	movw	r14, r26
    1632:	81 2f       	mov	r24, r17
    1634:	0e 94 57 02 	call	0x4ae	; 0x4ae <eeprom_read>
    1638:	98 16       	cp	r9, r24
    163a:	a9 f3       	breq	.-22     	; 0x1626 <main+0x21c>
			{
				lcd_clear();
    163c:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
				lcd_print("break");
    1640:	8e e2       	ldi	r24, 0x2E	; 46
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
    1648:	8f e3       	ldi	r24, 0x3F	; 63
    164a:	9d e0       	ldi	r25, 0x0D	; 13
    164c:	a3 e0       	ldi	r26, 0x03	; 3
    164e:	81 50       	subi	r24, 0x01	; 1
    1650:	90 40       	sbci	r25, 0x00	; 0
    1652:	a0 40       	sbci	r26, 0x00	; 0
    1654:	e1 f7       	brne	.-8      	; 0x164e <main+0x244>
    1656:	00 c0       	rjmp	.+0      	; 0x1658 <main+0x24e>
    1658:	00 00       	nop
    165a:	ad cf       	rjmp	.-166    	; 0x15b6 <main+0x1ac>
	lcd_print("Enter old password:");
	lcd_gotoxy(1,2);
	length = get_password(old_password);
	if (check_password(length, old_password))
	{
		sign_up();
    165c:	0e 94 19 05 	call	0xa32	; 0xa32 <sign_up>
    1660:	e8 ce       	rjmp	.-560    	; 0x1432 <main+0x28>

//This function rotates the motor in counter_clock wise direction which means that the door is closed

void open_the_door (void)
{
	DIO_write('B', MOTOR_EN, HIGH);		//EN = 1
    1662:	82 e4       	ldi	r24, 0x42	; 66
    1664:	63 e0       	ldi	r22, 0x03	; 3
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	DIO_write('B', MOTOR_IN1, HIGH);	//IN1 = 1
    166c:	82 e4       	ldi	r24, 0x42	; 66
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	DIO_write('B', MOTOR_IN2, LOW);		//IN2 = 0
    1676:	82 e4       	ldi	r24, 0x42	; 66
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	lcd_clear();
    1680:	0e 94 08 04 	call	0x810	; 0x810 <lcd_clear>
	lcd_print(" The door is opened");
    1684:	84 e3       	ldi	r24, 0x34	; 52
    1686:	91 e0       	ldi	r25, 0x01	; 1
    1688:	0e 94 e7 03 	call	0x7ce	; 0x7ce <lcd_print>
    168c:	8f e7       	ldi	r24, 0x7F	; 127
    168e:	9a e1       	ldi	r25, 0x1A	; 26
    1690:	a6 e0       	ldi	r26, 0x06	; 6
    1692:	81 50       	subi	r24, 0x01	; 1
    1694:	90 40       	sbci	r25, 0x00	; 0
    1696:	a0 40       	sbci	r26, 0x00	; 0
    1698:	e1 f7       	brne	.-8      	; 0x1692 <main+0x288>
    169a:	00 c0       	rjmp	.+0      	; 0x169c <main+0x292>
    169c:	00 00       	nop
	_delay_ms(2000);
	DIO_write('B', MOTOR_EN, LOW);		//EN = 0
    169e:	82 e4       	ldi	r24, 0x42	; 66
    16a0:	63 e0       	ldi	r22, 0x03	; 3
    16a2:	40 e0       	ldi	r20, 0x00	; 0
    16a4:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_write>
	eeprom_write(NUM_OF_TRIALS_ADDR,0);
    16a8:	89 e1       	ldi	r24, 0x19	; 25
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write>
    16b2:	bf ce       	rjmp	.-642    	; 0x1432 <main+0x28>

000016b4 <itoa>:
    16b4:	fb 01       	movw	r30, r22
    16b6:	9f 01       	movw	r18, r30
    16b8:	e8 94       	clt
    16ba:	42 30       	cpi	r20, 0x02	; 2
    16bc:	c4 f0       	brlt	.+48     	; 0x16ee <itoa+0x3a>
    16be:	45 32       	cpi	r20, 0x25	; 37
    16c0:	b4 f4       	brge	.+44     	; 0x16ee <itoa+0x3a>
    16c2:	4a 30       	cpi	r20, 0x0A	; 10
    16c4:	29 f4       	brne	.+10     	; 0x16d0 <itoa+0x1c>
    16c6:	97 fb       	bst	r25, 7
    16c8:	1e f4       	brtc	.+6      	; 0x16d0 <itoa+0x1c>
    16ca:	90 95       	com	r25
    16cc:	81 95       	neg	r24
    16ce:	9f 4f       	sbci	r25, 0xFF	; 255
    16d0:	64 2f       	mov	r22, r20
    16d2:	77 27       	eor	r23, r23
    16d4:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__udivmodhi4>
    16d8:	80 5d       	subi	r24, 0xD0	; 208
    16da:	8a 33       	cpi	r24, 0x3A	; 58
    16dc:	0c f0       	brlt	.+2      	; 0x16e0 <itoa+0x2c>
    16de:	89 5d       	subi	r24, 0xD9	; 217
    16e0:	81 93       	st	Z+, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	a1 f7       	brne	.-24     	; 0x16d0 <itoa+0x1c>
    16e8:	16 f4       	brtc	.+4      	; 0x16ee <itoa+0x3a>
    16ea:	5d e2       	ldi	r21, 0x2D	; 45
    16ec:	51 93       	st	Z+, r21
    16ee:	10 82       	st	Z, r1
    16f0:	c9 01       	movw	r24, r18
    16f2:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <strrev>

000016f6 <strrev>:
    16f6:	dc 01       	movw	r26, r24
    16f8:	fc 01       	movw	r30, r24
    16fa:	67 2f       	mov	r22, r23
    16fc:	71 91       	ld	r23, Z+
    16fe:	77 23       	and	r23, r23
    1700:	e1 f7       	brne	.-8      	; 0x16fa <strrev+0x4>
    1702:	32 97       	sbiw	r30, 0x02	; 2
    1704:	04 c0       	rjmp	.+8      	; 0x170e <strrev+0x18>
    1706:	7c 91       	ld	r23, X
    1708:	6d 93       	st	X+, r22
    170a:	70 83       	st	Z, r23
    170c:	62 91       	ld	r22, -Z
    170e:	ae 17       	cp	r26, r30
    1710:	bf 07       	cpc	r27, r31
    1712:	c8 f3       	brcs	.-14     	; 0x1706 <strrev+0x10>
    1714:	08 95       	ret

00001716 <__udivmodhi4>:
    1716:	aa 1b       	sub	r26, r26
    1718:	bb 1b       	sub	r27, r27
    171a:	51 e1       	ldi	r21, 0x11	; 17
    171c:	07 c0       	rjmp	.+14     	; 0x172c <__udivmodhi4_ep>

0000171e <__udivmodhi4_loop>:
    171e:	aa 1f       	adc	r26, r26
    1720:	bb 1f       	adc	r27, r27
    1722:	a6 17       	cp	r26, r22
    1724:	b7 07       	cpc	r27, r23
    1726:	10 f0       	brcs	.+4      	; 0x172c <__udivmodhi4_ep>
    1728:	a6 1b       	sub	r26, r22
    172a:	b7 0b       	sbc	r27, r23

0000172c <__udivmodhi4_ep>:
    172c:	88 1f       	adc	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	5a 95       	dec	r21
    1732:	a9 f7       	brne	.-22     	; 0x171e <__udivmodhi4_loop>
    1734:	80 95       	com	r24
    1736:	90 95       	com	r25
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	08 95       	ret

0000173e <_exit>:
    173e:	f8 94       	cli

00001740 <__stop_program>:
    1740:	ff cf       	rjmp	.-2      	; 0x1740 <__stop_program>
