
Password-activated door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  00000f00  00000f94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  008001ac  008001ac  000010e0  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000010e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00001b88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001271  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000785  00000000  00000000  00002f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d92  00000000  00000000  000036de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  00004470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000454  00000000  00000000  00004894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f35  00000000  00000000  00004ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00005c1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3a       	cpi	r26, 0xAC	; 172
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	ac ea       	ldi	r26, 0xAC	; 172
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 31       	cpi	r26, 0x11	; 17
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 21 07 	call	0xe42	; 0xe42 <main>
  8a:	0c 94 7e 07 	jmp	0xefc	; 0xefc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_clkPrescaler>:
//****************************************************************************
//This function selects the conversion time of the ADC
//NB: for no prescaler enter "1"
void adc_clkPrescaler(unsigned char prescaler)
{
	ADCSRA &= (~(1<<ADPS0)) & (~(1<<ADPS1)) & (~(1<<ADPS2)); // clear ADPS2:ADPS0 for initialization
  92:	96 b1       	in	r25, 0x06	; 6
  94:	98 7f       	andi	r25, 0xF8	; 248
  96:	96 b9       	out	0x06, r25	; 6
	
	switch(prescaler)
  98:	80 31       	cpi	r24, 0x10	; 16
  9a:	c1 f0       	breq	.+48     	; 0xcc <adc_clkPrescaler+0x3a>
  9c:	81 31       	cpi	r24, 0x11	; 17
  9e:	38 f4       	brcc	.+14     	; 0xae <adc_clkPrescaler+0x1c>
  a0:	84 30       	cpi	r24, 0x04	; 4
  a2:	71 f0       	breq	.+28     	; 0xc0 <adc_clkPrescaler+0x2e>
  a4:	88 30       	cpi	r24, 0x08	; 8
  a6:	71 f0       	breq	.+28     	; 0xc4 <adc_clkPrescaler+0x32>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	f1 f4       	brne	.+60     	; 0xe8 <adc_clkPrescaler+0x56>
  ac:	07 c0       	rjmp	.+14     	; 0xbc <adc_clkPrescaler+0x2a>
  ae:	80 34       	cpi	r24, 0x40	; 64
  b0:	99 f0       	breq	.+38     	; 0xd8 <adc_clkPrescaler+0x46>
  b2:	80 38       	cpi	r24, 0x80	; 128
  b4:	a9 f0       	breq	.+42     	; 0xe0 <adc_clkPrescaler+0x4e>
  b6:	80 32       	cpi	r24, 0x20	; 32
  b8:	b9 f4       	brne	.+46     	; 0xe8 <adc_clkPrescaler+0x56>
  ba:	0a c0       	rjmp	.+20     	; 0xd0 <adc_clkPrescaler+0x3e>
	{
		case 2:
			ADCSRA |= (1<<ADPS0);
  bc:	30 9a       	sbi	0x06, 0	; 6
			break;
  be:	08 95       	ret
		case 4:
			ADCSRA |= (1<<ADPS1);
  c0:	31 9a       	sbi	0x06, 1	; 6
			break;
  c2:	08 95       	ret
		case 8:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1);
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	86 b9       	out	0x06, r24	; 6
			break;
  ca:	08 95       	ret
		case 16:
			ADCSRA |= (1<<ADPS2);
  cc:	32 9a       	sbi	0x06, 2	; 6
			break;
  ce:	08 95       	ret
		case 32:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS2);
  d0:	86 b1       	in	r24, 0x06	; 6
  d2:	85 60       	ori	r24, 0x05	; 5
  d4:	86 b9       	out	0x06, r24	; 6
			break;
  d6:	08 95       	ret
		case 64:
			ADCSRA |= (1<<ADPS1) | (1<<ADPS2);
  d8:	86 b1       	in	r24, 0x06	; 6
  da:	86 60       	ori	r24, 0x06	; 6
  dc:	86 b9       	out	0x06, r24	; 6
			break;
  de:	08 95       	ret
		case 128:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
  e0:	86 b1       	in	r24, 0x06	; 6
  e2:	87 60       	ori	r24, 0x07	; 7
  e4:	86 b9       	out	0x06, r24	; 6
			break;
  e6:	08 95       	ret
		default:
			ADCSRA |= 0x00;			//don't change any thing if no prescalar
  e8:	86 b1       	in	r24, 0x06	; 6
  ea:	86 b9       	out	0x06, r24	; 6
  ec:	08 95       	ret

000000ee <adc_voltageReference>:
}
//****************************************************************************
//This function selects the voltage reference
void adc_voltageReference(unsigned char Vref)
{
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
  ee:	97 b1       	in	r25, 0x07	; 7
  f0:	9f 73       	andi	r25, 0x3F	; 63
  f2:	97 b9       	out	0x07, r25	; 7
	
	switch(Vref)
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	41 f0       	breq	.+16     	; 0x108 <adc_voltageReference+0x1a>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	18 f0       	brcs	.+6      	; 0x102 <adc_voltageReference+0x14>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	51 f4       	brne	.+20     	; 0x114 <adc_voltageReference+0x26>
 100:	05 c0       	rjmp	.+10     	; 0x10c <adc_voltageReference+0x1e>
	{
		case AREF:
			ADMUX |= 0x00;
 102:	87 b1       	in	r24, 0x07	; 7
 104:	87 b9       	out	0x07, r24	; 7
			break;
 106:	08 95       	ret
		case AVCC:
			ADMUX |= (1<<REFS0);
 108:	3e 9a       	sbi	0x07, 6	; 7
			break;
 10a:	08 95       	ret
		case INTERNAL:
			ADMUX |= (1<<REFS0) | (1<<REFS1);
 10c:	87 b1       	in	r24, 0x07	; 7
 10e:	80 6c       	ori	r24, 0xC0	; 192
 110:	87 b9       	out	0x07, r24	; 7
			break;
 112:	08 95       	ret
		default:
			ADMUX |= 0x00;
 114:	87 b1       	in	r24, 0x07	; 7
 116:	87 b9       	out	0x07, r24	; 7
 118:	08 95       	ret

0000011a <adc_init>:
#include "ADC.h"

//****************************************************************************
//This function enables ADC module
void adc_init(unsigned char prescaler, unsigned char vref, unsigned char location)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	d6 2f       	mov	r29, r22
 120:	c4 2f       	mov	r28, r20
	ADCSRA |= (1<<ADEN); //enable ADC
 122:	37 9a       	sbi	0x06, 7	; 6
	adc_clkPrescaler(prescaler);
 124:	0e 94 49 00 	call	0x92	; 0x92 <adc_clkPrescaler>
	adc_voltageReference(vref);
 128:	8d 2f       	mov	r24, r29
 12a:	0e 94 77 00 	call	0xee	; 0xee <adc_voltageReference>
	location ? (ADMUX |= (1<<ADLAR)) : (ADMUX &= ~(1<<ADLAR)); // If true location is left-justified and vice versa
 12e:	cc 23       	and	r28, r28
 130:	11 f0       	breq	.+4      	; 0x136 <adc_init+0x1c>
 132:	3d 9a       	sbi	0x07, 5	; 7
 134:	01 c0       	rjmp	.+2      	; 0x138 <adc_init+0x1e>
 136:	3d 98       	cbi	0x07, 5	; 7
	return;
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <adc_inputChannel>:
}
//****************************************************************************
//This function tells the ADC module to start conversion
void adc_inputChannel(unsigned char input_channel)
{
	ADMUX &= 0xC0; // clear MUX4:MUX0 and ADLAR bit for initialization
 13e:	97 b1       	in	r25, 0x07	; 7
 140:	90 7c       	andi	r25, 0xC0	; 192
 142:	97 b9       	out	0x07, r25	; 7
	
	switch(input_channel)
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	b9 f0       	breq	.+46     	; 0x176 <adc_inputChannel+0x38>
 148:	84 30       	cpi	r24, 0x04	; 4
 14a:	28 f4       	brcc	.+10     	; 0x156 <adc_inputChannel+0x18>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	79 f0       	breq	.+30     	; 0x16e <adc_inputChannel+0x30>
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	78 f4       	brcc	.+30     	; 0x172 <adc_inputChannel+0x34>
 154:	09 c0       	rjmp	.+18     	; 0x168 <adc_inputChannel+0x2a>
 156:	85 30       	cpi	r24, 0x05	; 5
 158:	a1 f0       	breq	.+40     	; 0x182 <adc_inputChannel+0x44>
 15a:	85 30       	cpi	r24, 0x05	; 5
 15c:	80 f0       	brcs	.+32     	; 0x17e <adc_inputChannel+0x40>
 15e:	86 30       	cpi	r24, 0x06	; 6
 160:	a1 f0       	breq	.+40     	; 0x18a <adc_inputChannel+0x4c>
 162:	87 30       	cpi	r24, 0x07	; 7
 164:	d1 f4       	brne	.+52     	; 0x19a <adc_inputChannel+0x5c>
 166:	15 c0       	rjmp	.+42     	; 0x192 <adc_inputChannel+0x54>
	{
		case ADC0:
			ADMUX |= 0x00;
 168:	87 b1       	in	r24, 0x07	; 7
 16a:	87 b9       	out	0x07, r24	; 7
			break;
 16c:	08 95       	ret
		case ADC1:
			ADMUX |= (1<<MUX0);
 16e:	38 9a       	sbi	0x07, 0	; 7
			break;
 170:	08 95       	ret
		case ADC2:
			ADMUX |= (1<<MUX1);
 172:	39 9a       	sbi	0x07, 1	; 7
			break;
 174:	08 95       	ret
		case ADC3:
			ADMUX |= (1<<MUX0) | (1<<MUX1);
 176:	87 b1       	in	r24, 0x07	; 7
 178:	83 60       	ori	r24, 0x03	; 3
 17a:	87 b9       	out	0x07, r24	; 7
			break;
 17c:	08 95       	ret
		case ADC4:
			ADMUX |= (1<<MUX2);
 17e:	3a 9a       	sbi	0x07, 2	; 7
			break;
 180:	08 95       	ret
		case ADC5:
			ADMUX |= (1<<MUX0) | (1<<MUX2);
 182:	87 b1       	in	r24, 0x07	; 7
 184:	85 60       	ori	r24, 0x05	; 5
 186:	87 b9       	out	0x07, r24	; 7
			break;
 188:	08 95       	ret
		case ADC6:
			ADMUX |= (1<<MUX1) | (1<<MUX2);
 18a:	87 b1       	in	r24, 0x07	; 7
 18c:	86 60       	ori	r24, 0x06	; 6
 18e:	87 b9       	out	0x07, r24	; 7
			break;
 190:	08 95       	ret
		case ADC7:
			//ADMUX |= 0x07;
			ADMUX |= (1<<MUX0) | (1<<MUX1) | (1<<MUX2);
 192:	87 b1       	in	r24, 0x07	; 7
 194:	87 60       	ori	r24, 0x07	; 7
 196:	87 b9       	out	0x07, r24	; 7
			break;
 198:	08 95       	ret
		default:
			ADMUX |= (0x1F & input_channel);
 19a:	97 b1       	in	r25, 0x07	; 7
 19c:	8f 71       	andi	r24, 0x1F	; 31
 19e:	89 2b       	or	r24, r25
 1a0:	87 b9       	out	0x07, r24	; 7
 1a2:	08 95       	ret

000001a4 <adc_read>:
unsigned int adc_read(unsigned char input_channel)
{
	int analogReading = 0;
	unsigned char LSB;
	unsigned char MSB;
	adc_inputChannel(input_channel);
 1a4:	0e 94 9f 00 	call	0x13e	; 0x13e <adc_inputChannel>
	ADCSRA |= (1<<ADSC);    //start conversion
 1a8:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1<<ADIF)) == 0); //Wait until conversion is done
 1aa:	34 9b       	sbis	0x06, 4	; 6
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <adc_read+0x6>
	LSB = ADCL;
 1ae:	84 b1       	in	r24, 0x04	; 4
	MSB = ADCH;
 1b0:	95 b1       	in	r25, 0x05	; 5
	analogReading |= MSB;
	analogReading <<= 8;
 1b2:	39 2f       	mov	r19, r25
 1b4:	20 e0       	ldi	r18, 0x00	; 0
	analogReading |= LSB;
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	82 2b       	or	r24, r18
 1ba:	93 2b       	or	r25, r19
	return analogReading;	
}
 1bc:	08 95       	ret

000001be <DIO_pinmode>:

//This function sets the pin_number to either OUTPUT or INPUT

void DIO_pinmode(unsigned char port_char, unsigned char pin_number, unsigned char state)
{
	switch (port_char)
 1be:	84 34       	cpi	r24, 0x44	; 68
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <DIO_pinmode+0x6>
 1c2:	b8 c0       	rjmp	.+368    	; 0x334 <DIO_pinmode+0x176>
 1c4:	85 34       	cpi	r24, 0x45	; 69
 1c6:	50 f4       	brcc	.+20     	; 0x1dc <DIO_pinmode+0x1e>
 1c8:	82 34       	cpi	r24, 0x42	; 66
 1ca:	09 f4       	brne	.+2      	; 0x1ce <DIO_pinmode+0x10>
 1cc:	4b c0       	rjmp	.+150    	; 0x264 <DIO_pinmode+0xa6>
 1ce:	83 34       	cpi	r24, 0x43	; 67
 1d0:	08 f0       	brcs	.+2      	; 0x1d4 <DIO_pinmode+0x16>
 1d2:	7c c0       	rjmp	.+248    	; 0x2cc <DIO_pinmode+0x10e>
 1d4:	81 34       	cpi	r24, 0x41	; 65
 1d6:	09 f0       	breq	.+2      	; 0x1da <DIO_pinmode+0x1c>
 1d8:	df c0       	rjmp	.+446    	; 0x398 <DIO_pinmode+0x1da>
 1da:	10 c0       	rjmp	.+32     	; 0x1fc <DIO_pinmode+0x3e>
 1dc:	82 36       	cpi	r24, 0x62	; 98
 1de:	09 f4       	brne	.+2      	; 0x1e2 <DIO_pinmode+0x24>
 1e0:	41 c0       	rjmp	.+130    	; 0x264 <DIO_pinmode+0xa6>
 1e2:	83 36       	cpi	r24, 0x63	; 99
 1e4:	20 f4       	brcc	.+8      	; 0x1ee <DIO_pinmode+0x30>
 1e6:	81 36       	cpi	r24, 0x61	; 97
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_pinmode+0x2e>
 1ea:	d6 c0       	rjmp	.+428    	; 0x398 <DIO_pinmode+0x1da>
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <DIO_pinmode+0x3e>
 1ee:	83 36       	cpi	r24, 0x63	; 99
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <DIO_pinmode+0x36>
 1f2:	6c c0       	rjmp	.+216    	; 0x2cc <DIO_pinmode+0x10e>
 1f4:	84 36       	cpi	r24, 0x64	; 100
 1f6:	09 f0       	breq	.+2      	; 0x1fa <DIO_pinmode+0x3c>
 1f8:	cf c0       	rjmp	.+414    	; 0x398 <DIO_pinmode+0x1da>
 1fa:	9c c0       	rjmp	.+312    	; 0x334 <DIO_pinmode+0x176>
	{
		case 'A':
		case 'a':
		if(state == INPUT)
 1fc:	44 23       	and	r20, r20
 1fe:	71 f4       	brne	.+28     	; 0x21c <DIO_pinmode+0x5e>
			DDRA &= ~(1 << pin_number);
 200:	2a b3       	in	r18, 0x1a	; 26
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_pinmode+0x50>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_pinmode+0x4c>
 212:	ba 01       	movw	r22, r20
 214:	60 95       	com	r22
 216:	62 23       	and	r22, r18
 218:	6a bb       	out	0x1a, r22	; 26
 21a:	08 95       	ret
		else if (state == INPUT_PULLUP)
 21c:	42 30       	cpi	r20, 0x02	; 2
 21e:	91 f4       	brne	.+36     	; 0x244 <DIO_pinmode+0x86>
		{
			DDRA &= ~(1 << pin_number);
 220:	2a b3       	in	r18, 0x1a	; 26
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	ac 01       	movw	r20, r24
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_pinmode+0x70>
 22a:	44 0f       	add	r20, r20
 22c:	55 1f       	adc	r21, r21
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_pinmode+0x6c>
 232:	ba 01       	movw	r22, r20
 234:	84 2f       	mov	r24, r20
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	8a bb       	out	0x1a, r24	; 26
			PORTA |= (1 << pin_number);
 23c:	8b b3       	in	r24, 0x1b	; 27
 23e:	68 2b       	or	r22, r24
 240:	6b bb       	out	0x1b, r22	; 27
 242:	08 95       	ret
		}			
		else if (state == OUTPUT)
 244:	41 30       	cpi	r20, 0x01	; 1
 246:	09 f0       	breq	.+2      	; 0x24a <DIO_pinmode+0x8c>
 248:	a7 c0       	rjmp	.+334    	; 0x398 <DIO_pinmode+0x1da>
			DDRA |= (1 << pin_number);
 24a:	2a b3       	in	r18, 0x1a	; 26
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	ac 01       	movw	r20, r24
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_pinmode+0x9a>
 254:	44 0f       	add	r20, r20
 256:	55 1f       	adc	r21, r21
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_pinmode+0x96>
 25c:	ba 01       	movw	r22, r20
 25e:	62 2b       	or	r22, r18
 260:	6a bb       	out	0x1a, r22	; 26
 262:	08 95       	ret
		break;

		case 'B':
		case 'b':
		if(state == INPUT)
 264:	44 23       	and	r20, r20
 266:	71 f4       	brne	.+28     	; 0x284 <DIO_pinmode+0xc6>
			DDRB &= ~(1 << pin_number);
 268:	27 b3       	in	r18, 0x17	; 23
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	ac 01       	movw	r20, r24
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_pinmode+0xb8>
 272:	44 0f       	add	r20, r20
 274:	55 1f       	adc	r21, r21
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_pinmode+0xb4>
 27a:	ba 01       	movw	r22, r20
 27c:	60 95       	com	r22
 27e:	62 23       	and	r22, r18
 280:	67 bb       	out	0x17, r22	; 23
 282:	08 95       	ret
		else if (state == INPUT_PULLUP)
 284:	42 30       	cpi	r20, 0x02	; 2
 286:	91 f4       	brne	.+36     	; 0x2ac <DIO_pinmode+0xee>
		{
			DDRB &= ~(1 << pin_number);
 288:	27 b3       	in	r18, 0x17	; 23
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	ac 01       	movw	r20, r24
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_pinmode+0xd8>
 292:	44 0f       	add	r20, r20
 294:	55 1f       	adc	r21, r21
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_pinmode+0xd4>
 29a:	ba 01       	movw	r22, r20
 29c:	84 2f       	mov	r24, r20
 29e:	80 95       	com	r24
 2a0:	82 23       	and	r24, r18
 2a2:	87 bb       	out	0x17, r24	; 23
			PORTB |= (1 << pin_number);		
 2a4:	88 b3       	in	r24, 0x18	; 24
 2a6:	68 2b       	or	r22, r24
 2a8:	68 bb       	out	0x18, r22	; 24
 2aa:	08 95       	ret
		}				
		else if (state == OUTPUT)
 2ac:	41 30       	cpi	r20, 0x01	; 1
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <DIO_pinmode+0xf4>
 2b0:	73 c0       	rjmp	.+230    	; 0x398 <DIO_pinmode+0x1da>
			DDRB |= (1 << pin_number);		
 2b2:	27 b3       	in	r18, 0x17	; 23
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	ac 01       	movw	r20, r24
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_pinmode+0x102>
 2bc:	44 0f       	add	r20, r20
 2be:	55 1f       	adc	r21, r21
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_pinmode+0xfe>
 2c4:	ba 01       	movw	r22, r20
 2c6:	62 2b       	or	r22, r18
 2c8:	67 bb       	out	0x17, r22	; 23
 2ca:	08 95       	ret
		break;
		
		case 'C':
		case 'c':
		if(state == INPUT)
 2cc:	44 23       	and	r20, r20
 2ce:	71 f4       	brne	.+28     	; 0x2ec <DIO_pinmode+0x12e>
			DDRC &= ~(1 << pin_number);
 2d0:	24 b3       	in	r18, 0x14	; 20
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	ac 01       	movw	r20, r24
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_pinmode+0x120>
 2da:	44 0f       	add	r20, r20
 2dc:	55 1f       	adc	r21, r21
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_pinmode+0x11c>
 2e2:	ba 01       	movw	r22, r20
 2e4:	60 95       	com	r22
 2e6:	62 23       	and	r22, r18
 2e8:	64 bb       	out	0x14, r22	; 20
 2ea:	08 95       	ret
		else if (state == INPUT_PULLUP)
 2ec:	42 30       	cpi	r20, 0x02	; 2
 2ee:	91 f4       	brne	.+36     	; 0x314 <DIO_pinmode+0x156>
		{
			DDRC &= ~(1 << pin_number);
 2f0:	24 b3       	in	r18, 0x14	; 20
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	ac 01       	movw	r20, r24
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_pinmode+0x140>
 2fa:	44 0f       	add	r20, r20
 2fc:	55 1f       	adc	r21, r21
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_pinmode+0x13c>
 302:	ba 01       	movw	r22, r20
 304:	84 2f       	mov	r24, r20
 306:	80 95       	com	r24
 308:	82 23       	and	r24, r18
 30a:	84 bb       	out	0x14, r24	; 20
			PORTC |= (1 << pin_number);
 30c:	85 b3       	in	r24, 0x15	; 21
 30e:	68 2b       	or	r22, r24
 310:	65 bb       	out	0x15, r22	; 21
 312:	08 95       	ret
		}			
		else if (state == OUTPUT)
 314:	41 30       	cpi	r20, 0x01	; 1
 316:	09 f0       	breq	.+2      	; 0x31a <DIO_pinmode+0x15c>
 318:	3f c0       	rjmp	.+126    	; 0x398 <DIO_pinmode+0x1da>
			DDRC |= (1 << pin_number);
 31a:	24 b3       	in	r18, 0x14	; 20
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	ac 01       	movw	r20, r24
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_pinmode+0x16a>
 324:	44 0f       	add	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_pinmode+0x166>
 32c:	ba 01       	movw	r22, r20
 32e:	62 2b       	or	r22, r18
 330:	64 bb       	out	0x14, r22	; 20
 332:	08 95       	ret
		break;
		
		case 'D':
		case 'd':
		if(state == INPUT)
 334:	44 23       	and	r20, r20
 336:	71 f4       	brne	.+28     	; 0x354 <DIO_pinmode+0x196>
			DDRD &= ~(1 << pin_number);
 338:	21 b3       	in	r18, 0x11	; 17
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	ac 01       	movw	r20, r24
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_pinmode+0x188>
 342:	44 0f       	add	r20, r20
 344:	55 1f       	adc	r21, r21
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_pinmode+0x184>
 34a:	ba 01       	movw	r22, r20
 34c:	60 95       	com	r22
 34e:	62 23       	and	r22, r18
 350:	61 bb       	out	0x11, r22	; 17
 352:	08 95       	ret
		else if (state == INPUT_PULLUP)
 354:	42 30       	cpi	r20, 0x02	; 2
 356:	91 f4       	brne	.+36     	; 0x37c <DIO_pinmode+0x1be>
		{
			DDRD &= ~(1 << pin_number);
 358:	21 b3       	in	r18, 0x11	; 17
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	ac 01       	movw	r20, r24
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_pinmode+0x1a8>
 362:	44 0f       	add	r20, r20
 364:	55 1f       	adc	r21, r21
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_pinmode+0x1a4>
 36a:	ba 01       	movw	r22, r20
 36c:	84 2f       	mov	r24, r20
 36e:	80 95       	com	r24
 370:	82 23       	and	r24, r18
 372:	81 bb       	out	0x11, r24	; 17
			PORTD |= (1 << pin_number);			
 374:	82 b3       	in	r24, 0x12	; 18
 376:	68 2b       	or	r22, r24
 378:	62 bb       	out	0x12, r22	; 18
 37a:	08 95       	ret
		}			
		else if (state == OUTPUT)
 37c:	41 30       	cpi	r20, 0x01	; 1
 37e:	61 f4       	brne	.+24     	; 0x398 <DIO_pinmode+0x1da>
			DDRD |= (1 << pin_number);
 380:	21 b3       	in	r18, 0x11	; 17
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	ac 01       	movw	r20, r24
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_pinmode+0x1d0>
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_pinmode+0x1cc>
 392:	ba 01       	movw	r22, r20
 394:	62 2b       	or	r22, r18
 396:	61 bb       	out	0x11, r22	; 17
 398:	08 95       	ret

0000039a <DIO_write>:

//This function writes on pin number either HIGH or LOW

void DIO_write(unsigned char port_char, unsigned char pin_number, unsigned char logic_level)
{
		switch (port_char)
 39a:	84 34       	cpi	r24, 0x44	; 68
 39c:	09 f4       	brne	.+2      	; 0x3a0 <DIO_write+0x6>
 39e:	79 c0       	rjmp	.+242    	; 0x492 <DIO_write+0xf8>
 3a0:	85 34       	cpi	r24, 0x45	; 69
 3a2:	48 f4       	brcc	.+18     	; 0x3b6 <DIO_write+0x1c>
 3a4:	82 34       	cpi	r24, 0x42	; 66
 3a6:	b1 f1       	breq	.+108    	; 0x414 <DIO_write+0x7a>
 3a8:	83 34       	cpi	r24, 0x43	; 67
 3aa:	08 f0       	brcs	.+2      	; 0x3ae <DIO_write+0x14>
 3ac:	53 c0       	rjmp	.+166    	; 0x454 <DIO_write+0xba>
 3ae:	81 34       	cpi	r24, 0x41	; 65
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <DIO_write+0x1a>
 3b2:	8d c0       	rjmp	.+282    	; 0x4ce <DIO_write+0x134>
 3b4:	0f c0       	rjmp	.+30     	; 0x3d4 <DIO_write+0x3a>
 3b6:	82 36       	cpi	r24, 0x62	; 98
 3b8:	69 f1       	breq	.+90     	; 0x414 <DIO_write+0x7a>
 3ba:	83 36       	cpi	r24, 0x63	; 99
 3bc:	20 f4       	brcc	.+8      	; 0x3c6 <DIO_write+0x2c>
 3be:	81 36       	cpi	r24, 0x61	; 97
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <DIO_write+0x2a>
 3c2:	85 c0       	rjmp	.+266    	; 0x4ce <DIO_write+0x134>
 3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <DIO_write+0x3a>
 3c6:	83 36       	cpi	r24, 0x63	; 99
 3c8:	09 f4       	brne	.+2      	; 0x3cc <DIO_write+0x32>
 3ca:	44 c0       	rjmp	.+136    	; 0x454 <DIO_write+0xba>
 3cc:	84 36       	cpi	r24, 0x64	; 100
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <DIO_write+0x38>
 3d0:	7e c0       	rjmp	.+252    	; 0x4ce <DIO_write+0x134>
 3d2:	5f c0       	rjmp	.+190    	; 0x492 <DIO_write+0xf8>
		{
			case 'A':
			case 'a':
			if(logic_level == LOW)
 3d4:	44 23       	and	r20, r20
 3d6:	71 f4       	brne	.+28     	; 0x3f4 <DIO_write+0x5a>
				PORTA &= ~(1 << pin_number);
 3d8:	2b b3       	in	r18, 0x1b	; 27
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	ac 01       	movw	r20, r24
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_write+0x4c>
 3e2:	44 0f       	add	r20, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_write+0x48>
 3ea:	ba 01       	movw	r22, r20
 3ec:	60 95       	com	r22
 3ee:	62 23       	and	r22, r18
 3f0:	6b bb       	out	0x1b, r22	; 27
 3f2:	08 95       	ret
			else if (logic_level == HIGH)
 3f4:	41 30       	cpi	r20, 0x01	; 1
 3f6:	09 f0       	breq	.+2      	; 0x3fa <DIO_write+0x60>
 3f8:	6a c0       	rjmp	.+212    	; 0x4ce <DIO_write+0x134>
				PORTA |= (1 << pin_number);
 3fa:	2b b3       	in	r18, 0x1b	; 27
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	ac 01       	movw	r20, r24
 402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_write+0x6e>
 404:	44 0f       	add	r20, r20
 406:	55 1f       	adc	r21, r21
 408:	6a 95       	dec	r22
 40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_write+0x6a>
 40c:	ba 01       	movw	r22, r20
 40e:	62 2b       	or	r22, r18
 410:	6b bb       	out	0x1b, r22	; 27
 412:	08 95       	ret
			break;

			case 'B':
			case 'b':
			if(logic_level == LOW)
 414:	44 23       	and	r20, r20
 416:	71 f4       	brne	.+28     	; 0x434 <DIO_write+0x9a>
				PORTB &= ~(1 << pin_number);
 418:	28 b3       	in	r18, 0x18	; 24
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	ac 01       	movw	r20, r24
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_write+0x8c>
 422:	44 0f       	add	r20, r20
 424:	55 1f       	adc	r21, r21
 426:	6a 95       	dec	r22
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_write+0x88>
 42a:	ba 01       	movw	r22, r20
 42c:	60 95       	com	r22
 42e:	62 23       	and	r22, r18
 430:	68 bb       	out	0x18, r22	; 24
 432:	08 95       	ret
			else if (logic_level == HIGH)
 434:	41 30       	cpi	r20, 0x01	; 1
 436:	09 f0       	breq	.+2      	; 0x43a <DIO_write+0xa0>
 438:	4a c0       	rjmp	.+148    	; 0x4ce <DIO_write+0x134>
				PORTB |= (1 << pin_number);
 43a:	28 b3       	in	r18, 0x18	; 24
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	ac 01       	movw	r20, r24
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_write+0xae>
 444:	44 0f       	add	r20, r20
 446:	55 1f       	adc	r21, r21
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_write+0xaa>
 44c:	ba 01       	movw	r22, r20
 44e:	62 2b       	or	r22, r18
 450:	68 bb       	out	0x18, r22	; 24
 452:	08 95       	ret
			break;

			case 'C':
			case 'c':
			if(logic_level == LOW)
 454:	44 23       	and	r20, r20
 456:	71 f4       	brne	.+28     	; 0x474 <DIO_write+0xda>
				PORTC &= ~(1 << pin_number);
 458:	25 b3       	in	r18, 0x15	; 21
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	ac 01       	movw	r20, r24
 460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_write+0xcc>
 462:	44 0f       	add	r20, r20
 464:	55 1f       	adc	r21, r21
 466:	6a 95       	dec	r22
 468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_write+0xc8>
 46a:	ba 01       	movw	r22, r20
 46c:	60 95       	com	r22
 46e:	62 23       	and	r22, r18
 470:	65 bb       	out	0x15, r22	; 21
 472:	08 95       	ret
			else if (logic_level == HIGH)
 474:	41 30       	cpi	r20, 0x01	; 1
 476:	59 f5       	brne	.+86     	; 0x4ce <DIO_write+0x134>
				PORTC |= (1 << pin_number);
 478:	25 b3       	in	r18, 0x15	; 21
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	ac 01       	movw	r20, r24
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_write+0xec>
 482:	44 0f       	add	r20, r20
 484:	55 1f       	adc	r21, r21
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_write+0xe8>
 48a:	ba 01       	movw	r22, r20
 48c:	62 2b       	or	r22, r18
 48e:	65 bb       	out	0x15, r22	; 21
 490:	08 95       	ret
			break;
			
			case 'D':
			case 'd':
			if(logic_level == LOW)
 492:	44 23       	and	r20, r20
 494:	71 f4       	brne	.+28     	; 0x4b2 <DIO_write+0x118>
				PORTD &= ~(1 << pin_number);
 496:	22 b3       	in	r18, 0x12	; 18
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	ac 01       	movw	r20, r24
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_write+0x10a>
 4a0:	44 0f       	add	r20, r20
 4a2:	55 1f       	adc	r21, r21
 4a4:	6a 95       	dec	r22
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_write+0x106>
 4a8:	ba 01       	movw	r22, r20
 4aa:	60 95       	com	r22
 4ac:	62 23       	and	r22, r18
 4ae:	62 bb       	out	0x12, r22	; 18
 4b0:	08 95       	ret
			else if (logic_level == HIGH)
 4b2:	41 30       	cpi	r20, 0x01	; 1
 4b4:	61 f4       	brne	.+24     	; 0x4ce <DIO_write+0x134>
				PORTD |= (1 << pin_number);
 4b6:	22 b3       	in	r18, 0x12	; 18
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	ac 01       	movw	r20, r24
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_write+0x12a>
 4c0:	44 0f       	add	r20, r20
 4c2:	55 1f       	adc	r21, r21
 4c4:	6a 95       	dec	r22
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_write+0x126>
 4c8:	ba 01       	movw	r22, r20
 4ca:	62 2b       	or	r22, r18
 4cc:	62 bb       	out	0x12, r22	; 18
 4ce:	08 95       	ret

000004d0 <eeprom_write>:
#include <avr/io.h>
#include "EEPROM.h"

void eeprom_write(unsigned int address, unsigned char data)
{
	while((EECR & (1 << EEWE)) == 1);			//Wait for EEWE = 0, Which means that EEPROM is ready for read or write
 4d0:	2c b3       	in	r18, 0x1c	; 28
	EEAR = address;							//Put the address in which you want to put the byte
 4d2:	9f bb       	out	0x1f, r25	; 31
 4d4:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;							//Put the desired byte
 4d6:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1 << EEMWE);					//Set EEMWE to 1
 4d8:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1 << EEWE);					//Set EEWE to 1 within 4 clock cycles (EEMWE will be cleared after 4 clock cycles)
 4da:	e1 9a       	sbi	0x1c, 1	; 28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4dc:	87 ea       	ldi	r24, 0xA7	; 167
 4de:	91 e6       	ldi	r25, 0x61	; 97
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <eeprom_write+0x10>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <eeprom_write+0x16>
 4e6:	00 00       	nop
	_delay_ms(100);
}
 4e8:	08 95       	ret

000004ea <eeprom_read>:

unsigned char eeprom_read(unsigned char address)
{
	while((EECR & (1 << EEWE)) == 1);			//Wait for EEWE = 0, Which means that EEPROM is ready for read or write
 4ea:	9c b3       	in	r25, 0x1c	; 28
	EEAR = address;							//Put the address of byte you want to read
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	9f bb       	out	0x1f, r25	; 31
 4f0:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1 << EERE);					//Set EERE to 1
 4f2:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;							//Return the desired byte
 4f4:	8d b3       	in	r24, 0x1d	; 29
 4f6:	08 95       	ret

000004f8 <set_externalInterrupt>:
#include <avr/io.h>
#include "external_interrupts.h"

void set_externalInterrupt(unsigned char interrupt_num, unsigned char state)
{
	switch(interrupt_num)
 4f8:	86 30       	cpi	r24, 0x06	; 6
 4fa:	31 f0       	breq	.+12     	; 0x508 <set_externalInterrupt+0x10>
 4fc:	87 30       	cpi	r24, 0x07	; 7
 4fe:	e9 f0       	breq	.+58     	; 0x53a <set_externalInterrupt+0x42>
 500:	85 30       	cpi	r24, 0x05	; 5
 502:	09 f0       	breq	.+2      	; 0x506 <set_externalInterrupt+0xe>
 504:	41 c0       	rjmp	.+130    	; 0x588 <set_externalInterrupt+0x90>
 506:	32 c0       	rjmp	.+100    	; 0x56c <set_externalInterrupt+0x74>
	{
		case INT0:
			if (state == LOW_LEVEL)
 508:	66 23       	and	r22, r22
 50a:	11 f4       	brne	.+4      	; 0x510 <set_externalInterrupt+0x18>
				MCUCR = 0x00;
 50c:	15 be       	out	0x35, r1	; 53
 50e:	11 c0       	rjmp	.+34     	; 0x532 <set_externalInterrupt+0x3a>
			else if (state == CHANGE)
 510:	61 30       	cpi	r22, 0x01	; 1
 512:	21 f4       	brne	.+8      	; 0x51c <set_externalInterrupt+0x24>
				MCUCR |= (1 << ISC00);
 514:	85 b7       	in	r24, 0x35	; 53
 516:	81 60       	ori	r24, 0x01	; 1
 518:	85 bf       	out	0x35, r24	; 53
 51a:	0b c0       	rjmp	.+22     	; 0x532 <set_externalInterrupt+0x3a>
			else if (state == FALLING_EDGE)
 51c:	63 30       	cpi	r22, 0x03	; 3
 51e:	21 f4       	brne	.+8      	; 0x528 <set_externalInterrupt+0x30>
				MCUCR |= (1 << ISC01);
 520:	85 b7       	in	r24, 0x35	; 53
 522:	82 60       	ori	r24, 0x02	; 2
 524:	85 bf       	out	0x35, r24	; 53
 526:	05 c0       	rjmp	.+10     	; 0x532 <set_externalInterrupt+0x3a>
			else if (state == RISING_EDGE)	
 528:	62 30       	cpi	r22, 0x02	; 2
 52a:	19 f4       	brne	.+6      	; 0x532 <set_externalInterrupt+0x3a>
				MCUCR |= ((1 << ISC00) | (1 << ISC01));	
 52c:	85 b7       	in	r24, 0x35	; 53
 52e:	83 60       	ori	r24, 0x03	; 3
 530:	85 bf       	out	0x35, r24	; 53
			GICR |= (1 << INT0);
 532:	8b b7       	in	r24, 0x3b	; 59
 534:	80 64       	ori	r24, 0x40	; 64
 536:	8b bf       	out	0x3b, r24	; 59
		break;
 538:	08 95       	ret
		
		case INT1:
			if (state == LOW_LEVEL)
 53a:	66 23       	and	r22, r22
 53c:	11 f4       	brne	.+4      	; 0x542 <set_externalInterrupt+0x4a>
				MCUCR = 0x00;
 53e:	15 be       	out	0x35, r1	; 53
 540:	11 c0       	rjmp	.+34     	; 0x564 <set_externalInterrupt+0x6c>
			else if (state == CHANGE)
 542:	61 30       	cpi	r22, 0x01	; 1
 544:	21 f4       	brne	.+8      	; 0x54e <set_externalInterrupt+0x56>
				MCUCR |= (1 << ISC10);
 546:	85 b7       	in	r24, 0x35	; 53
 548:	84 60       	ori	r24, 0x04	; 4
 54a:	85 bf       	out	0x35, r24	; 53
 54c:	0b c0       	rjmp	.+22     	; 0x564 <set_externalInterrupt+0x6c>
			else if (state == FALLING_EDGE)
 54e:	63 30       	cpi	r22, 0x03	; 3
 550:	21 f4       	brne	.+8      	; 0x55a <set_externalInterrupt+0x62>
				MCUCR |= (1 << ISC11);
 552:	85 b7       	in	r24, 0x35	; 53
 554:	88 60       	ori	r24, 0x08	; 8
 556:	85 bf       	out	0x35, r24	; 53
 558:	05 c0       	rjmp	.+10     	; 0x564 <set_externalInterrupt+0x6c>
			else if (state == RISING_EDGE)
 55a:	62 30       	cpi	r22, 0x02	; 2
 55c:	19 f4       	brne	.+6      	; 0x564 <set_externalInterrupt+0x6c>
				MCUCR |= (1 << ISC10) | (1 << ISC11);
 55e:	85 b7       	in	r24, 0x35	; 53
 560:	8c 60       	ori	r24, 0x0C	; 12
 562:	85 bf       	out	0x35, r24	; 53
			GICR |= (1 << INT1);
 564:	8b b7       	in	r24, 0x3b	; 59
 566:	80 68       	ori	r24, 0x80	; 128
 568:	8b bf       	out	0x3b, r24	; 59
		break;
 56a:	08 95       	ret
		
		case INT2:
			if (state == FALLING_EDGE)
 56c:	63 30       	cpi	r22, 0x03	; 3
 56e:	21 f4       	brne	.+8      	; 0x578 <set_externalInterrupt+0x80>
				MCUCR &= ~(1 << ISC2);
 570:	85 b7       	in	r24, 0x35	; 53
 572:	8f 7b       	andi	r24, 0xBF	; 191
 574:	85 bf       	out	0x35, r24	; 53
 576:	05 c0       	rjmp	.+10     	; 0x582 <set_externalInterrupt+0x8a>
			else if (state == RISING_EDGE)
 578:	62 30       	cpi	r22, 0x02	; 2
 57a:	19 f4       	brne	.+6      	; 0x582 <set_externalInterrupt+0x8a>
				MCUCR |= (1 << ISC2);
 57c:	85 b7       	in	r24, 0x35	; 53
 57e:	80 64       	ori	r24, 0x40	; 64
 580:	85 bf       	out	0x35, r24	; 53
			GICR |= (1 << INT2);
 582:	8b b7       	in	r24, 0x3b	; 59
 584:	80 62       	ori	r24, 0x20	; 32
 586:	8b bf       	out	0x3b, r24	; 59
 588:	08 95       	ret

0000058a <get_key>:

extern unsigned char get_key (void)
{
  unsigned char colloc, rowloc;
  
  KEY_DDR = 0xF0;                                                               //Columns bits are output and Rows' bits are input
 58a:	80 ef       	ldi	r24, 0xF0	; 240
 58c:	84 bb       	out	0x14, r24	; 20
  KEY_PRT = 0xFF;  
 58e:	8f ef       	ldi	r24, 0xFF	; 255
 590:	85 bb       	out	0x15, r24	; 21
  KEY_PIN = 0x0F;
 592:	8f e0       	ldi	r24, 0x0F	; 15
 594:	83 bb       	out	0x13, r24	; 19
  
      do
          {
              KEY_PRT &= 0x0F;                                                  //ground all rows at once
 596:	85 b3       	in	r24, 0x15	; 21
 598:	8f 70       	andi	r24, 0x0F	; 15
 59a:	85 bb       	out	0x15, r24	; 21
              colloc = (KEY_PIN & 0x0F);                                        //read the columns
 59c:	83 b3       	in	r24, 0x13	; 19
 59e:	8f 70       	andi	r24, 0x0F	; 15
          } while(colloc != 0x0F);                                              //check untill all keys are released
 5a0:	8f 30       	cpi	r24, 0x0F	; 15
 5a2:	c9 f7       	brne	.-14     	; 0x596 <get_key+0xc>
 5a4:	87 e8       	ldi	r24, 0x87	; 135
 5a6:	93 e1       	ldi	r25, 0x13	; 19
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <get_key+0x1e>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <get_key+0x24>
 5ae:	00 00       	nop
      do
        { 
            do
              {
                  _delay_ms(20);                                        //Delay to allow the user to enter the required Key
                  colloc = (KEY_PIN & 0x0F);                                    //read the columns
 5b0:	83 b3       	in	r24, 0x13	; 19
 5b2:	8f 70       	andi	r24, 0x0F	; 15
              } while(colloc != 0x0F);                                          //wait for key press
 5b4:	8f 30       	cpi	r24, 0x0F	; 15
 5b6:	b1 f7       	brne	.-20     	; 0x5a4 <get_key+0x1a>
 5b8:	87 e8       	ldi	r24, 0x87	; 135
 5ba:	93 e1       	ldi	r25, 0x13	; 19
 5bc:	01 97       	sbiw	r24, 0x01	; 1
 5be:	f1 f7       	brne	.-4      	; 0x5bc <get_key+0x32>
 5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <get_key+0x38>
 5c2:	00 00       	nop
          
            _delay_ms(20);                                              //Delay for debounce
            colloc = (KEY_PIN & 0x0F);                                          //read the columns
 5c4:	83 b3       	in	r24, 0x13	; 19
 5c6:	8f 70       	andi	r24, 0x0F	; 15
        } while(colloc != 0x0F);                                                //wait for key press
 5c8:	8f 30       	cpi	r24, 0x0F	; 15
 5ca:	61 f7       	brne	.-40     	; 0x5a4 <get_key+0x1a>
      
      while(1)
      {
        KEY_PRT = 0xEF;                                                         //ground row 0
 5cc:	9f ee       	ldi	r25, 0xEF	; 239
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 0;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xDF;                                                         //ground row 1
 5ce:	2f ed       	ldi	r18, 0xDF	; 223
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 1;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xBF;                                                         //ground row 2
 5d0:	3f eb       	ldi	r19, 0xBF	; 191
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 2;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0x7F;                                                         //ground row 3
 5d2:	4f e7       	ldi	r20, 0x7F	; 127
            colloc = (KEY_PIN & 0x0F);                                          //read the columns
        } while(colloc != 0x0F);                                                //wait for key press
      
      while(1)
      {
        KEY_PRT = 0xEF;                                                         //ground row 0
 5d4:	95 bb       	out	0x15, r25	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
 5d6:	83 b3       	in	r24, 0x13	; 19
 5d8:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
 5da:	8f 30       	cpi	r24, 0x0F	; 15
 5dc:	89 f4       	brne	.+34     	; 0x600 <get_key+0x76>
        {
          rowloc = 0;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xDF;                                                         //ground row 1
 5de:	25 bb       	out	0x15, r18	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
 5e0:	83 b3       	in	r24, 0x13	; 19
 5e2:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
 5e4:	8f 30       	cpi	r24, 0x0F	; 15
 5e6:	71 f4       	brne	.+28     	; 0x604 <get_key+0x7a>
        {
          rowloc = 1;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xBF;                                                         //ground row 2
 5e8:	35 bb       	out	0x15, r19	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
 5ea:	83 b3       	in	r24, 0x13	; 19
 5ec:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
 5ee:	8f 30       	cpi	r24, 0x0F	; 15
 5f0:	59 f4       	brne	.+22     	; 0x608 <get_key+0x7e>
        {
          rowloc = 2;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0x7F;                                                         //ground row 3
 5f2:	45 bb       	out	0x15, r20	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
 5f4:	83 b3       	in	r24, 0x13	; 19
 5f6:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
 5f8:	8f 30       	cpi	r24, 0x0F	; 15
 5fa:	61 f3       	breq	.-40     	; 0x5d4 <get_key+0x4a>
        {
          rowloc = 3;                                                           //save row location 
 5fc:	e3 e0       	ldi	r30, 0x03	; 3
 5fe:	05 c0       	rjmp	.+10     	; 0x60a <get_key+0x80>
      {
        KEY_PRT = 0xEF;                                                         //ground row 0
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 0;                                                           //save row location 
 600:	e0 e0       	ldi	r30, 0x00	; 0
 602:	03 c0       	rjmp	.+6      	; 0x60a <get_key+0x80>
        }
        KEY_PRT = 0xDF;                                                         //ground row 1
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 1;                                                           //save row location 
 604:	e1 e0       	ldi	r30, 0x01	; 1
 606:	01 c0       	rjmp	.+2      	; 0x60a <get_key+0x80>
        }
        KEY_PRT = 0xBF;                                                         //ground row 2
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 2;                                                           //save row location 
 608:	e2 e0       	ldi	r30, 0x02	; 2
        }
      }
      
      
     //check column and save result in key
      if(colloc == 0x0E)
 60a:	8e 30       	cpi	r24, 0x0E	; 14
 60c:	49 f4       	brne	.+18     	; 0x620 <get_key+0x96>
        return (keypad[rowloc][0]);
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	ee 0f       	add	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	e0 5a       	subi	r30, 0xA0	; 160
 61a:	ff 4f       	sbci	r31, 0xFF	; 255
 61c:	80 81       	ld	r24, Z
 61e:	08 95       	ret
      else if(colloc == 0x0D)
 620:	8d 30       	cpi	r24, 0x0D	; 13
 622:	49 f4       	brne	.+18     	; 0x636 <get_key+0xac>
        return (keypad[rowloc][1]);
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	ee 0f       	add	r30, r30
 628:	ff 1f       	adc	r31, r31
 62a:	ee 0f       	add	r30, r30
 62c:	ff 1f       	adc	r31, r31
 62e:	e0 5a       	subi	r30, 0xA0	; 160
 630:	ff 4f       	sbci	r31, 0xFF	; 255
 632:	81 81       	ldd	r24, Z+1	; 0x01
 634:	08 95       	ret
      else if(colloc == 0x0B)
 636:	8b 30       	cpi	r24, 0x0B	; 11
 638:	49 f4       	brne	.+18     	; 0x64c <get_key+0xc2>
        return (keypad[rowloc][2]);
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	ee 0f       	add	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	ee 0f       	add	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	e0 5a       	subi	r30, 0xA0	; 160
 646:	ff 4f       	sbci	r31, 0xFF	; 255
 648:	82 81       	ldd	r24, Z+2	; 0x02
 64a:	08 95       	ret
      else 
        return (keypad[rowloc][3]);  
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	ee 0f       	add	r30, r30
 650:	ff 1f       	adc	r31, r31
 652:	ee 0f       	add	r30, r30
 654:	ff 1f       	adc	r31, r31
 656:	e0 5a       	subi	r30, 0xA0	; 160
 658:	ff 4f       	sbci	r31, 0xFF	; 255
 65a:	83 81       	ldd	r24, Z+3	; 0x03
}  
 65c:	08 95       	ret

0000065e <delay_us>:
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
 65e:	00 97       	sbiw	r24, 0x00	; 0
 660:	19 f0       	breq	.+6      	; 0x668 <delay_us+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 662:	00 00       	nop
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	e9 f7       	brne	.-6      	; 0x662 <delay_us+0x4>
 668:	08 95       	ret

0000066a <delay_ms>:
	}
}
//*******************************************************************************
void delay_ms(int d)
{
	while(d--)
 66a:	00 97       	sbiw	r24, 0x00	; 0
 66c:	41 f0       	breq	.+16     	; 0x67e <delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 66e:	e9 ef       	ldi	r30, 0xF9	; 249
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	31 97       	sbiw	r30, 0x01	; 1
 674:	f1 f7       	brne	.-4      	; 0x672 <delay_ms+0x8>
 676:	00 c0       	rjmp	.+0      	; 0x678 <delay_ms+0xe>
 678:	00 00       	nop
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	c1 f7       	brne	.-16     	; 0x66e <delay_ms+0x4>
 67e:	08 95       	ret

00000680 <lcdCommand>:
	lcdCommand(LCD_ENTRY_INC_);									//shift && cursor right
	delay_us(100);                                                     //wait
}
//******************************************************************************
void lcdCommand(unsigned char cmnd)
{
 680:	cf 93       	push	r28
 682:	c8 2f       	mov	r28, r24
	LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);                             //taking high nibble of cmnd
 684:	8b b3       	in	r24, 0x1b	; 27
 686:	9c 2f       	mov	r25, r28
 688:	90 7f       	andi	r25, 0xF0	; 240
 68a:	8f 70       	andi	r24, 0x0F	; 15
 68c:	89 2b       	or	r24, r25
 68e:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT &= ~(1<<LCD_RS);	       		                        //RS = 0 for command (IR Register)
 690:	d8 98       	cbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);			                        //RW = 0 for Write
 692:	d9 98       	cbi	0x1b, 1	; 27
 	LCD_PRT |= (1<<LCD_EN);			                                //EN = 1 for H-to-L			                                //wait to make EN wider (min 450 ns)
 694:	da 9a       	sbi	0x1b, 2	; 27
	delay_us(1);
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L	
 69e:	da 98       	cbi	0x1b, 2	; 27
        
	delay_us(20);                                                     //Wait some time
 6a0:	84 e1       	ldi	r24, 0x14	; 20
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
        
	LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);                               //taking low nibble of cmnd
 6a8:	8b b3       	in	r24, 0x1b	; 27
 6aa:	c2 95       	swap	r28
 6ac:	c0 7f       	andi	r28, 0xF0	; 240
 6ae:	8f 70       	andi	r24, 0x0F	; 15
 6b0:	c8 2b       	or	r28, r24
 6b2:	cb bb       	out	0x1b, r28	; 27
	LCD_PRT |= (1<<LCD_EN);			                                //EN = 1 for H-to-L
 6b4:	da 9a       	sbi	0x1b, 2	; 27
	delay_us(1);			                                //wait to make enable wider (min 450 ns)
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
 6be:	da 98       	cbi	0x1b, 2	; 27
}
 6c0:	cf 91       	pop	r28
 6c2:	08 95       	ret

000006c4 <lcd_init>:
}
//******************************************************************************
void lcd_init(void)
{       
    //lcd_reset();
	LCD_DDR = 0xFF;
 6c4:	8f ef       	ldi	r24, 0xFF	; 255
 6c6:	8a bb       	out	0x1a, r24	; 26
	delay_us(2000);
 6c8:	80 ed       	ldi	r24, 0xD0	; 208
 6ca:	97 e0       	ldi	r25, 0x07	; 7
 6cc:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
    /* Function set */
    lcdCommand(0x33);							   //$28 for 4-bit mode
 6d0:	83 e3       	ldi	r24, 0x33	; 51
 6d2:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);                                                     //wait
 6d6:	84 e6       	ldi	r24, 0x64	; 100
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
        
    /* Display ON/OFF Control */
	lcdCommand(0x32);                               //display on, cursor on, blinking
 6de:	82 e3       	ldi	r24, 0x32	; 50
 6e0:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);														//wait
 6e4:	84 e6       	ldi	r24, 0x64	; 100
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
        
   
	lcdCommand(LCD_FUNCTION_4BIT_2LINES);
 6ec:	88 e2       	ldi	r24, 0x28	; 40
 6ee:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);					                        //clear LCD
 6f2:	84 e6       	ldi	r24, 0x64	; 100
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	
	lcdCommand(LCD_DISP_ON);
 6fa:	8c e0       	ldi	r24, 0x0C	; 12
 6fc:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);
 700:	84 e6       	ldi	r24, 0x64	; 100
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	
	lcdCommand(CLEAR_DISPLAY);
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(2000);														//wait
 70e:	80 ed       	ldi	r24, 0xD0	; 208
 710:	97 e0       	ldi	r25, 0x07	; 7
 712:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
        
    /* Entry mode set */
	lcdCommand(LCD_ENTRY_INC_);									//shift && cursor right
 716:	86 e0       	ldi	r24, 0x06	; 6
 718:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);                                                     //wait
 71c:	84 e6       	ldi	r24, 0x64	; 100
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
}
 724:	08 95       	ret

00000726 <lcd_reset>:
	}
}
//******************************************************************************
void lcd_reset(void)
{
	LCD_DDR = 0xFF;					                        //LCD port is output
 726:	8f ef       	ldi	r24, 0xFF	; 255
 728:	8a bb       	out	0x1a, r24	; 26
	LCD_PRT &= ~(1<<LCD_EN);			                    //LCD_EN = 0
 72a:	da 98       	cbi	0x1b, 2	; 27
	delay_us(20000);				                        //wait for stable power (more than 15 ms)
 72c:	80 e2       	ldi	r24, 0x20	; 32
 72e:	9e e4       	ldi	r25, 0x4E	; 78
 730:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	lcdCommand(0x03);				                        //$30 for reset
 734:	83 e0       	ldi	r24, 0x03	; 3
 736:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(10000);				                        //wait for more than (4.1 ms)
 73a:	80 e1       	ldi	r24, 0x10	; 16
 73c:	97 e2       	ldi	r25, 0x27	; 39
 73e:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
    lcdCommand(0x03);										//$30 for reset
 742:	83 e0       	ldi	r24, 0x03	; 3
 744:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(1000);											//wait (for more than (100 us)
 748:	88 ee       	ldi	r24, 0xE8	; 232
 74a:	93 e0       	ldi	r25, 0x03	; 3
 74c:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
    lcdCommand(0x03);										//$30 for reset
 750:	83 e0       	ldi	r24, 0x03	; 3
 752:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(1000);                                         //wait (for more than 100 us)
 756:	88 ee       	ldi	r24, 0xE8	; 232
 758:	93 e0       	ldi	r25, 0x03	; 3
 75a:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
    lcdCommand(0x02);										//$20 for reset
 75e:	82 e0       	ldi	r24, 0x02	; 2
 760:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(1000);                                         //wait (for more than 100 us)
 764:	88 ee       	ldi	r24, 0xE8	; 232
 766:	93 e0       	ldi	r25, 0x03	; 3
 768:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
}
 76c:	08 95       	ret

0000076e <lcdData>:
	delay_us(1);			                                //wait to make enable wider (min 450 ns)
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
}
//******************************************************************************
void lcdData (unsigned char data)
{
 76e:	cf 93       	push	r28
 770:	c8 2f       	mov	r28, r24
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);	                        //taking high nibble of data
 772:	8b b3       	in	r24, 0x1b	; 27
 774:	9c 2f       	mov	r25, r28
 776:	90 7f       	andi	r25, 0xF0	; 240
 778:	8f 70       	andi	r24, 0x0F	; 15
 77a:	89 2b       	or	r24, r25
 77c:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT |= (1<<LCD_RS);												//RS = 1 for data (DR Register)
 77e:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);											//RW = 0 for Write
 780:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PRT |= (1<<LCD_EN);												//EN = 1 for H-to-L
 782:	da 9a       	sbi	0x1b, 2	; 27
																		 
	delay_us(1);														//wait to make enable wider (min 450 ns)
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	
	LCD_PRT &= ~(1<<LCD_EN);											//EN = 0 for H-to-L    
 78c:	da 98       	cbi	0x1b, 2	; 27
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);                           //taking low nibble of data
 78e:	8b b3       	in	r24, 0x1b	; 27
 790:	c2 95       	swap	r28
 792:	c0 7f       	andi	r28, 0xF0	; 240
 794:	8f 70       	andi	r24, 0x0F	; 15
 796:	c8 2b       	or	r28, r24
 798:	cb bb       	out	0x1b, r28	; 27
	LCD_PRT |= (1<<LCD_EN);						                        //EN = 1 for H-to-L
 79a:	da 9a       	sbi	0x1b, 2	; 27
	delay_us(1);							                            //wait to make enable wider
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	LCD_PRT &= ~(1<<LCD_EN);					                        //EN = 0 for H-to-L
 7a4:	da 98       	cbi	0x1b, 2	; 27
}
 7a6:	cf 91       	pop	r28
 7a8:	08 95       	ret

000007aa <lcd_gotoxy>:
//******************************************************************************
void lcd_gotoxy(unsigned char x, unsigned char y)
{
 7aa:	cf 93       	push	r28
 7ac:	df 93       	push	r29
 7ae:	00 d0       	rcall	.+0      	; 0x7b0 <lcd_gotoxy+0x6>
 7b0:	00 d0       	rcall	.+0      	; 0x7b2 <lcd_gotoxy+0x8>
 7b2:	cd b7       	in	r28, 0x3d	; 61
 7b4:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
 7b6:	90 e8       	ldi	r25, 0x80	; 128
 7b8:	99 83       	std	Y+1, r25	; 0x01
 7ba:	90 ec       	ldi	r25, 0xC0	; 192
 7bc:	9a 83       	std	Y+2, r25	; 0x02
 7be:	94 e9       	ldi	r25, 0x94	; 148
 7c0:	9b 83       	std	Y+3, r25	; 0x03
 7c2:	94 ed       	ldi	r25, 0xD4	; 212
 7c4:	9c 83       	std	Y+4, r25	; 0x04
	lcdCommand(firstcharAdr[y-1] + x - 1);
 7c6:	81 50       	subi	r24, 0x01	; 1
 7c8:	fe 01       	movw	r30, r28
 7ca:	e6 0f       	add	r30, r22
 7cc:	f1 1d       	adc	r31, r1
 7ce:	90 81       	ld	r25, Z
 7d0:	89 0f       	add	r24, r25
 7d2:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);
 7d6:	84 e6       	ldi	r24, 0x64	; 100
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
}
 7de:	0f 90       	pop	r0
 7e0:	0f 90       	pop	r0
 7e2:	0f 90       	pop	r0
 7e4:	0f 90       	pop	r0
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	08 95       	ret

000007ec <lcd_cursor_on>:
//*******************************************************************************
void lcd_cursor_on(void)
{
	lcdCommand(LCD_DISP_ON_CURSOR_BLINK);
 7ec:	8f e0       	ldi	r24, 0x0F	; 15
 7ee:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);
 7f2:	84 e6       	ldi	r24, 0x64	; 100
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
}
 7fa:	08 95       	ret

000007fc <lcd_cursor_off>:
//*******************************************************************************
void lcd_cursor_off(void)
{
	lcdCommand(LCD_DISP_ON);
 7fc:	8c e0       	ldi	r24, 0x0C	; 12
 7fe:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(100);
 802:	84 e6       	ldi	r24, 0x64	; 100
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
}
 80a:	08 95       	ret

0000080c <lcd_print>:
//*******************************************************************************
void lcd_print(char *str)
{
 80c:	0f 93       	push	r16
 80e:	1f 93       	push	r17
 810:	cf 93       	push	r28
 812:	8c 01       	movw	r16, r24
	unsigned char i = 0;
	
	while(str[i] != 0)
 814:	fc 01       	movw	r30, r24
 816:	80 81       	ld	r24, Z
 818:	88 23       	and	r24, r24
 81a:	51 f0       	breq	.+20     	; 0x830 <lcd_print+0x24>
	delay_us(100);
}
//*******************************************************************************
void lcd_print(char *str)
{
	unsigned char i = 0;
 81c:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(str[i] != 0)
	{
		lcdData(str[i]);
 81e:	0e 94 b7 03 	call	0x76e	; 0x76e <lcdData>
		i++;
 822:	cf 5f       	subi	r28, 0xFF	; 255
//*******************************************************************************
void lcd_print(char *str)
{
	unsigned char i = 0;
	
	while(str[i] != 0)
 824:	f8 01       	movw	r30, r16
 826:	ec 0f       	add	r30, r28
 828:	f1 1d       	adc	r31, r1
 82a:	80 81       	ld	r24, Z
 82c:	88 23       	and	r24, r24
 82e:	b9 f7       	brne	.-18     	; 0x81e <lcd_print+0x12>
	{
		lcdData(str[i]);
		i++;
	}
}
 830:	cf 91       	pop	r28
 832:	1f 91       	pop	r17
 834:	0f 91       	pop	r16
 836:	08 95       	ret

00000838 <lcd_clear>:
//*******************************************************************************
void lcd_clear(void)
{
	lcdCommand(CLEAR_DISPLAY);
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
	delay_us(2000);
 83e:	80 ed       	ldi	r24, 0xD0	; 208
 840:	97 e0       	ldi	r25, 0x07	; 7
 842:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
	lcd_gotoxy(1,1);
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	61 e0       	ldi	r22, 0x01	; 1
 84a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
}
 84e:	08 95       	ret

00000850 <lcd_generate>:
// LCD_build(1,pattern);
//
//LCD Ports are same as discussed in previous sections
 
void lcd_generate(unsigned char location, unsigned char *ptr)
{
 850:	0f 93       	push	r16
 852:	1f 93       	push	r17
 854:	cf 93       	push	r28
 856:	df 93       	push	r29
 858:	06 2f       	mov	r16, r22
 85a:	17 2f       	mov	r17, r23
	unsigned char i;
	if(location<8)
 85c:	88 30       	cpi	r24, 0x08	; 8
 85e:	70 f4       	brcc	.+28     	; 0x87c <__stack+0x1d>
	{
		lcdCommand(0x40+(location*8));
 860:	88 0f       	add	r24, r24
 862:	88 0f       	add	r24, r24
 864:	88 0f       	add	r24, r24
 866:	80 5c       	subi	r24, 0xC0	; 192
 868:	0e 94 40 03 	call	0x680	; 0x680 <lcdCommand>
 86c:	c0 2f       	mov	r28, r16
 86e:	d1 2f       	mov	r29, r17
 870:	18 e0       	ldi	r17, 0x08	; 8
		for(i=0;i<8;i++)
		{
			lcdData(ptr[i]);	
 872:	89 91       	ld	r24, Y+
 874:	0e 94 b7 03 	call	0x76e	; 0x76e <lcdData>
 878:	11 50       	subi	r17, 0x01	; 1
{
	unsigned char i;
	if(location<8)
	{
		lcdCommand(0x40+(location*8));
		for(i=0;i<8;i++)
 87a:	d9 f7       	brne	.-10     	; 0x872 <__stack+0x13>
		{
			lcdData(ptr[i]);	
		}	
	}
}
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	1f 91       	pop	r17
 882:	0f 91       	pop	r16
 884:	08 95       	ret

00000886 <init>:

//This function initiates the LCD, ADC Modules and ports needed

void init (void)
{
	lcd_init();										//Initialize LCD
 886:	0e 94 62 03 	call	0x6c4	; 0x6c4 <lcd_init>
	adc_init(128,AVCC,RIGHT);						//Initialize ADC
 88a:	80 e8       	ldi	r24, 0x80	; 128
 88c:	61 e0       	ldi	r22, 0x01	; 1
 88e:	40 e0       	ldi	r20, 0x00	; 0
 890:	0e 94 8d 00 	call	0x11a	; 0x11a <adc_init>
	DIO_pinmode('B', MOTOR_IN1, OUTPUT);			//PB0 is an output pin
 894:	82 e4       	ldi	r24, 0x42	; 66
 896:	60 e0       	ldi	r22, 0x00	; 0
 898:	41 e0       	ldi	r20, 0x01	; 1
 89a:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_pinmode>
	DIO_pinmode('B', MOTOR_IN2, OUTPUT);			//PB1 is an output pin
 89e:	82 e4       	ldi	r24, 0x42	; 66
 8a0:	61 e0       	ldi	r22, 0x01	; 1
 8a2:	41 e0       	ldi	r20, 0x01	; 1
 8a4:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_pinmode>
	DIO_pinmode('B', MOTOR_EN, OUTPUT);				//PB3 is an output pin
 8a8:	82 e4       	ldi	r24, 0x42	; 66
 8aa:	63 e0       	ldi	r22, 0x03	; 3
 8ac:	41 e0       	ldi	r20, 0x01	; 1
 8ae:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_pinmode>
	DIO_pinmode('B', BUZZER, OUTPUT);				//PB4 is an output pin
 8b2:	82 e4       	ldi	r24, 0x42	; 66
 8b4:	64 e0       	ldi	r22, 0x04	; 4
 8b6:	41 e0       	ldi	r20, 0x01	; 1
 8b8:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_pinmode>
	DIO_pinmode('B', SW, INPUT_PULLUP);				//PD0 is an input pin (pull-up)
 8bc:	82 e4       	ldi	r24, 0x42	; 66
 8be:	62 e0       	ldi	r22, 0x02	; 2
 8c0:	42 e0       	ldi	r20, 0x02	; 2
 8c2:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_pinmode>
	set_externalInterrupt(INT2, FALLING_EDGE);		//Enable INT0, FALLING_EDGE
 8c6:	85 e0       	ldi	r24, 0x05	; 5
 8c8:	63 e0       	ldi	r22, 0x03	; 3
 8ca:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <set_externalInterrupt>
	sei();
 8ce:	78 94       	sei
	eeprom_write(NUM_OF_TRIALS_ADDR,0);
 8d0:	89 e1       	ldi	r24, 0x19	; 25
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	60 e0       	ldi	r22, 0x00	; 0
 8d6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
}
 8da:	08 95       	ret

000008dc <welcome_message>:

//This function prints a welcome message to the user

void welcome_message (void)
{
	lcd_clear();
 8dc:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
	lcd_print(" Password-lock door");
 8e0:	80 e7       	ldi	r24, 0x70	; 112
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
	lcd_gotoxy(1,2);
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	62 e0       	ldi	r22, 0x02	; 2
 8ec:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	lcd_print("      Welcome!");
 8f0:	84 e8       	ldi	r24, 0x84	; 132
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
}
 8f8:	08 95       	ret

000008fa <choose_list>:

//This function lists the possible choices for user

void choose_list (void)
{
	lcd_clear();
 8fa:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
	lcd_print("(1)Log-in");
 8fe:	83 e9       	ldi	r24, 0x93	; 147
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
	lcd_gotoxy(1,2);
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	62 e0       	ldi	r22, 0x02	; 2
 90a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	lcd_print("(2)Change Password");
 90e:	8d e9       	ldi	r24, 0x9D	; 157
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
}
 916:	08 95       	ret

00000918 <compare>:

unsigned char compare(unsigned char* pass1, unsigned char* pass2, unsigned char len1, unsigned char len2)
{
	unsigned char i = 0;		//Just a counter variable

	if(len1 != len2)
 918:	42 17       	cp	r20, r18
 91a:	b1 f4       	brne	.+44     	; 0x948 <compare+0x30>
		return 0;
	}
	
	else
	{
		for(i = 0; i < len1; i++)
 91c:	44 23       	and	r20, r20
 91e:	b1 f0       	breq	.+44     	; 0x94c <compare+0x34>
		{
			if(pass1[i] != pass2[i])
 920:	fc 01       	movw	r30, r24
 922:	30 81       	ld	r19, Z
 924:	fb 01       	movw	r30, r22
 926:	20 81       	ld	r18, Z
 928:	32 17       	cp	r19, r18
 92a:	91 f4       	brne	.+36     	; 0x950 <compare+0x38>
/*************************************************************************************************************/

//This function compares password_1 and password_2 and returns '1' if they are matched and '0' 
//if matching didn't occur.

unsigned char compare(unsigned char* pass1, unsigned char* pass2, unsigned char len1, unsigned char len2)
 92c:	dc 01       	movw	r26, r24
 92e:	11 96       	adiw	r26, 0x01	; 1
 930:	31 96       	adiw	r30, 0x01	; 1
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	04 c0       	rjmp	.+8      	; 0x93e <compare+0x26>
	
	else
	{
		for(i = 0; i < len1; i++)
		{
			if(pass1[i] != pass2[i])
 936:	2d 91       	ld	r18, X+
 938:	91 91       	ld	r25, Z+
 93a:	29 17       	cp	r18, r25
 93c:	59 f4       	brne	.+22     	; 0x954 <compare+0x3c>
		return 0;
	}
	
	else
	{
		for(i = 0; i < len1; i++)
 93e:	8f 5f       	subi	r24, 0xFF	; 255
 940:	84 17       	cp	r24, r20
 942:	c9 f7       	brne	.-14     	; 0x936 <compare+0x1e>
				_delay_ms(2000);
#endif				
				continue;			//No need for it, just to make the code readable
			}
		}
		return 1;
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	08 95       	ret
		lcd_clear();
		lcd_gotoxy(1,1);
		lcd_print("! = ");
		_delay_ms(1000);
#endif
		return 0;
 948:	80 e0       	ldi	r24, 0x00	; 0
 94a:	08 95       	ret
				_delay_ms(2000);
#endif				
				continue;			//No need for it, just to make the code readable
			}
		}
		return 1;
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	08 95       	ret
				lcd_gotoxy(1,2);
				lcd_print("pass2 = ");
				lcd_print(itoa((int)pass2[i],(char*)str,10));
				_delay_ms(500);
#endif
				return 0;
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	08 95       	ret
 954:	80 e0       	ldi	r24, 0x00	; 0
				continue;			//No need for it, just to make the code readable
			}
		}
		return 1;
	}
}
 956:	08 95       	ret

00000958 <get_password>:

/*************************************************************************************************************/
//This function takes the password from the user

unsigned char get_password(unsigned char* pass)
{
 958:	cf 92       	push	r12
 95a:	df 92       	push	r13
 95c:	ef 92       	push	r14
 95e:	ff 92       	push	r15
 960:	1f 93       	push	r17
 962:	cf 93       	push	r28
 964:	df 93       	push	r29
 966:	6c 01       	movw	r12, r24
	unsigned char cnt = 0;
	
	lcd_cursor_on();
 968:	0e 94 f6 03 	call	0x7ec	; 0x7ec <lcd_cursor_on>
 96c:	e6 01       	movw	r28, r12
 96e:	11 e0       	ldi	r17, 0x01	; 1
 970:	01 c0       	rjmp	.+2      	; 0x974 <get_password+0x1c>
		if(cnt == PASSWORD_LENGTH)
		{
			while(get_key() != '*');
			pass[cnt++] = '*';
		}
	} while (pass[cnt-1] != '*');
 972:	19 2f       	mov	r17, r25
	
	lcd_cursor_on();
	
	do
	{
		pass[cnt] = get_key();
 974:	0e 94 c5 02 	call	0x58a	; 0x58a <get_key>


/*************************************************************************************************************/
//This function takes the password from the user

unsigned char get_password(unsigned char* pass)
 978:	7e 01       	movw	r14, r28
	
	lcd_cursor_on();
	
	do
	{
		pass[cnt] = get_key();
 97a:	88 83       	st	Y, r24
		
		if(pass[cnt] == '*')
 97c:	8a 32       	cpi	r24, 0x2A	; 42
 97e:	19 f0       	breq	.+6      	; 0x986 <get_password+0x2e>
			cnt++;
		}
		else
		{
			//lcdData(pass[cnt++]);
			lcdData('*');
 980:	8a e2       	ldi	r24, 0x2A	; 42
 982:	0e 94 b7 03 	call	0x76e	; 0x76e <lcdData>
			cnt++;
		}		
		if(cnt == PASSWORD_LENGTH)
 986:	1a 30       	cpi	r17, 0x0A	; 10
 988:	41 f4       	brne	.+16     	; 0x99a <get_password+0x42>
		{
			while(get_key() != '*');
 98a:	0e 94 c5 02 	call	0x58a	; 0x58a <get_key>
 98e:	8a 32       	cpi	r24, 0x2A	; 42
 990:	e1 f7       	brne	.-8      	; 0x98a <get_password+0x32>
			pass[cnt++] = '*';
 992:	f6 01       	movw	r30, r12
 994:	82 87       	std	Z+10, r24	; 0x0a
 996:	1b e0       	ldi	r17, 0x0B	; 11
 998:	07 c0       	rjmp	.+14     	; 0x9a8 <get_password+0x50>
 99a:	21 96       	adiw	r28, 0x01	; 1
 99c:	91 2f       	mov	r25, r17
 99e:	9f 5f       	subi	r25, 0xFF	; 255
		}
	} while (pass[cnt-1] != '*');
 9a0:	f7 01       	movw	r30, r14
 9a2:	80 81       	ld	r24, Z
 9a4:	8a 32       	cpi	r24, 0x2A	; 42
 9a6:	29 f7       	brne	.-54     	; 0x972 <get_password+0x1a>
	
	lcd_cursor_off();
 9a8:	0e 94 fe 03 	call	0x7fc	; 0x7fc <lcd_cursor_off>
	
	return cnt;
}
 9ac:	81 2f       	mov	r24, r17
 9ae:	df 91       	pop	r29
 9b0:	cf 91       	pop	r28
 9b2:	1f 91       	pop	r17
 9b4:	ff 90       	pop	r15
 9b6:	ef 90       	pop	r14
 9b8:	df 90       	pop	r13
 9ba:	cf 90       	pop	r12
 9bc:	08 95       	ret

000009be <sign_up>:

//This function asks the user to enter his desired password two times. If the passwords are 
//matched, the password will be saved. Else, It won't and the user should try again.

void sign_up (void)
{
 9be:	cf 92       	push	r12
 9c0:	df 92       	push	r13
 9c2:	ef 92       	push	r14
 9c4:	ff 92       	push	r15
 9c6:	0f 93       	push	r16
 9c8:	1f 93       	push	r17
 9ca:	cf 93       	push	r28
 9cc:	df 93       	push	r29
 9ce:	cd b7       	in	r28, 0x3d	; 61
 9d0:	de b7       	in	r29, 0x3e	; 62
 9d2:	66 97       	sbiw	r28, 0x16	; 22
 9d4:	0f b6       	in	r0, 0x3f	; 63
 9d6:	f8 94       	cli
 9d8:	de bf       	out	0x3e, r29	; 62
 9da:	0f be       	out	0x3f, r0	; 63
 9dc:	cd bf       	out	0x3d, r28	; 61
	unsigned char desired_password_1[11] = {0};		//The first entered password is saved here
 9de:	8b e0       	ldi	r24, 0x0B	; 11
 9e0:	8e 01       	movw	r16, r28
 9e2:	0f 5f       	subi	r16, 0xFF	; 255
 9e4:	1f 4f       	sbci	r17, 0xFF	; 255
 9e6:	d8 01       	movw	r26, r16
 9e8:	e8 2f       	mov	r30, r24
 9ea:	1d 92       	st	X+, r1
 9ec:	ea 95       	dec	r30
 9ee:	e9 f7       	brne	.-6      	; 0x9ea <sign_up+0x2c>
	unsigned char desired_password_2[11] = {0};		//The second entered password is saved here
 9f0:	0f 2e       	mov	r0, r31
 9f2:	fc e0       	ldi	r31, 0x0C	; 12
 9f4:	ef 2e       	mov	r14, r31
 9f6:	ff 24       	eor	r15, r15
 9f8:	f0 2d       	mov	r31, r0
 9fa:	ec 0e       	add	r14, r28
 9fc:	fd 1e       	adc	r15, r29
 9fe:	d7 01       	movw	r26, r14
 a00:	1d 92       	st	X+, r1
 a02:	8a 95       	dec	r24
 a04:	e9 f7       	brne	.-6      	; 0xa00 <sign_up+0x42>
	unsigned char length_1 = 0;						//Length of first entered password
	unsigned char length_2 = 0;						//Length of second entered password

	lcd_clear();
 a06:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
	lcd_gotoxy(1,1);
 a0a:	81 e0       	ldi	r24, 0x01	; 1
 a0c:	61 e0       	ldi	r22, 0x01	; 1
 a0e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	lcd_print("Your Password: ");
 a12:	80 eb       	ldi	r24, 0xB0	; 176
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
	lcd_gotoxy(1,2);
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	62 e0       	ldi	r22, 0x02	; 2
 a1e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	length_1 = get_password(desired_password_1);
 a22:	c8 01       	movw	r24, r16
 a24:	0e 94 ac 04 	call	0x958	; 0x958 <get_password>
 a28:	c8 2e       	mov	r12, r24
	
	lcd_clear();
 a2a:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
	lcd_gotoxy(1,1);
 a2e:	81 e0       	ldi	r24, 0x01	; 1
 a30:	61 e0       	ldi	r22, 0x01	; 1
 a32:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	lcd_print("Re-enter Password: ");
 a36:	80 ec       	ldi	r24, 0xC0	; 192
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
	lcd_gotoxy(1,2);
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	62 e0       	ldi	r22, 0x02	; 2
 a42:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	length_2 = get_password(desired_password_2);
 a46:	c7 01       	movw	r24, r14
 a48:	0e 94 ac 04 	call	0x958	; 0x958 <get_password>
 a4c:	28 2f       	mov	r18, r24
	
	
	if(compare(desired_password_1,desired_password_2,length_1,length_2))
 a4e:	c8 01       	movw	r24, r16
 a50:	b7 01       	movw	r22, r14
 a52:	4c 2d       	mov	r20, r12
 a54:	0e 94 8c 04 	call	0x918	; 0x918 <compare>
 a58:	88 23       	and	r24, r24
 a5a:	c9 f1       	breq	.+114    	; 0xace <sign_up+0x110>
	{
		unsigned char i = 0;		//Just a counter variable
		cli();
 a5c:	f8 94       	cli
		
		//Save the length of the password in EEPROM (Location = 0x0001)
		eeprom_write(0x0001,length_1);
 a5e:	81 e0       	ldi	r24, 0x01	; 1
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	6c 2d       	mov	r22, r12
 a64:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
		
		for(i = 0; i < length_1; i++)
 a68:	cc 20       	and	r12, r12
 a6a:	c1 f0       	breq	.+48     	; 0xa9c <sign_up+0xde>
 a6c:	78 01       	movw	r14, r16
/*************************************************************************************************************/

//This function asks the user to enter his desired password two times. If the passwords are 
//matched, the password will be saved. Else, It won't and the user should try again.

void sign_up (void)
 a6e:	ca 94       	dec	r12
 a70:	02 e0       	ldi	r16, 0x02	; 2
 a72:	10 e0       	ldi	r17, 0x00	; 0
 a74:	0c 0f       	add	r16, r28
 a76:	1d 1f       	adc	r17, r29
 a78:	0c 0d       	add	r16, r12
 a7a:	11 1d       	adc	r17, r1
 a7c:	cc 24       	eor	r12, r12
 a7e:	dd 24       	eor	r13, r13
 a80:	68 94       	set
 a82:	c1 f8       	bld	r12, 1
		eeprom_write(0x0001,length_1);
		
		for(i = 0; i < length_1; i++)
		{
			//Save the password in EEPROM (In location from 12 to 22)
			eeprom_write(i+2,desired_password_1[i]);
 a84:	f7 01       	movw	r30, r14
 a86:	61 91       	ld	r22, Z+
 a88:	7f 01       	movw	r14, r30
 a8a:	c6 01       	movw	r24, r12
 a8c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
 a90:	08 94       	sec
 a92:	c1 1c       	adc	r12, r1
 a94:	d1 1c       	adc	r13, r1
		cli();
		
		//Save the length of the password in EEPROM (Location = 0x0001)
		eeprom_write(0x0001,length_1);
		
		for(i = 0; i < length_1; i++)
 a96:	e0 16       	cp	r14, r16
 a98:	f1 06       	cpc	r15, r17
 a9a:	a1 f7       	brne	.-24     	; 0xa84 <sign_up+0xc6>
		{
			//Save the password in EEPROM (In location from 12 to 22)
			eeprom_write(i+2,desired_password_1[i]);
		}
		sei();
 a9c:	78 94       	sei
		
		//Successful operation
		lcd_clear();
 a9e:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
		lcd_print("  Your password is");
 aa2:	84 ed       	ldi	r24, 0xD4	; 212
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
		lcd_gotoxy(1,2);
 aaa:	81 e0       	ldi	r24, 0x01	; 1
 aac:	62 e0       	ldi	r22, 0x02	; 2
 aae:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
		lcd_print("      is saved");
 ab2:	87 ee       	ldi	r24, 0xE7	; 231
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
 aba:	8f e3       	ldi	r24, 0x3F	; 63
 abc:	9d e0       	ldi	r25, 0x0D	; 13
 abe:	a3 e0       	ldi	r26, 0x03	; 3
 ac0:	81 50       	subi	r24, 0x01	; 1
 ac2:	90 40       	sbci	r25, 0x00	; 0
 ac4:	a0 40       	sbci	r26, 0x00	; 0
 ac6:	e1 f7       	brne	.-8      	; 0xac0 <sign_up+0x102>
 ac8:	00 c0       	rjmp	.+0      	; 0xaca <sign_up+0x10c>
 aca:	00 00       	nop
 acc:	1d c0       	rjmp	.+58     	; 0xb08 <sign_up+0x14a>
	}
	
	else
	{
		//Failed operation, try again
		lcd_clear();
 ace:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
		lcd_gotoxy(1,1);
 ad2:	81 e0       	ldi	r24, 0x01	; 1
 ad4:	61 e0       	ldi	r22, 0x01	; 1
 ad6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
		lcd_print("Failed operation");
 ada:	86 ef       	ldi	r24, 0xF6	; 246
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
		lcd_gotoxy(1,2);
 ae2:	81 e0       	ldi	r24, 0x01	; 1
 ae4:	62 e0       	ldi	r22, 0x02	; 2
 ae6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
		lcd_print("Plz, Try again");
 aea:	87 e0       	ldi	r24, 0x07	; 7
 aec:	91 e0       	ldi	r25, 0x01	; 1
 aee:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
 af2:	8f e3       	ldi	r24, 0x3F	; 63
 af4:	9d e0       	ldi	r25, 0x0D	; 13
 af6:	a3 e0       	ldi	r26, 0x03	; 3
 af8:	81 50       	subi	r24, 0x01	; 1
 afa:	90 40       	sbci	r25, 0x00	; 0
 afc:	a0 40       	sbci	r26, 0x00	; 0
 afe:	e1 f7       	brne	.-8      	; 0xaf8 <sign_up+0x13a>
 b00:	00 c0       	rjmp	.+0      	; 0xb02 <sign_up+0x144>
 b02:	00 00       	nop
		_delay_ms(1000);
		sign_up();
 b04:	0e 94 df 04 	call	0x9be	; 0x9be <sign_up>
	}
}
 b08:	66 96       	adiw	r28, 0x16	; 22
 b0a:	0f b6       	in	r0, 0x3f	; 63
 b0c:	f8 94       	cli
 b0e:	de bf       	out	0x3e, r29	; 62
 b10:	0f be       	out	0x3f, r0	; 63
 b12:	cd bf       	out	0x3d, r28	; 61
 b14:	df 91       	pop	r29
 b16:	cf 91       	pop	r28
 b18:	1f 91       	pop	r17
 b1a:	0f 91       	pop	r16
 b1c:	ff 90       	pop	r15
 b1e:	ef 90       	pop	r14
 b20:	df 90       	pop	r13
 b22:	cf 90       	pop	r12
 b24:	08 95       	ret

00000b26 <check_password>:

//This function compare the entered password with the one saved in the EEPROM. If matching occurs,
//it would return '1'. Else, It would return '0'

unsigned char check_password(unsigned char len, unsigned char* password)
{	
 b26:	ef 92       	push	r14
 b28:	ff 92       	push	r15
 b2a:	1f 93       	push	r17
 b2c:	cf 93       	push	r28
 b2e:	df 93       	push	r29
 b30:	e8 2e       	mov	r14, r24
 b32:	d6 2f       	mov	r29, r22
 b34:	c7 2f       	mov	r28, r23
	unsigned char i = 0;				//Just a counter variable
	
	if(eeprom_read(0x0001) != len)		//Length is stored in EEPROM location 0x0001
 b36:	81 e0       	ldi	r24, 0x01	; 1
 b38:	0e 94 75 02 	call	0x4ea	; 0x4ea <eeprom_read>
 b3c:	8e 15       	cp	r24, r14
 b3e:	a1 f4       	brne	.+40     	; 0xb68 <check_password+0x42>
	{
		return 0;
	}
	else
	{
		for(i = 0; i < len; i++)
 b40:	88 23       	and	r24, r24
 b42:	a1 f0       	breq	.+40     	; 0xb6c <check_password+0x46>
 b44:	ed 2e       	mov	r14, r29
 b46:	fc 2e       	mov	r15, r28
/*************************************************************************************************************/

//This function compare the entered password with the one saved in the EEPROM. If matching occurs,
//it would return '1'. Else, It would return '0'

unsigned char check_password(unsigned char len, unsigned char* password)
 b48:	18 2f       	mov	r17, r24
 b4a:	1e 5f       	subi	r17, 0xFE	; 254
 b4c:	c2 e0       	ldi	r28, 0x02	; 2
	}
	else
	{
		for(i = 0; i < len; i++)
		{
			if(password[i] != eeprom_read(i+2))		//Password is stored in EEPROM from location 12 to 22
 b4e:	f7 01       	movw	r30, r14
 b50:	d1 91       	ld	r29, Z+
 b52:	7f 01       	movw	r14, r30
 b54:	8c 2f       	mov	r24, r28
 b56:	0e 94 75 02 	call	0x4ea	; 0x4ea <eeprom_read>
 b5a:	d8 17       	cp	r29, r24
 b5c:	49 f4       	brne	.+18     	; 0xb70 <check_password+0x4a>
 b5e:	cf 5f       	subi	r28, 0xFF	; 255
	{
		return 0;
	}
	else
	{
		for(i = 0; i < len; i++)
 b60:	c1 17       	cp	r28, r17
 b62:	a9 f7       	brne	.-22     	; 0xb4e <check_password+0x28>
			if(password[i] != eeprom_read(i+2))		//Password is stored in EEPROM from location 12 to 22
			{
				return 0;
			}
		}
		return 1;
 b64:	81 e0       	ldi	r24, 0x01	; 1
 b66:	05 c0       	rjmp	.+10     	; 0xb72 <check_password+0x4c>
{	
	unsigned char i = 0;				//Just a counter variable
	
	if(eeprom_read(0x0001) != len)		//Length is stored in EEPROM location 0x0001
	{
		return 0;
 b68:	80 e0       	ldi	r24, 0x00	; 0
 b6a:	03 c0       	rjmp	.+6      	; 0xb72 <check_password+0x4c>
			if(password[i] != eeprom_read(i+2))		//Password is stored in EEPROM from location 12 to 22
			{
				return 0;
			}
		}
		return 1;
 b6c:	81 e0       	ldi	r24, 0x01	; 1
 b6e:	01 c0       	rjmp	.+2      	; 0xb72 <check_password+0x4c>
	{
		for(i = 0; i < len; i++)
		{
			if(password[i] != eeprom_read(i+2))		//Password is stored in EEPROM from location 12 to 22
			{
				return 0;
 b70:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		return 1;
	}
}
 b72:	df 91       	pop	r29
 b74:	cf 91       	pop	r28
 b76:	1f 91       	pop	r17
 b78:	ff 90       	pop	r15
 b7a:	ef 90       	pop	r14
 b7c:	08 95       	ret

00000b7e <change_password>:

//This function changes the password of user. It firstly asks to enter his old password and if it is right, It
//will ask you to enter your new password two times. 

void change_password(void)
{
 b7e:	0f 93       	push	r16
 b80:	1f 93       	push	r17
 b82:	cf 93       	push	r28
 b84:	df 93       	push	r29
 b86:	cd b7       	in	r28, 0x3d	; 61
 b88:	de b7       	in	r29, 0x3e	; 62
 b8a:	2a 97       	sbiw	r28, 0x0a	; 10
 b8c:	0f b6       	in	r0, 0x3f	; 63
 b8e:	f8 94       	cli
 b90:	de bf       	out	0x3e, r29	; 62
 b92:	0f be       	out	0x3f, r0	; 63
 b94:	cd bf       	out	0x3d, r28	; 61
	unsigned char old_password[10] = {0};		//Old password is stored here
 b96:	8e 01       	movw	r16, r28
 b98:	0f 5f       	subi	r16, 0xFF	; 255
 b9a:	1f 4f       	sbci	r17, 0xFF	; 255
 b9c:	8a e0       	ldi	r24, 0x0A	; 10
 b9e:	f8 01       	movw	r30, r16
 ba0:	11 92       	st	Z+, r1
 ba2:	8a 95       	dec	r24
 ba4:	e9 f7       	brne	.-6      	; 0xba0 <change_password+0x22>
	unsigned char length = 0;					//length of old password is stored here
	
	lcd_clear();
 ba6:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
	lcd_print("Enter old password:");
 baa:	86 e1       	ldi	r24, 0x16	; 22
 bac:	91 e0       	ldi	r25, 0x01	; 1
 bae:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
	lcd_gotoxy(1,2);
 bb2:	81 e0       	ldi	r24, 0x01	; 1
 bb4:	62 e0       	ldi	r22, 0x02	; 2
 bb6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	length = get_password(old_password);
 bba:	c8 01       	movw	r24, r16
 bbc:	0e 94 ac 04 	call	0x958	; 0x958 <get_password>
	if (check_password(length, old_password))
 bc0:	b8 01       	movw	r22, r16
 bc2:	0e 94 93 05 	call	0xb26	; 0xb26 <check_password>
 bc6:	88 23       	and	r24, r24
 bc8:	19 f0       	breq	.+6      	; 0xbd0 <change_password+0x52>
	{
		sign_up();
 bca:	0e 94 df 04 	call	0x9be	; 0x9be <sign_up>
 bce:	02 c0       	rjmp	.+4      	; 0xbd4 <change_password+0x56>
	}
	else
	{
		
		change_password();
 bd0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <change_password>
	}
}
 bd4:	2a 96       	adiw	r28, 0x0a	; 10
 bd6:	0f b6       	in	r0, 0x3f	; 63
 bd8:	f8 94       	cli
 bda:	de bf       	out	0x3e, r29	; 62
 bdc:	0f be       	out	0x3f, r0	; 63
 bde:	cd bf       	out	0x3d, r28	; 61
 be0:	df 91       	pop	r29
 be2:	cf 91       	pop	r28
 be4:	1f 91       	pop	r17
 be6:	0f 91       	pop	r16
 be8:	08 95       	ret

00000bea <open_the_door>:

//This function rotates the motor in counter_clock wise direction which means that the door is closed

void open_the_door (void)
{
	DIO_write('B', MOTOR_EN, HIGH);		//EN = 1
 bea:	82 e4       	ldi	r24, 0x42	; 66
 bec:	63 e0       	ldi	r22, 0x03	; 3
 bee:	41 e0       	ldi	r20, 0x01	; 1
 bf0:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	DIO_write('B', MOTOR_IN1, HIGH);	//IN1 = 1
 bf4:	82 e4       	ldi	r24, 0x42	; 66
 bf6:	60 e0       	ldi	r22, 0x00	; 0
 bf8:	41 e0       	ldi	r20, 0x01	; 1
 bfa:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	DIO_write('B', MOTOR_IN2, LOW);		//IN2 = 0
 bfe:	82 e4       	ldi	r24, 0x42	; 66
 c00:	61 e0       	ldi	r22, 0x01	; 1
 c02:	40 e0       	ldi	r20, 0x00	; 0
 c04:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	lcd_clear();
 c08:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
	lcd_print(" The door is opened");
 c0c:	8a e2       	ldi	r24, 0x2A	; 42
 c0e:	91 e0       	ldi	r25, 0x01	; 1
 c10:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
 c14:	8f e7       	ldi	r24, 0x7F	; 127
 c16:	9a e1       	ldi	r25, 0x1A	; 26
 c18:	a6 e0       	ldi	r26, 0x06	; 6
 c1a:	81 50       	subi	r24, 0x01	; 1
 c1c:	90 40       	sbci	r25, 0x00	; 0
 c1e:	a0 40       	sbci	r26, 0x00	; 0
 c20:	e1 f7       	brne	.-8      	; 0xc1a <open_the_door+0x30>
 c22:	00 c0       	rjmp	.+0      	; 0xc24 <open_the_door+0x3a>
 c24:	00 00       	nop
	_delay_ms(2000);
	DIO_write('B', MOTOR_EN, LOW);		//EN = 0
 c26:	82 e4       	ldi	r24, 0x42	; 66
 c28:	63 e0       	ldi	r22, 0x03	; 3
 c2a:	40 e0       	ldi	r20, 0x00	; 0
 c2c:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	eeprom_write(NUM_OF_TRIALS_ADDR,0);
 c30:	89 e1       	ldi	r24, 0x19	; 25
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	60 e0       	ldi	r22, 0x00	; 0
 c36:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
}
 c3a:	08 95       	ret

00000c3c <close_the_door>:
//This function rotates the motor in counter_clock wise direction which means that the door is closed

void close_the_door (void)
{	
	
	DIO_write('B', MOTOR_EN, HIGH);		//EN = 1
 c3c:	82 e4       	ldi	r24, 0x42	; 66
 c3e:	63 e0       	ldi	r22, 0x03	; 3
 c40:	41 e0       	ldi	r20, 0x01	; 1
 c42:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	DIO_write('B', MOTOR_IN1, LOW);	//IN1 = 0
 c46:	82 e4       	ldi	r24, 0x42	; 66
 c48:	60 e0       	ldi	r22, 0x00	; 0
 c4a:	40 e0       	ldi	r20, 0x00	; 0
 c4c:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	DIO_write('B', MOTOR_IN2, HIGH);		//IN2 = 1
 c50:	82 e4       	ldi	r24, 0x42	; 66
 c52:	61 e0       	ldi	r22, 0x01	; 1
 c54:	41 e0       	ldi	r20, 0x01	; 1
 c56:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	DIO_write('B', BUZZER, HIGH);		//Make some noise :D
 c5a:	82 e4       	ldi	r24, 0x42	; 66
 c5c:	64 e0       	ldi	r22, 0x04	; 4
 c5e:	41 e0       	ldi	r20, 0x01	; 1
 c60:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	PORTB |= (1 << BUZZER);
 c64:	c4 9a       	sbi	0x18, 4	; 24
 c66:	8f e7       	ldi	r24, 0x7F	; 127
 c68:	9a e1       	ldi	r25, 0x1A	; 26
 c6a:	a6 e0       	ldi	r26, 0x06	; 6
 c6c:	81 50       	subi	r24, 0x01	; 1
 c6e:	90 40       	sbci	r25, 0x00	; 0
 c70:	a0 40       	sbci	r26, 0x00	; 0
 c72:	e1 f7       	brne	.-8      	; 0xc6c <close_the_door+0x30>
 c74:	00 c0       	rjmp	.+0      	; 0xc76 <close_the_door+0x3a>
 c76:	00 00       	nop
	_delay_ms(2000);
	DIO_write('B', BUZZER, LOW);
 c78:	82 e4       	ldi	r24, 0x42	; 66
 c7a:	64 e0       	ldi	r22, 0x04	; 4
 c7c:	40 e0       	ldi	r20, 0x00	; 0
 c7e:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	DIO_write('B', MOTOR_EN, LOW);		//EN = 0
 c82:	82 e4       	ldi	r24, 0x42	; 66
 c84:	63 e0       	ldi	r22, 0x03	; 3
 c86:	40 e0       	ldi	r20, 0x00	; 0
 c88:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_write>
	
}
 c8c:	08 95       	ret

00000c8e <__vector_3>:
//If the voltage on PB2 changes from HIGH to LOW (falling_edge) the door will be closed.
//In reality the interrupt can come from any source .... can be a sensor connected to the door or just 
//a simple switch when pressed, the door will be closed.

ISR(INT2_vect)
{
 c8e:	1f 92       	push	r1
 c90:	0f 92       	push	r0
 c92:	0f b6       	in	r0, 0x3f	; 63
 c94:	0f 92       	push	r0
 c96:	11 24       	eor	r1, r1
 c98:	2f 93       	push	r18
 c9a:	3f 93       	push	r19
 c9c:	4f 93       	push	r20
 c9e:	5f 93       	push	r21
 ca0:	6f 93       	push	r22
 ca2:	7f 93       	push	r23
 ca4:	8f 93       	push	r24
 ca6:	9f 93       	push	r25
 ca8:	af 93       	push	r26
 caa:	bf 93       	push	r27
 cac:	ef 93       	push	r30
 cae:	ff 93       	push	r31
	cli();
 cb0:	f8 94       	cli
	close_the_door();
 cb2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <close_the_door>
	sei();
 cb6:	78 94       	sei
}
 cb8:	ff 91       	pop	r31
 cba:	ef 91       	pop	r30
 cbc:	bf 91       	pop	r27
 cbe:	af 91       	pop	r26
 cc0:	9f 91       	pop	r25
 cc2:	8f 91       	pop	r24
 cc4:	7f 91       	pop	r23
 cc6:	6f 91       	pop	r22
 cc8:	5f 91       	pop	r21
 cca:	4f 91       	pop	r20
 ccc:	3f 91       	pop	r19
 cce:	2f 91       	pop	r18
 cd0:	0f 90       	pop	r0
 cd2:	0f be       	out	0x3f, r0	; 63
 cd4:	0f 90       	pop	r0
 cd6:	1f 90       	pop	r1
 cd8:	18 95       	reti

00000cda <try_again>:

/*************************************************************************************************************/

void try_again (void)
{
 cda:	0f 93       	push	r16
 cdc:	1f 93       	push	r17
 cde:	cf 93       	push	r28
 ce0:	df 93       	push	r29
	static unsigned char number_of_trials = 0;
	number_of_trials = eeprom_read(NUM_OF_TRIALS_ADDR);
 ce2:	89 e1       	ldi	r24, 0x19	; 25
 ce4:	0e 94 75 02 	call	0x4ea	; 0x4ea <eeprom_read>
	eeprom_write(NUM_OF_TRIALS_ADDR,++number_of_trials);			//This variable is stored in EEPROM location number 25
 ce8:	68 2f       	mov	r22, r24
 cea:	6f 5f       	subi	r22, 0xFF	; 255
 cec:	60 93 ac 01 	sts	0x01AC, r22
 cf0:	89 e1       	ldi	r24, 0x19	; 25
 cf2:	90 e0       	ldi	r25, 0x00	; 0
 cf4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
	
	if(eeprom_read(NUM_OF_TRIALS_ADDR) == 3 || eeprom_read(NUM_OF_TRIALS_ADDR) == 6)
 cf8:	89 e1       	ldi	r24, 0x19	; 25
 cfa:	0e 94 75 02 	call	0x4ea	; 0x4ea <eeprom_read>
 cfe:	83 30       	cpi	r24, 0x03	; 3
 d00:	29 f0       	breq	.+10     	; 0xd0c <try_again+0x32>
 d02:	89 e1       	ldi	r24, 0x19	; 25
 d04:	0e 94 75 02 	call	0x4ea	; 0x4ea <eeprom_read>
 d08:	86 30       	cpi	r24, 0x06	; 6
 d0a:	71 f5       	brne	.+92     	; 0xd68 <try_again+0x8e>
	{
		unsigned char i = 0;
		lcd_clear();
 d0c:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
		lcd_gotoxy(1,1);
 d10:	81 e0       	ldi	r24, 0x01	; 1
 d12:	61 e0       	ldi	r22, 0x01	; 1
 d14:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
		lcd_print("Wrong password");
 d18:	8e e3       	ldi	r24, 0x3E	; 62
 d1a:	91 e0       	ldi	r25, 0x01	; 1
 d1c:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
		lcd_gotoxy(1,2);
 d20:	81 e0       	ldi	r24, 0x01	; 1
 d22:	62 e0       	ldi	r22, 0x02	; 2
 d24:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
		lcd_print("Try again in    Sec");
 d28:	8d e4       	ldi	r24, 0x4D	; 77
 d2a:	91 e0       	ldi	r25, 0x01	; 1
 d2c:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
 d30:	cb e3       	ldi	r28, 0x3B	; 59
 d32:	d0 e0       	ldi	r29, 0x00	; 0
		for(i = 59; i > 0; i--)
		{	
			lcd_gotoxy(14,2);
			itoa((int)i, str, 10);
 d34:	0d ea       	ldi	r16, 0xAD	; 173
 d36:	11 e0       	ldi	r17, 0x01	; 1
		lcd_print("Wrong password");
		lcd_gotoxy(1,2);
		lcd_print("Try again in    Sec");
		for(i = 59; i > 0; i--)
		{	
			lcd_gotoxy(14,2);
 d38:	8e e0       	ldi	r24, 0x0E	; 14
 d3a:	62 e0       	ldi	r22, 0x02	; 2
 d3c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
			itoa((int)i, str, 10);
 d40:	ce 01       	movw	r24, r28
 d42:	b8 01       	movw	r22, r16
 d44:	4a e0       	ldi	r20, 0x0A	; 10
 d46:	50 e0       	ldi	r21, 0x00	; 0
 d48:	0e 94 39 07 	call	0xe72	; 0xe72 <itoa>
			lcd_print(str);
 d4c:	c8 01       	movw	r24, r16
 d4e:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
 d52:	87 ea       	ldi	r24, 0xA7	; 167
 d54:	91 e6       	ldi	r25, 0x61	; 97
 d56:	01 97       	sbiw	r24, 0x01	; 1
 d58:	f1 f7       	brne	.-4      	; 0xd56 <try_again+0x7c>
 d5a:	00 c0       	rjmp	.+0      	; 0xd5c <try_again+0x82>
 d5c:	00 00       	nop
 d5e:	21 97       	sbiw	r28, 0x01	; 1
		lcd_clear();
		lcd_gotoxy(1,1);
		lcd_print("Wrong password");
		lcd_gotoxy(1,2);
		lcd_print("Try again in    Sec");
		for(i = 59; i > 0; i--)
 d60:	59 f7       	brne	.-42     	; 0xd38 <try_again+0x5e>
			lcd_gotoxy(14,2);
			itoa((int)i, str, 10);
			lcd_print(str);
			_delay_ms(100);
		}
		log_in();
 d62:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <log_in>
	static unsigned char number_of_trials = 0;
	number_of_trials = eeprom_read(NUM_OF_TRIALS_ADDR);
	eeprom_write(NUM_OF_TRIALS_ADDR,++number_of_trials);			//This variable is stored in EEPROM location number 25
	
	if(eeprom_read(NUM_OF_TRIALS_ADDR) == 3 || eeprom_read(NUM_OF_TRIALS_ADDR) == 6)
	{
 d66:	32 c0       	rjmp	.+100    	; 0xdcc <try_again+0xf2>
			_delay_ms(100);
		}
		log_in();
	}
	
	else if (eeprom_read(NUM_OF_TRIALS_ADDR) >= 9)
 d68:	89 e1       	ldi	r24, 0x19	; 25
 d6a:	0e 94 75 02 	call	0x4ea	; 0x4ea <eeprom_read>
 d6e:	89 30       	cpi	r24, 0x09	; 9
 d70:	80 f0       	brcs	.+32     	; 0xd92 <try_again+0xb8>
	{
		lcd_clear();
 d72:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
		eeprom_write(26,0xFF);
 d76:	8a e1       	ldi	r24, 0x1A	; 26
 d78:	90 e0       	ldi	r25, 0x00	; 0
 d7a:	6f ef       	ldi	r22, 0xFF	; 255
 d7c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <eeprom_write>
		lcd_print(" The door is closed ");
 d80:	81 e6       	ldi	r24, 0x61	; 97
 d82:	91 e0       	ldi	r25, 0x01	; 1
 d84:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
		lcd_print("    permanently");
 d88:	86 e7       	ldi	r24, 0x76	; 118
 d8a:	91 e0       	ldi	r25, 0x01	; 1
 d8c:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
 d90:	ff cf       	rjmp	.-2      	; 0xd90 <try_again+0xb6>
		while(1);			//Stay here for ever
	}
	
	else
	{
		lcd_clear();
 d92:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
		lcd_gotoxy(1,1);
 d96:	81 e0       	ldi	r24, 0x01	; 1
 d98:	61 e0       	ldi	r22, 0x01	; 1
 d9a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
		lcd_print("Wrong password");
 d9e:	8e e3       	ldi	r24, 0x3E	; 62
 da0:	91 e0       	ldi	r25, 0x01	; 1
 da2:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
		lcd_gotoxy(1,2);
 da6:	81 e0       	ldi	r24, 0x01	; 1
 da8:	62 e0       	ldi	r22, 0x02	; 2
 daa:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
		lcd_print("Plz, try again");
 dae:	86 e8       	ldi	r24, 0x86	; 134
 db0:	91 e0       	ldi	r25, 0x01	; 1
 db2:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
 db6:	8f e3       	ldi	r24, 0x3F	; 63
 db8:	9d e0       	ldi	r25, 0x0D	; 13
 dba:	a3 e0       	ldi	r26, 0x03	; 3
 dbc:	81 50       	subi	r24, 0x01	; 1
 dbe:	90 40       	sbci	r25, 0x00	; 0
 dc0:	a0 40       	sbci	r26, 0x00	; 0
 dc2:	e1 f7       	brne	.-8      	; 0xdbc <try_again+0xe2>
 dc4:	00 c0       	rjmp	.+0      	; 0xdc6 <try_again+0xec>
 dc6:	00 00       	nop
		_delay_ms(1000);
		log_in();
 dc8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <log_in>
	}
}
 dcc:	df 91       	pop	r29
 dce:	cf 91       	pop	r28
 dd0:	1f 91       	pop	r17
 dd2:	0f 91       	pop	r16
 dd4:	08 95       	ret

00000dd6 <log_in>:

//This function tells the user to enter the saved password and then checks if it is right or not
//using check_password function. And then make a decision upon the results

void log_in (void)
{
 dd6:	0f 93       	push	r16
 dd8:	1f 93       	push	r17
 dda:	cf 93       	push	r28
 ddc:	df 93       	push	r29
 dde:	cd b7       	in	r28, 0x3d	; 61
 de0:	de b7       	in	r29, 0x3e	; 62
 de2:	2b 97       	sbiw	r28, 0x0b	; 11
 de4:	0f b6       	in	r0, 0x3f	; 63
 de6:	f8 94       	cli
 de8:	de bf       	out	0x3e, r29	; 62
 dea:	0f be       	out	0x3f, r0	; 63
 dec:	cd bf       	out	0x3d, r28	; 61
	unsigned char entered_password[11] = {0};				//The entered password is saved here
 dee:	8e 01       	movw	r16, r28
 df0:	0f 5f       	subi	r16, 0xFF	; 255
 df2:	1f 4f       	sbci	r17, 0xFF	; 255
 df4:	8b e0       	ldi	r24, 0x0B	; 11
 df6:	f8 01       	movw	r30, r16
 df8:	11 92       	st	Z+, r1
 dfa:	8a 95       	dec	r24
 dfc:	e9 f7       	brne	.-6      	; 0xdf8 <log_in+0x22>
	unsigned char length = 0;								//Length of entered password
	
	lcd_clear();
 dfe:	0e 94 1c 04 	call	0x838	; 0x838 <lcd_clear>
	lcd_print("Enter your password: ");
 e02:	85 e9       	ldi	r24, 0x95	; 149
 e04:	91 e0       	ldi	r25, 0x01	; 1
 e06:	0e 94 06 04 	call	0x80c	; 0x80c <lcd_print>
	lcd_gotoxy(1,2);
 e0a:	81 e0       	ldi	r24, 0x01	; 1
 e0c:	62 e0       	ldi	r22, 0x02	; 2
 e0e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd_gotoxy>
	length = get_password(entered_password);
 e12:	c8 01       	movw	r24, r16
 e14:	0e 94 ac 04 	call	0x958	; 0x958 <get_password>
	
	if(check_password(length, entered_password))
 e18:	b8 01       	movw	r22, r16
 e1a:	0e 94 93 05 	call	0xb26	; 0xb26 <check_password>
 e1e:	88 23       	and	r24, r24
 e20:	19 f0       	breq	.+6      	; 0xe28 <log_in+0x52>
	{
		open_the_door();
 e22:	0e 94 f5 05 	call	0xbea	; 0xbea <open_the_door>
 e26:	02 c0       	rjmp	.+4      	; 0xe2c <log_in+0x56>
	}
	else
	{
		try_again();
 e28:	0e 94 6d 06 	call	0xcda	; 0xcda <try_again>
	}
}
 e2c:	2b 96       	adiw	r28, 0x0b	; 11
 e2e:	0f b6       	in	r0, 0x3f	; 63
 e30:	f8 94       	cli
 e32:	de bf       	out	0x3e, r29	; 62
 e34:	0f be       	out	0x3f, r0	; 63
 e36:	cd bf       	out	0x3d, r28	; 61
 e38:	df 91       	pop	r29
 e3a:	cf 91       	pop	r28
 e3c:	1f 91       	pop	r17
 e3e:	0f 91       	pop	r16
 e40:	08 95       	ret

00000e42 <main>:
/*************************************************************************************************************/

int main(void)
{			
	unsigned char choice = 0;			
	init();
 e42:	0e 94 43 04 	call	0x886	; 0x886 <init>
	
	while(1)
	{
		//Print Hello message on screen
		welcome_message();
 e46:	0e 94 6e 04 	call	0x8dc	; 0x8dc <welcome_message>
		
		//Press any key to go to choose list
		get_key();
 e4a:	0e 94 c5 02 	call	0x58a	; 0x58a <get_key>
		
		do 
		{
			choose_list();
 e4e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <choose_list>
			choice = get_key();
 e52:	0e 94 c5 02 	call	0x58a	; 0x58a <get_key>
		} while (choice != '1' && choice != '2');
 e56:	98 2f       	mov	r25, r24
 e58:	91 53       	subi	r25, 0x31	; 49
 e5a:	92 30       	cpi	r25, 0x02	; 2
 e5c:	c0 f7       	brcc	.-16     	; 0xe4e <main+0xc>
		
		if(choice == '1')
 e5e:	81 33       	cpi	r24, 0x31	; 49
 e60:	19 f4       	brne	.+6      	; 0xe68 <main+0x26>
		{
			log_in();
 e62:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <log_in>
 e66:	ef cf       	rjmp	.-34     	; 0xe46 <main+0x4>
		}
		else if(choice == '2')
 e68:	82 33       	cpi	r24, 0x32	; 50
 e6a:	69 f7       	brne	.-38     	; 0xe46 <main+0x4>
		{
			change_password();
 e6c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <change_password>
 e70:	ea cf       	rjmp	.-44     	; 0xe46 <main+0x4>

00000e72 <itoa>:
 e72:	fb 01       	movw	r30, r22
 e74:	9f 01       	movw	r18, r30
 e76:	e8 94       	clt
 e78:	42 30       	cpi	r20, 0x02	; 2
 e7a:	c4 f0       	brlt	.+48     	; 0xeac <itoa+0x3a>
 e7c:	45 32       	cpi	r20, 0x25	; 37
 e7e:	b4 f4       	brge	.+44     	; 0xeac <itoa+0x3a>
 e80:	4a 30       	cpi	r20, 0x0A	; 10
 e82:	29 f4       	brne	.+10     	; 0xe8e <itoa+0x1c>
 e84:	97 fb       	bst	r25, 7
 e86:	1e f4       	brtc	.+6      	; 0xe8e <itoa+0x1c>
 e88:	90 95       	com	r25
 e8a:	81 95       	neg	r24
 e8c:	9f 4f       	sbci	r25, 0xFF	; 255
 e8e:	64 2f       	mov	r22, r20
 e90:	77 27       	eor	r23, r23
 e92:	0e 94 6a 07 	call	0xed4	; 0xed4 <__udivmodhi4>
 e96:	80 5d       	subi	r24, 0xD0	; 208
 e98:	8a 33       	cpi	r24, 0x3A	; 58
 e9a:	0c f0       	brlt	.+2      	; 0xe9e <itoa+0x2c>
 e9c:	89 5d       	subi	r24, 0xD9	; 217
 e9e:	81 93       	st	Z+, r24
 ea0:	cb 01       	movw	r24, r22
 ea2:	00 97       	sbiw	r24, 0x00	; 0
 ea4:	a1 f7       	brne	.-24     	; 0xe8e <itoa+0x1c>
 ea6:	16 f4       	brtc	.+4      	; 0xeac <itoa+0x3a>
 ea8:	5d e2       	ldi	r21, 0x2D	; 45
 eaa:	51 93       	st	Z+, r21
 eac:	10 82       	st	Z, r1
 eae:	c9 01       	movw	r24, r18
 eb0:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <strrev>

00000eb4 <strrev>:
 eb4:	dc 01       	movw	r26, r24
 eb6:	fc 01       	movw	r30, r24
 eb8:	67 2f       	mov	r22, r23
 eba:	71 91       	ld	r23, Z+
 ebc:	77 23       	and	r23, r23
 ebe:	e1 f7       	brne	.-8      	; 0xeb8 <strrev+0x4>
 ec0:	32 97       	sbiw	r30, 0x02	; 2
 ec2:	04 c0       	rjmp	.+8      	; 0xecc <strrev+0x18>
 ec4:	7c 91       	ld	r23, X
 ec6:	6d 93       	st	X+, r22
 ec8:	70 83       	st	Z, r23
 eca:	62 91       	ld	r22, -Z
 ecc:	ae 17       	cp	r26, r30
 ece:	bf 07       	cpc	r27, r31
 ed0:	c8 f3       	brcs	.-14     	; 0xec4 <strrev+0x10>
 ed2:	08 95       	ret

00000ed4 <__udivmodhi4>:
 ed4:	aa 1b       	sub	r26, r26
 ed6:	bb 1b       	sub	r27, r27
 ed8:	51 e1       	ldi	r21, 0x11	; 17
 eda:	07 c0       	rjmp	.+14     	; 0xeea <__udivmodhi4_ep>

00000edc <__udivmodhi4_loop>:
 edc:	aa 1f       	adc	r26, r26
 ede:	bb 1f       	adc	r27, r27
 ee0:	a6 17       	cp	r26, r22
 ee2:	b7 07       	cpc	r27, r23
 ee4:	10 f0       	brcs	.+4      	; 0xeea <__udivmodhi4_ep>
 ee6:	a6 1b       	sub	r26, r22
 ee8:	b7 0b       	sbc	r27, r23

00000eea <__udivmodhi4_ep>:
 eea:	88 1f       	adc	r24, r24
 eec:	99 1f       	adc	r25, r25
 eee:	5a 95       	dec	r21
 ef0:	a9 f7       	brne	.-22     	; 0xedc <__udivmodhi4_loop>
 ef2:	80 95       	com	r24
 ef4:	90 95       	com	r25
 ef6:	bc 01       	movw	r22, r24
 ef8:	cd 01       	movw	r24, r26
 efa:	08 95       	ret

00000efc <_exit>:
 efc:	f8 94       	cli

00000efe <__stop_program>:
 efe:	ff cf       	rjmp	.-2      	; 0xefe <__stop_program>
